// ==============================================================
// Generated by Vitis HLS v2022.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module decompressor_kernel_code_generator_array_dyn_new_Pipeline_cnt_lens (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        codes_val,
        idx,
        lens_address0,
        lens_ce0,
        lens_q0,
        count_out,
        count_out_ap_vld,
        count_1_out,
        count_1_out_ap_vld,
        count_2_out,
        count_2_out_ap_vld,
        count_3_out,
        count_3_out_ap_vld,
        count_4_out,
        count_4_out_ap_vld,
        count_5_out,
        count_5_out_ap_vld,
        count_6_out,
        count_6_out_ap_vld,
        count_7_out,
        count_7_out_ap_vld,
        count_8_out,
        count_8_out_ap_vld,
        count_9_out,
        count_9_out_ap_vld,
        count_10_out,
        count_10_out_ap_vld,
        count_11_out,
        count_11_out_ap_vld,
        count_12_out,
        count_12_out_ap_vld,
        count_13_out,
        count_13_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] codes_val;
input  [8:0] idx;
output  [8:0] lens_address0;
output   lens_ce0;
input  [4:0] lens_q0;
output  [8:0] count_out;
output   count_out_ap_vld;
output  [8:0] count_1_out;
output   count_1_out_ap_vld;
output  [8:0] count_2_out;
output   count_2_out_ap_vld;
output  [8:0] count_3_out;
output   count_3_out_ap_vld;
output  [8:0] count_4_out;
output   count_4_out_ap_vld;
output  [8:0] count_5_out;
output   count_5_out_ap_vld;
output  [8:0] count_6_out;
output   count_6_out_ap_vld;
output  [8:0] count_7_out;
output   count_7_out_ap_vld;
output  [8:0] count_8_out;
output   count_8_out_ap_vld;
output  [8:0] count_9_out;
output   count_9_out_ap_vld;
output  [8:0] count_10_out;
output   count_10_out_ap_vld;
output  [8:0] count_11_out;
output   count_11_out_ap_vld;
output  [8:0] count_12_out;
output   count_12_out_ap_vld;
output  [8:0] count_13_out;
output   count_13_out_ap_vld;

reg ap_idle;
reg lens_ce0;
reg count_out_ap_vld;
reg count_1_out_ap_vld;
reg count_2_out_ap_vld;
reg count_3_out_ap_vld;
reg count_4_out_ap_vld;
reg count_5_out_ap_vld;
reg count_6_out_ap_vld;
reg count_7_out_ap_vld;
reg count_8_out_ap_vld;
reg count_9_out_ap_vld;
reg count_10_out_ap_vld;
reg count_11_out_ap_vld;
reg count_12_out_ap_vld;
reg count_13_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln774_fu_385_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln776_fu_403_p1;
wire    ap_block_pp0_stage0;
reg   [8:0] i_fu_106;
wire   [8:0] add_ln774_fu_391_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_i_4;
reg   [8:0] count_14_fu_110;
wire   [8:0] count_16_fu_537_p2;
wire   [3:0] trunc_ln776_fu_461_p1;
reg   [8:0] count_13_fu_114;
reg   [8:0] count_12_fu_118;
reg   [8:0] count_11_fu_122;
reg   [8:0] count_10_fu_126;
reg   [8:0] count_9_fu_130;
reg   [8:0] count_8_fu_134;
reg   [8:0] count_7_fu_138;
reg   [8:0] count_6_fu_142;
reg   [8:0] count_5_fu_146;
reg   [8:0] count_4_fu_150;
reg   [8:0] count_3_fu_154;
reg   [8:0] count_2_fu_158;
reg   [8:0] count_1_fu_162;
reg   [8:0] count_fu_166;
reg   [8:0] count_15_fu_170;
wire    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln776_fu_397_p2;
wire   [8:0] tmp_fu_465_p33;
wire   [3:0] tmp_fu_465_p34;
wire   [8:0] tmp_fu_465_p35;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [3:0] tmp_fu_465_p1;
wire   [3:0] tmp_fu_465_p3;
wire   [3:0] tmp_fu_465_p5;
wire   [3:0] tmp_fu_465_p7;
wire   [3:0] tmp_fu_465_p9;
wire   [3:0] tmp_fu_465_p11;
wire   [3:0] tmp_fu_465_p13;
wire   [3:0] tmp_fu_465_p15;
wire  signed [3:0] tmp_fu_465_p17;
wire  signed [3:0] tmp_fu_465_p19;
wire  signed [3:0] tmp_fu_465_p21;
wire  signed [3:0] tmp_fu_465_p23;
wire  signed [3:0] tmp_fu_465_p25;
wire  signed [3:0] tmp_fu_465_p27;
wire  signed [3:0] tmp_fu_465_p29;
wire  signed [3:0] tmp_fu_465_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_fu_106 = 9'd0;
#0 count_14_fu_110 = 9'd0;
#0 count_13_fu_114 = 9'd0;
#0 count_12_fu_118 = 9'd0;
#0 count_11_fu_122 = 9'd0;
#0 count_10_fu_126 = 9'd0;
#0 count_9_fu_130 = 9'd0;
#0 count_8_fu_134 = 9'd0;
#0 count_7_fu_138 = 9'd0;
#0 count_6_fu_142 = 9'd0;
#0 count_5_fu_146 = 9'd0;
#0 count_4_fu_150 = 9'd0;
#0 count_3_fu_154 = 9'd0;
#0 count_2_fu_158 = 9'd0;
#0 count_1_fu_162 = 9'd0;
#0 count_fu_166 = 9'd0;
#0 count_15_fu_170 = 9'd0;
#0 ap_done_reg = 1'b0;
end

decompressor_kernel_sparsemux_33_4_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 9 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 9 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 9 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 9 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 9 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 9 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 9 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 9 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 9 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 9 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 9 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 9 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 9 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 9 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 9 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 9 ),
    .def_WIDTH( 9 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
sparsemux_33_4_9_1_1_U156(
    .din0(count_14_fu_110),
    .din1(count_13_fu_114),
    .din2(count_12_fu_118),
    .din3(count_11_fu_122),
    .din4(count_10_fu_126),
    .din5(count_9_fu_130),
    .din6(count_8_fu_134),
    .din7(count_7_fu_138),
    .din8(count_6_fu_142),
    .din9(count_5_fu_146),
    .din10(count_4_fu_150),
    .din11(count_3_fu_154),
    .din12(count_2_fu_158),
    .din13(count_1_fu_162),
    .din14(count_fu_166),
    .din15(count_15_fu_170),
    .def(tmp_fu_465_p33),
    .sel(tmp_fu_465_p34),
    .dout(tmp_fu_465_p35)
);

decompressor_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_10_fu_126 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd4))) begin
            count_10_fu_126 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_11_fu_122 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd3))) begin
            count_11_fu_122 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_12_fu_118 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd2))) begin
            count_12_fu_118 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_13_fu_114 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd1))) begin
            count_13_fu_114 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_14_fu_110 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd0))) begin
            count_14_fu_110 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_15_fu_170 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd15))) begin
            count_15_fu_170 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_1_fu_162 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd13))) begin
            count_1_fu_162 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_2_fu_158 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd12))) begin
            count_2_fu_158 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_3_fu_154 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd11))) begin
            count_3_fu_154 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_4_fu_150 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd10))) begin
            count_4_fu_150 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_5_fu_146 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd9))) begin
            count_5_fu_146 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_6_fu_142 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd8))) begin
            count_6_fu_142 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_7_fu_138 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd7))) begin
            count_7_fu_138 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_8_fu_134 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd6))) begin
            count_8_fu_134 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_9_fu_130 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd5))) begin
            count_9_fu_130 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_fu_166 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln776_fu_461_p1 == 4'd14))) begin
            count_fu_166 <= count_16_fu_537_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln774_fu_385_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_106 <= add_ln774_fu_391_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_106 <= 9'd0;
        end
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_4 = 9'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_106;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_10_out_ap_vld = 1'b1;
    end else begin
        count_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_11_out_ap_vld = 1'b1;
    end else begin
        count_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_12_out_ap_vld = 1'b1;
    end else begin
        count_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_13_out_ap_vld = 1'b1;
    end else begin
        count_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_1_out_ap_vld = 1'b1;
    end else begin
        count_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_2_out_ap_vld = 1'b1;
    end else begin
        count_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_3_out_ap_vld = 1'b1;
    end else begin
        count_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_4_out_ap_vld = 1'b1;
    end else begin
        count_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_5_out_ap_vld = 1'b1;
    end else begin
        count_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_6_out_ap_vld = 1'b1;
    end else begin
        count_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_7_out_ap_vld = 1'b1;
    end else begin
        count_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_8_out_ap_vld = 1'b1;
    end else begin
        count_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_9_out_ap_vld = 1'b1;
    end else begin
        count_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln774_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_out_ap_vld = 1'b1;
    end else begin
        count_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lens_ce0 = 1'b1;
    end else begin
        lens_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln774_fu_391_p2 = (ap_sig_allocacmp_i_4 + 9'd1);

assign add_ln776_fu_397_p2 = (ap_sig_allocacmp_i_4 + idx);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign count_10_out = count_10_fu_126;

assign count_11_out = count_11_fu_122;

assign count_12_out = count_12_fu_118;

assign count_13_out = count_13_fu_114;

assign count_16_fu_537_p2 = (tmp_fu_465_p35 + 9'd1);

assign count_1_out = count_1_fu_162;

assign count_2_out = count_2_fu_158;

assign count_3_out = count_3_fu_154;

assign count_4_out = count_4_fu_150;

assign count_5_out = count_5_fu_146;

assign count_6_out = count_6_fu_142;

assign count_7_out = count_7_fu_138;

assign count_8_out = count_8_fu_134;

assign count_9_out = count_9_fu_130;

assign count_out = count_fu_166;

assign icmp_ln774_fu_385_p2 = ((ap_sig_allocacmp_i_4 == codes_val) ? 1'b1 : 1'b0);

assign lens_address0 = zext_ln776_fu_403_p1;

assign tmp_fu_465_p33 = 'bx;

assign tmp_fu_465_p34 = lens_q0[3:0];

assign trunc_ln776_fu_461_p1 = lens_q0[3:0];

assign zext_ln776_fu_403_p1 = add_ln776_fu_397_p2;

endmodule //decompressor_kernel_code_generator_array_dyn_new_Pipeline_cnt_lens
