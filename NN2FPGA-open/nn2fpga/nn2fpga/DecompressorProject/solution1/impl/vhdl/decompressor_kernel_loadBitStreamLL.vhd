-- ==============================================================
-- Generated by Vitis HLS v2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decompressor_kernel_loadBitStreamLL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bitbuffer_read : IN STD_LOGIC_VECTOR (31 downto 0);
    bits_cntr_read_2 : IN STD_LOGIC_VECTOR (5 downto 0);
    bits_cntr_read : IN STD_LOGIC_VECTOR (5 downto 0);
    huffman_input_stream_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    huffman_input_stream_empty_n : IN STD_LOGIC;
    huffman_input_stream_read : OUT STD_LOGIC;
    huffman_eos_stream_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    huffman_eos_stream_empty_n : IN STD_LOGIC;
    huffman_eos_stream_read : OUT STD_LOGIC;
    done_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    done_read : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0);
    huffman_input_stream_blk_n : OUT STD_LOGIC;
    huffman_eos_stream_blk_n : OUT STD_LOGIC );
end;


architecture behav of decompressor_kernel_loadBitStreamLL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal or_ln57_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln62_fu_166_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_phi_ln64_phi_fu_91_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_phi_mux_phi_ln64_1_phi_fu_101_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln60_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_bitbuffer_0_phi_fu_112_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_119_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln57_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln60_fu_141_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln60_1_fu_145_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln60_fu_149_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln60_2_fu_155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_0_preg <= ap_phi_mux_bitbuffer_0_phi_fu_112_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv6_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_1_preg <= ap_phi_mux_phi_ln64_phi_fu_91_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_2_preg <= ap_phi_mux_phi_ln64_1_phi_fu_101_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln60_fu_159_p2 <= std_logic_vector(unsigned(zext_ln60_2_fu_155_p1) + unsigned(bitbuffer_read));
    add_ln62_fu_166_p2 <= std_logic_vector(unsigned(bits_cntr_read) + unsigned(ap_const_lv6_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, huffman_input_stream_empty_n, huffman_eos_stream_empty_n, or_ln57_fu_135_p2)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or ((or_ln57_fu_135_p2 = ap_const_lv1_0) and (huffman_eos_stream_empty_n = ap_const_logic_0)) or ((or_ln57_fu_135_p2 = ap_const_lv1_0) and (huffman_input_stream_empty_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_bitbuffer_0_phi_fu_112_p4_assign_proc : process(ap_CS_fsm_state1, bitbuffer_read, or_ln57_fu_135_p2, add_ln60_fu_159_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((or_ln57_fu_135_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_bitbuffer_0_phi_fu_112_p4 <= bitbuffer_read;
            elsif ((or_ln57_fu_135_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_bitbuffer_0_phi_fu_112_p4 <= add_ln60_fu_159_p2;
            else 
                ap_phi_mux_bitbuffer_0_phi_fu_112_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_bitbuffer_0_phi_fu_112_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_phi_ln64_1_phi_fu_101_p4_assign_proc : process(ap_CS_fsm_state1, huffman_eos_stream_dout, done_read_2, or_ln57_fu_135_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((or_ln57_fu_135_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln64_1_phi_fu_101_p4 <= done_read_2;
            elsif ((or_ln57_fu_135_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_ln64_1_phi_fu_101_p4 <= huffman_eos_stream_dout;
            else 
                ap_phi_mux_phi_ln64_1_phi_fu_101_p4 <= "X";
            end if;
        else 
            ap_phi_mux_phi_ln64_1_phi_fu_101_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_phi_ln64_phi_fu_91_p4_assign_proc : process(ap_CS_fsm_state1, bits_cntr_read_2, or_ln57_fu_135_p2, add_ln62_fu_166_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((or_ln57_fu_135_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln64_phi_fu_91_p4 <= bits_cntr_read_2;
            elsif ((or_ln57_fu_135_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_ln64_phi_fu_91_p4 <= add_ln62_fu_166_p2;
            else 
                ap_phi_mux_phi_ln64_phi_fu_91_p4 <= "XXXXXX";
            end if;
        else 
            ap_phi_mux_phi_ln64_phi_fu_91_p4 <= "XXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1, ap_phi_mux_bitbuffer_0_phi_fu_112_p4, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_0 <= ap_phi_mux_bitbuffer_0_phi_fu_112_p4;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state1, ap_phi_mux_phi_ln64_phi_fu_91_p4, ap_block_state1, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_1 <= ap_phi_mux_phi_ln64_phi_fu_91_p4;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state1, ap_block_state1, ap_phi_mux_phi_ln64_1_phi_fu_101_p4, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_2 <= ap_phi_mux_phi_ln64_1_phi_fu_101_p4;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    huffman_eos_stream_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, huffman_eos_stream_empty_n, or_ln57_fu_135_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (or_ln57_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            huffman_eos_stream_blk_n <= huffman_eos_stream_empty_n;
        else 
            huffman_eos_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    huffman_eos_stream_read_assign_proc : process(ap_CS_fsm_state1, or_ln57_fu_135_p2, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (or_ln57_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            huffman_eos_stream_read <= ap_const_logic_1;
        else 
            huffman_eos_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    huffman_input_stream_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, huffman_input_stream_empty_n, or_ln57_fu_135_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (or_ln57_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            huffman_input_stream_blk_n <= huffman_input_stream_empty_n;
        else 
            huffman_input_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    huffman_input_stream_read_assign_proc : process(ap_CS_fsm_state1, or_ln57_fu_135_p2, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (or_ln57_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            huffman_input_stream_read <= ap_const_logic_1;
        else 
            huffman_input_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln57_fu_129_p2 <= "0" when (tmp_fu_119_p4 = ap_const_lv2_0) else "1";
    or_ln57_fu_135_p2 <= (icmp_ln57_fu_129_p2 or done_read);
    shl_ln60_fu_149_p2 <= std_logic_vector(shift_left(unsigned(zext_ln60_fu_141_p1),to_integer(unsigned('0' & zext_ln60_1_fu_145_p1(31-1 downto 0)))));
    tmp_fu_119_p4 <= bits_cntr_read(5 downto 4);
    zext_ln60_1_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bits_cntr_read),31));
    zext_ln60_2_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln60_fu_149_p2),32));
    zext_ln60_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(huffman_input_stream_dout),31));
end behav;
