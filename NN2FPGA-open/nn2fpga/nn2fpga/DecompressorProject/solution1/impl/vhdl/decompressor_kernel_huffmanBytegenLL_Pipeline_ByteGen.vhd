-- ==============================================================
-- Generated by Vitis HLS v2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decompressor_kernel_huffmanBytegenLL_Pipeline_ByteGen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    lz77_output_stream_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    lz77_output_stream_full_n : IN STD_LOGIC;
    lz77_output_stream_write : OUT STD_LOGIC;
    huffman_input_stream_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    huffman_input_stream_empty_n : IN STD_LOGIC;
    huffman_input_stream_read : OUT STD_LOGIC;
    huffman_eos_stream_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    huffman_eos_stream_empty_n : IN STD_LOGIC;
    huffman_eos_stream_read : OUT STD_LOGIC;
    p_read2 : IN STD_LOGIC_VECTOR (0 downto 0);
    p_bitbuffer_read : IN STD_LOGIC_VECTOR (31 downto 0);
    bits_cntr_read : IN STD_LOGIC_VECTOR (5 downto 0);
    codeOffsets_0_load : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    bl1Codes_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    bl1Codes_0_ce0 : OUT STD_LOGIC;
    bl1Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl1Codes_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    bl1Codes_1_ce0 : OUT STD_LOGIC;
    bl1Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl2Codes_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    bl2Codes_0_ce0 : OUT STD_LOGIC;
    bl2Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl2Codes_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    bl2Codes_1_ce0 : OUT STD_LOGIC;
    bl2Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl3Codes_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bl3Codes_0_ce0 : OUT STD_LOGIC;
    bl3Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl3Codes_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bl3Codes_1_ce0 : OUT STD_LOGIC;
    bl3Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl4Codes_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bl4Codes_0_ce0 : OUT STD_LOGIC;
    bl4Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl4Codes_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bl4Codes_1_ce0 : OUT STD_LOGIC;
    bl4Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl5Codes_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bl5Codes_0_ce0 : OUT STD_LOGIC;
    bl5Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl5Codes_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bl5Codes_1_ce0 : OUT STD_LOGIC;
    bl5Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl6Codes_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bl6Codes_0_ce0 : OUT STD_LOGIC;
    bl6Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl6Codes_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bl6Codes_1_ce0 : OUT STD_LOGIC;
    bl6Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl7Codes_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bl7Codes_0_ce0 : OUT STD_LOGIC;
    bl7Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl7Codes_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bl7Codes_1_ce0 : OUT STD_LOGIC;
    bl7Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl8Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl8Codes_0_ce0 : OUT STD_LOGIC;
    bl8Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl8Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl8Codes_1_ce0 : OUT STD_LOGIC;
    bl8Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl9Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl9Codes_0_ce0 : OUT STD_LOGIC;
    bl9Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl9Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl9Codes_1_ce0 : OUT STD_LOGIC;
    bl9Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl10Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl10Codes_0_ce0 : OUT STD_LOGIC;
    bl10Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl10Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl10Codes_1_ce0 : OUT STD_LOGIC;
    bl10Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl11Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl11Codes_0_ce0 : OUT STD_LOGIC;
    bl11Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl11Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl11Codes_1_ce0 : OUT STD_LOGIC;
    bl11Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl12Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl12Codes_0_ce0 : OUT STD_LOGIC;
    bl12Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl12Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl12Codes_1_ce0 : OUT STD_LOGIC;
    bl12Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl13Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl13Codes_0_ce0 : OUT STD_LOGIC;
    bl13Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl13Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl13Codes_1_ce0 : OUT STD_LOGIC;
    bl13Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl14Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl14Codes_0_ce0 : OUT STD_LOGIC;
    bl14Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl14Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl14Codes_1_ce0 : OUT STD_LOGIC;
    bl14Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl15Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl15Codes_0_ce0 : OUT STD_LOGIC;
    bl15Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl15Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl15Codes_1_ce0 : OUT STD_LOGIC;
    bl15Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    ignoreValue_cast : IN STD_LOGIC_VECTOR (2 downto 0);
    done_0_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    done_0_out_ap_vld : OUT STD_LOGIC;
    buffer_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_out_ap_vld : OUT STD_LOGIC;
    counter_out : OUT STD_LOGIC_VECTOR (5 downto 0);
    counter_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of decompressor_kernel_huffmanBytegenLL_Pipeline_ByteGen is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal or_ln331_reg_2971 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln427_fu_2812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op447_read_state2 : BOOLEAN;
    signal ap_predicate_op448_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal or_ln331_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal lext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal lext_ce0 : STD_LOGIC;
    signal lext_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dext_ce0 : STD_LOGIC;
    signal dext_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lz77_output_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal huffman_input_stream_blk_n : STD_LOGIC;
    signal huffman_eos_stream_blk_n : STD_LOGIC;
    signal done_0_reg_1026 : STD_LOGIC_VECTOR (0 downto 0);
    signal isDistance_reg_1037 : STD_LOGIC_VECTOR (0 downto 0);
    signal isExtra_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal ignoreValue_cast_cast_fu_1082_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ignoreValue_cast_cast_reg_2950 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal buffer_3_reg_2955 : STD_LOGIC_VECTOR (31 downto 0);
    signal val1_1_reg_2961 : STD_LOGIC_VECTOR (4 downto 0);
    signal val0_1_reg_2966 : STD_LOGIC_VECTOR (4 downto 0);
    signal current_bits_7_fu_1706_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal current_bits_7_reg_2975 : STD_LOGIC_VECTOR (3 downto 0);
    signal current_bits_9_fu_2098_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal current_bits_9_reg_2981 : STD_LOGIC_VECTOR (3 downto 0);
    signal huffDone_1_fu_2666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isDistance_1_fu_2758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isExtra_3_fu_2796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_done_0_phi_fu_1029_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_phi_mux_done_1_phi_fu_1073_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_huffDone_phi_fu_1062_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_done_1_reg_1069 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_i_i693_fu_2106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_i677_fu_2112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_i661_fu_2118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_i645_fu_2124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_i629_fu_2130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_i613_fu_2136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_i597_fu_2142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_i581_fu_2148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i558_fu_2164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i539_fu_2180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i520_fu_2196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i501_fu_2212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i482_fu_2228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i463_fu_2244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i449_fu_2260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln371_fu_2266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln376_fu_2271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal counter_fu_338 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal counter_1_fu_2740_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal counter_2_fu_2868_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal buffer_fu_342 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal buffer_1_fu_2731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_2_fu_2860_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_buffer_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val1_fu_346 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal val1_2_fu_2706_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_val1_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal val0_fu_350 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal val0_4_fu_2687_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_val0_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmpVal_fu_354 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal tmpVal_9_fu_2672_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal current_bits_fu_358 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal current_bits_1_fu_362 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln339_fu_1118_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln339_fu_1122_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_1138_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln339_1_fu_1148_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_1_fu_1152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_1_fu_1158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1172_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln339_2_fu_1182_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_2_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_1198_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln339_3_fu_1208_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_3_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_3_fu_1218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_2_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_1224_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln339_6_fu_1164_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln339_fu_1238_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1250_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln339_5_fu_1260_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_4_fu_1264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_1276_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln339_6_fu_1286_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_5_fu_1290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_5_fu_1296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1310_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln339_7_fu_1320_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_6_fu_1324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1336_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_8_fu_1346_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_7_fu_1350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_7_fu_1356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_6_fu_1330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_1_fu_1370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_1362_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln339_11_fu_1302_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln339_2_fu_1384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_4_fu_1270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_3_fu_1390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln339_1_fu_1376_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln339_4_fu_1246_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1404_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln339_9_fu_1414_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_8_fu_1418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1430_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln339_10_fu_1440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_9_fu_1444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_9_fu_1450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1464_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln339_11_fu_1474_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_10_fu_1478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1490_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln339_12_fu_1500_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_11_fu_1504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_11_fu_1510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_10_fu_1484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_4_fu_1524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_1516_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln340_2_fu_1456_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1538_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln339_13_fu_1548_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_12_fu_1552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_1564_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln339_14_fu_1574_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_13_fu_1578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_1590_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln339_15_fu_1600_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln339_14_fu_1604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_14_fu_1610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_13_fu_1584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_1624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_1616_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln340_5_fu_1630_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal val_12_fu_1558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_5_fu_1642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln339_fu_1638_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln339_3_fu_1530_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal val_8_fu_1424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_7_fu_1662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_6_fu_1656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_8_fu_1668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln339_4_fu_1648_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln339_2_fu_1396_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal val_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_10_fu_1688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_11_fu_1694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_9_fu_1682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_12_fu_1700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln339_5_fu_1674_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln339_15_fu_1714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_16_fu_1726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_16_fu_1732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_17_fu_1746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_18_fu_1758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_18_fu_1764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_17_fu_1752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_13_fu_1778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_1770_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln339_13_fu_1738_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln339_7_fu_1784_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln339_19_fu_1796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_20_fu_1808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_20_fu_1814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_21_fu_1828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_22_fu_1840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_22_fu_1846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_21_fu_1834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_14_fu_1860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_7_fu_1852_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln339_14_fu_1820_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln339_15_fu_1874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_19_fu_1802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_16_fu_1880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln339_8_fu_1866_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln339_16_fu_1792_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln339_23_fu_1894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_24_fu_1906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_24_fu_1912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_25_fu_1926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_26_fu_1938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_26_fu_1944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_25_fu_1932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln339_17_fu_1958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_9_fu_1950_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln340_8_fu_1918_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln339_27_fu_1972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_28_fu_1984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_29_fu_1996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_29_fu_2002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_28_fu_1990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_2016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_10_fu_2008_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln340_11_fu_2022_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal val_27_fu_1978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln347_fu_2034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln347_fu_2030_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln339_10_fu_1964_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal val_23_fu_1900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln347_2_fu_2054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln347_1_fu_2048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln347_3_fu_2060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln347_fu_2040_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln339_9_fu_1886_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal val_15_fu_1720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln347_5_fu_2080_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln347_6_fu_2086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln347_4_fu_2074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln347_7_fu_2092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_bits_8_fu_2066_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_i_i_fu_2154_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_i_i1_fu_2170_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_i_i2_fu_2186_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_i_i3_fu_2202_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_i_i4_fu_2218_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_i_i5_fu_2234_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_i_i6_fu_2250_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lsymbol_fu_2352_p31 : STD_LOGIC_VECTOR (8 downto 0);
    signal lsymbol_2_fu_2419_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p6 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p8 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p10 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p12 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p14 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p16 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p18 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p20 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p22 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p24 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p26 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p28 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p30 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsymbol_2_fu_2419_p31 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln382_fu_2489_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln382_fu_2497_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln382_fu_2501_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln382_fu_2507_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln372_fu_2486_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lsymbol_2_fu_2419_p33 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_2519_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal lsymbol_fu_2352_p33 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_fu_2539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln396_fu_2553_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmpVal_3_fu_2557_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal val0_5_fu_2586_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmpVal_1_fu_2513_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln411_fu_2596_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp1_fu_2608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_2614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln419_fu_2535_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpVal_6_fu_2600_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp6_demorgan_fu_2628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln395_1_fu_2547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_2634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln395_fu_2640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln309_fu_2565_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpVal_7_fu_2620_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln401_fu_2569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln395_1_fu_2660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmpVal_4_fu_2575_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpVal_8_fu_2646_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln395_fu_2654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln401_fu_2681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp20_fu_2694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_fu_2700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp23_v_fu_2713_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal buffer_4_v_fu_2720_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal buffer_4_v_cast_fu_2727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_4_v_fu_2736_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sel_tmp31_fu_2746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln401_fu_2752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isExtra_1_fu_2529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isExtra_2_fu_2590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln401_2_fu_2772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln401_1_fu_2778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln401_3_fu_2784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp42_fu_2764_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln401_1_fu_2790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_2802_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln430_fu_2828_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln430_1_fu_2832_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln430_fu_2842_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln430_fu_2836_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_16_fu_2852_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln430_fu_2846_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_1652 : BOOLEAN;
    signal ap_condition_1655 : BOOLEAN;
    signal ap_condition_1658 : BOOLEAN;
    signal ap_condition_1663 : BOOLEAN;
    signal lsymbol_fu_2352_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_fu_2352_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal lsymbol_2_fu_2419_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component decompressor_kernel_sparsemux_31_4_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        din4 : IN STD_LOGIC_VECTOR (8 downto 0);
        din5 : IN STD_LOGIC_VECTOR (8 downto 0);
        din6 : IN STD_LOGIC_VECTOR (8 downto 0);
        din7 : IN STD_LOGIC_VECTOR (8 downto 0);
        din8 : IN STD_LOGIC_VECTOR (8 downto 0);
        din9 : IN STD_LOGIC_VECTOR (8 downto 0);
        din10 : IN STD_LOGIC_VECTOR (8 downto 0);
        din11 : IN STD_LOGIC_VECTOR (8 downto 0);
        din12 : IN STD_LOGIC_VECTOR (8 downto 0);
        din13 : IN STD_LOGIC_VECTOR (8 downto 0);
        din14 : IN STD_LOGIC_VECTOR (8 downto 0);
        def : IN STD_LOGIC_VECTOR (8 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component decompressor_kernel_sparsemux_31_4_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        din3 : IN STD_LOGIC_VECTOR (4 downto 0);
        din4 : IN STD_LOGIC_VECTOR (4 downto 0);
        din5 : IN STD_LOGIC_VECTOR (4 downto 0);
        din6 : IN STD_LOGIC_VECTOR (4 downto 0);
        din7 : IN STD_LOGIC_VECTOR (4 downto 0);
        din8 : IN STD_LOGIC_VECTOR (4 downto 0);
        din9 : IN STD_LOGIC_VECTOR (4 downto 0);
        din10 : IN STD_LOGIC_VECTOR (4 downto 0);
        din11 : IN STD_LOGIC_VECTOR (4 downto 0);
        din12 : IN STD_LOGIC_VECTOR (4 downto 0);
        din13 : IN STD_LOGIC_VECTOR (4 downto 0);
        din14 : IN STD_LOGIC_VECTOR (4 downto 0);
        def : IN STD_LOGIC_VECTOR (4 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component decompressor_kernel_huffmanBytegenLL_Pipeline_ByteGen_lext_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component decompressor_kernel_huffmanBytegenLL_Pipeline_ByteGen_dext_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component decompressor_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    lext_U : component decompressor_kernel_huffmanBytegenLL_Pipeline_ByteGen_lext_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lext_address0,
        ce0 => lext_ce0,
        q0 => lext_q0);

    dext_U : component decompressor_kernel_huffmanBytegenLL_Pipeline_ByteGen_dext_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dext_address0,
        ce0 => dext_ce0,
        q0 => dext_q0);

    sparsemux_31_4_9_1_1_U27 : component decompressor_kernel_sparsemux_31_4_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0001",
        din0_WIDTH => 9,
        CASE1 => "0010",
        din1_WIDTH => 9,
        CASE2 => "0011",
        din2_WIDTH => 9,
        CASE3 => "0100",
        din3_WIDTH => 9,
        CASE4 => "0101",
        din4_WIDTH => 9,
        CASE5 => "0110",
        din5_WIDTH => 9,
        CASE6 => "0111",
        din6_WIDTH => 9,
        CASE7 => "1000",
        din7_WIDTH => 9,
        CASE8 => "1001",
        din8_WIDTH => 9,
        CASE9 => "1010",
        din9_WIDTH => 9,
        CASE10 => "1011",
        din10_WIDTH => 9,
        CASE11 => "1100",
        din11_WIDTH => 9,
        CASE12 => "1101",
        din12_WIDTH => 9,
        CASE13 => "1110",
        din13_WIDTH => 9,
        CASE14 => "1111",
        din14_WIDTH => 9,
        def_WIDTH => 9,
        sel_WIDTH => 4,
        dout_WIDTH => 9)
    port map (
        din0 => bl1Codes_0_q0,
        din1 => bl2Codes_0_q0,
        din2 => bl3Codes_0_q0,
        din3 => bl4Codes_0_q0,
        din4 => bl5Codes_0_q0,
        din5 => bl6Codes_0_q0,
        din6 => bl7Codes_0_q0,
        din7 => bl8Codes_0_q0,
        din8 => bl9Codes_0_q0,
        din9 => bl10Codes_0_q0,
        din10 => bl11Codes_0_q0,
        din11 => bl12Codes_0_q0,
        din12 => bl13Codes_0_q0,
        din13 => bl14Codes_0_q0,
        din14 => bl15Codes_0_q0,
        def => lsymbol_fu_2352_p31,
        sel => current_bits_7_reg_2975,
        dout => lsymbol_fu_2352_p33);

    sparsemux_31_4_5_1_1_U28 : component decompressor_kernel_sparsemux_31_4_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0001",
        din0_WIDTH => 5,
        CASE1 => "0010",
        din1_WIDTH => 5,
        CASE2 => "0011",
        din2_WIDTH => 5,
        CASE3 => "0100",
        din3_WIDTH => 5,
        CASE4 => "0101",
        din4_WIDTH => 5,
        CASE5 => "0110",
        din5_WIDTH => 5,
        CASE6 => "0111",
        din6_WIDTH => 5,
        CASE7 => "1000",
        din7_WIDTH => 5,
        CASE8 => "1001",
        din8_WIDTH => 5,
        CASE9 => "1010",
        din9_WIDTH => 5,
        CASE10 => "1011",
        din10_WIDTH => 5,
        CASE11 => "1100",
        din11_WIDTH => 5,
        CASE12 => "1101",
        din12_WIDTH => 5,
        CASE13 => "1110",
        din13_WIDTH => 5,
        CASE14 => "1111",
        din14_WIDTH => 5,
        def_WIDTH => 5,
        sel_WIDTH => 4,
        dout_WIDTH => 5)
    port map (
        din0 => lsymbol_2_fu_2419_p2,
        din1 => lsymbol_2_fu_2419_p4,
        din2 => lsymbol_2_fu_2419_p6,
        din3 => lsymbol_2_fu_2419_p8,
        din4 => lsymbol_2_fu_2419_p10,
        din5 => lsymbol_2_fu_2419_p12,
        din6 => lsymbol_2_fu_2419_p14,
        din7 => lsymbol_2_fu_2419_p16,
        din8 => lsymbol_2_fu_2419_p18,
        din9 => lsymbol_2_fu_2419_p20,
        din10 => lsymbol_2_fu_2419_p22,
        din11 => lsymbol_2_fu_2419_p24,
        din12 => lsymbol_2_fu_2419_p26,
        din13 => lsymbol_2_fu_2419_p28,
        din14 => lsymbol_2_fu_2419_p30,
        def => lsymbol_2_fu_2419_p31,
        sel => current_bits_9_reg_2981,
        dout => lsymbol_2_fu_2419_p33);

    flow_control_loop_pipe_sequential_init_U : component decompressor_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    buffer_fu_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    buffer_fu_342 <= p_bitbuffer_read;
                elsif ((ap_const_boolean_1 = ap_condition_1658)) then 
                    buffer_fu_342 <= buffer_2_fu_2860_p3;
                elsif ((ap_const_boolean_1 = ap_condition_1655)) then 
                    buffer_fu_342 <= buffer_1_fu_2731_p2;
                end if;
            end if; 
        end if;
    end process;

    counter_fu_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    counter_fu_338 <= bits_cntr_read;
                elsif ((ap_const_boolean_1 = ap_condition_1658)) then 
                    counter_fu_338 <= counter_2_fu_2868_p2;
                elsif ((ap_const_boolean_1 = ap_condition_1655)) then 
                    counter_fu_338 <= counter_1_fu_2740_p2;
                end if;
            end if; 
        end if;
    end process;

    done_0_reg_1026_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_1663)) then 
                    done_0_reg_1026 <= ap_phi_mux_done_1_phi_fu_1073_p4;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    done_0_reg_1026 <= p_read2;
                end if;
            end if; 
        end if;
    end process;

    isDistance_reg_1037_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_1663)) then 
                    isDistance_reg_1037 <= isDistance_1_fu_2758_p2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    isDistance_reg_1037 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    isExtra_reg_1048_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_1663)) then 
                    isExtra_reg_1048 <= isExtra_3_fu_2796_p2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    isExtra_reg_1048 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                buffer_3_reg_2955 <= ap_sig_allocacmp_buffer_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln331_fu_1112_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                current_bits_1_fu_362 <= current_bits_9_fu_2098_p3;
                current_bits_fu_358 <= current_bits_7_fu_1706_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                current_bits_7_reg_2975 <= current_bits_7_fu_1706_p3;
                current_bits_9_reg_2981 <= current_bits_9_fu_2098_p3;
                ignoreValue_cast_cast_reg_2950 <= ignoreValue_cast_cast_fu_1082_p1;
                or_ln331_reg_2971 <= or_ln331_fu_1112_p2;
                val0_1_reg_2966 <= ap_sig_allocacmp_val0_1;
                val1_1_reg_2961 <= ap_sig_allocacmp_val1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln331_reg_2971 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmpVal_fu_354 <= tmpVal_9_fu_2672_p3;
                val0_fu_350 <= val0_4_fu_2687_p3;
                val1_fu_346 <= val1_2_fu_2706_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln382_fu_2507_p2 <= std_logic_vector(unsigned(shl_ln382_fu_2501_p2) + unsigned(ap_const_lv16_FFFF));
    and_ln395_1_fu_2660_p2 <= (tmp_14_fu_2539_p3 and sel_tmp6_fu_2634_p2);
    and_ln395_fu_2640_p2 <= (xor_ln395_1_fu_2547_p2 and sel_tmp6_fu_2634_p2);
    and_ln401_1_fu_2778_p2 <= (sel_tmp20_fu_2694_p2 and or_ln401_2_fu_2772_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(lz77_output_stream_full_n, or_ln331_reg_2971, huffman_input_stream_empty_n, ap_predicate_op447_read_state2, huffman_eos_stream_empty_n, ap_predicate_op448_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((ap_predicate_op448_read_state2 = ap_const_boolean_1) and (huffman_eos_stream_empty_n = ap_const_logic_0)) or ((ap_predicate_op447_read_state2 = ap_const_boolean_1) and (huffman_input_stream_empty_n = ap_const_logic_0)) or ((or_ln331_reg_2971 = ap_const_lv1_0) and (lz77_output_stream_full_n = ap_const_logic_0)));
    end process;


    ap_condition_1652_assign_proc : process(ap_enable_reg_pp0_iter1, or_ln331_reg_2971, ap_block_pp0_stage0)
    begin
                ap_condition_1652 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln331_reg_2971 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_1655_assign_proc : process(ap_enable_reg_pp0_iter1, or_ln331_reg_2971, icmp_ln427_fu_2812_p2)
    begin
                ap_condition_1655 <= ((icmp_ln427_fu_2812_p2 = ap_const_lv1_0) and (or_ln331_reg_2971 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_1658_assign_proc : process(ap_enable_reg_pp0_iter1, or_ln331_reg_2971, icmp_ln427_fu_2812_p2)
    begin
                ap_condition_1658 <= ((icmp_ln427_fu_2812_p2 = ap_const_lv1_1) and (or_ln331_reg_2971 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_1663_assign_proc : process(ap_enable_reg_pp0_iter1, or_ln331_reg_2971, ap_block_pp0_stage0_11001)
    begin
                ap_condition_1663 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln331_reg_2971 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, or_ln331_fu_1112_p2)
    begin
        if (((or_ln331_fu_1112_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_done_0_phi_fu_1029_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, p_read2, done_0_reg_1026, ap_loop_init, ap_phi_mux_done_1_phi_fu_1073_p4, ap_condition_1652)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_1652)) then 
                ap_phi_mux_done_0_phi_fu_1029_p4 <= ap_phi_mux_done_1_phi_fu_1073_p4;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_done_0_phi_fu_1029_p4 <= p_read2;
            else 
                ap_phi_mux_done_0_phi_fu_1029_p4 <= done_0_reg_1026;
            end if;
        else 
            ap_phi_mux_done_0_phi_fu_1029_p4 <= done_0_reg_1026;
        end if; 
    end process;


    ap_phi_mux_done_1_phi_fu_1073_p4_assign_proc : process(or_ln331_reg_2971, icmp_ln427_fu_2812_p2, huffman_eos_stream_dout, ap_phi_reg_pp0_iter1_done_1_reg_1069)
    begin
        if ((or_ln331_reg_2971 = ap_const_lv1_0)) then
            if ((icmp_ln427_fu_2812_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_done_1_phi_fu_1073_p4 <= ap_const_lv1_0;
            elsif ((icmp_ln427_fu_2812_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_done_1_phi_fu_1073_p4 <= huffman_eos_stream_dout;
            else 
                ap_phi_mux_done_1_phi_fu_1073_p4 <= ap_phi_reg_pp0_iter1_done_1_reg_1069;
            end if;
        else 
            ap_phi_mux_done_1_phi_fu_1073_p4 <= ap_phi_reg_pp0_iter1_done_1_reg_1069;
        end if; 
    end process;


    ap_phi_mux_huffDone_phi_fu_1062_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, huffDone_1_fu_2666_p2, ap_loop_init, ap_condition_1652)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_1652)) then 
                ap_phi_mux_huffDone_phi_fu_1062_p4 <= huffDone_1_fu_2666_p2;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_huffDone_phi_fu_1062_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_huffDone_phi_fu_1062_p4 <= huffDone_1_fu_2666_p2;
            end if;
        else 
            ap_phi_mux_huffDone_phi_fu_1062_p4 <= huffDone_1_fu_2666_p2;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_done_1_reg_1069 <= "X";

    ap_predicate_op447_read_state2_assign_proc : process(or_ln331_reg_2971, icmp_ln427_fu_2812_p2)
    begin
                ap_predicate_op447_read_state2 <= ((icmp_ln427_fu_2812_p2 = ap_const_lv1_1) and (or_ln331_reg_2971 = ap_const_lv1_0));
    end process;


    ap_predicate_op448_read_state2_assign_proc : process(or_ln331_reg_2971, icmp_ln427_fu_2812_p2)
    begin
                ap_predicate_op448_read_state2 <= ((icmp_ln427_fu_2812_p2 = ap_const_lv1_1) and (or_ln331_reg_2971 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_buffer_3_assign_proc : process(ap_CS_fsm_pp0_stage0, p_bitbuffer_read, ap_block_pp0_stage0, ap_loop_init, buffer_fu_342, buffer_1_fu_2731_p2, buffer_2_fu_2860_p3, ap_condition_1655, ap_condition_1658)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_buffer_3 <= p_bitbuffer_read;
            elsif ((ap_const_boolean_1 = ap_condition_1658)) then 
                ap_sig_allocacmp_buffer_3 <= buffer_2_fu_2860_p3;
            elsif ((ap_const_boolean_1 = ap_condition_1655)) then 
                ap_sig_allocacmp_buffer_3 <= buffer_1_fu_2731_p2;
            else 
                ap_sig_allocacmp_buffer_3 <= buffer_fu_342;
            end if;
        else 
            ap_sig_allocacmp_buffer_3 <= buffer_fu_342;
        end if; 
    end process;


    ap_sig_allocacmp_val0_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln331_reg_2971, ap_block_pp0_stage0, val0_fu_350, val0_4_fu_2687_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln331_reg_2971 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_val0_1 <= val0_4_fu_2687_p3;
        else 
            ap_sig_allocacmp_val0_1 <= val0_fu_350;
        end if; 
    end process;


    ap_sig_allocacmp_val1_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln331_reg_2971, ap_block_pp0_stage0, val1_fu_346, val1_2_fu_2706_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln331_reg_2971 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_val1_1 <= val1_2_fu_2706_p3;
        else 
            ap_sig_allocacmp_val1_1 <= val1_fu_346;
        end if; 
    end process;

    bl10Codes_0_address0 <= conv_i539_fu_2180_p1(8 - 1 downto 0);

    bl10Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl10Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl10Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl10Codes_1_address0 <= conv_i539_fu_2180_p1(8 - 1 downto 0);

    bl10Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl10Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl10Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl11Codes_0_address0 <= conv_i520_fu_2196_p1(8 - 1 downto 0);

    bl11Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl11Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl11Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl11Codes_1_address0 <= conv_i520_fu_2196_p1(8 - 1 downto 0);

    bl11Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl11Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl11Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl12Codes_0_address0 <= conv_i501_fu_2212_p1(8 - 1 downto 0);

    bl12Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl12Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl12Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl12Codes_1_address0 <= conv_i501_fu_2212_p1(8 - 1 downto 0);

    bl12Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl12Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl12Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl13Codes_0_address0 <= conv_i482_fu_2228_p1(8 - 1 downto 0);

    bl13Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl13Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl13Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl13Codes_1_address0 <= conv_i482_fu_2228_p1(8 - 1 downto 0);

    bl13Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl13Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl13Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl14Codes_0_address0 <= conv_i463_fu_2244_p1(8 - 1 downto 0);

    bl14Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl14Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl14Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl14Codes_1_address0 <= conv_i463_fu_2244_p1(8 - 1 downto 0);

    bl14Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl14Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl14Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl15Codes_0_address0 <= conv_i449_fu_2260_p1(8 - 1 downto 0);

    bl15Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl15Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl15Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl15Codes_1_address0 <= conv_i449_fu_2260_p1(8 - 1 downto 0);

    bl15Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl15Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl15Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl1Codes_0_address0 <= conv_i_i693_fu_2106_p1(1 - 1 downto 0);

    bl1Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl1Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl1Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl1Codes_1_address0 <= conv_i_i693_fu_2106_p1(1 - 1 downto 0);

    bl1Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl1Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl1Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl2Codes_0_address0 <= conv_i_i677_fu_2112_p1(2 - 1 downto 0);

    bl2Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl2Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl2Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl2Codes_1_address0 <= conv_i_i677_fu_2112_p1(2 - 1 downto 0);

    bl2Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl2Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl2Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl3Codes_0_address0 <= conv_i_i661_fu_2118_p1(3 - 1 downto 0);

    bl3Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl3Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl3Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl3Codes_1_address0 <= conv_i_i661_fu_2118_p1(3 - 1 downto 0);

    bl3Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl3Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl3Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl4Codes_0_address0 <= conv_i_i645_fu_2124_p1(4 - 1 downto 0);

    bl4Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl4Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl4Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl4Codes_1_address0 <= conv_i_i645_fu_2124_p1(4 - 1 downto 0);

    bl4Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl4Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl4Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl5Codes_0_address0 <= conv_i_i629_fu_2130_p1(5 - 1 downto 0);

    bl5Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl5Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl5Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl5Codes_1_address0 <= conv_i_i629_fu_2130_p1(5 - 1 downto 0);

    bl5Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl5Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl5Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl6Codes_0_address0 <= conv_i_i613_fu_2136_p1(6 - 1 downto 0);

    bl6Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl6Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl6Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl6Codes_1_address0 <= conv_i_i613_fu_2136_p1(6 - 1 downto 0);

    bl6Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl6Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl6Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl7Codes_0_address0 <= conv_i_i597_fu_2142_p1(7 - 1 downto 0);

    bl7Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl7Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl7Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl7Codes_1_address0 <= conv_i_i597_fu_2142_p1(7 - 1 downto 0);

    bl7Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl7Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl7Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl8Codes_0_address0 <= conv_i_i581_fu_2148_p1(8 - 1 downto 0);

    bl8Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl8Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl8Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl8Codes_1_address0 <= conv_i_i581_fu_2148_p1(8 - 1 downto 0);

    bl8Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl8Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl8Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl9Codes_0_address0 <= conv_i558_fu_2164_p1(8 - 1 downto 0);

    bl9Codes_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl9Codes_0_ce0 <= ap_const_logic_1;
        else 
            bl9Codes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl9Codes_1_address0 <= conv_i558_fu_2164_p1(8 - 1 downto 0);

    bl9Codes_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl9Codes_1_ce0 <= ap_const_logic_1;
        else 
            bl9Codes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_fu_2731_p2 <= std_logic_vector(shift_right(unsigned(buffer_3_reg_2955),to_integer(unsigned('0' & buffer_4_v_cast_fu_2727_p1(31-1 downto 0)))));
    buffer_2_fu_2860_p3 <= (tmp_16_fu_2852_p3 & or_ln430_fu_2846_p2);
    buffer_4_v_cast_fu_2727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_4_v_fu_2720_p3),32));
    buffer_4_v_fu_2720_p3 <= 
        current_bits_9_reg_2981 when (sel_tmp2_fu_2614_p2(0) = '1') else 
        sel_tmp23_v_fu_2713_p3;
    buffer_out <= buffer_fu_342;

    buffer_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, or_ln331_fu_1112_p2, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln331_fu_1112_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_out_ap_vld <= ap_const_logic_1;
        else 
            buffer_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv_i449_fu_2260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i_i6_fu_2250_p4),64));
    conv_i463_fu_2244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i_i5_fu_2234_p4),64));
    conv_i482_fu_2228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i_i4_fu_2218_p4),64));
    conv_i501_fu_2212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i_i3_fu_2202_p4),64));
    conv_i520_fu_2196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i_i2_fu_2186_p4),64));
    conv_i539_fu_2180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i_i1_fu_2170_p4),64));
    conv_i558_fu_2164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i_i_fu_2154_p4),64));
    
    conv_i_i1_fu_2170_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable conv_i_i1_fu_2170_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_9(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_2(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_2(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_9(5-1 downto 0)));
            for conv_i_i1_fu_2170_p4_i in 0 to 32-1 loop
                v0_cpy(conv_i_i1_fu_2170_p4_i) := ap_sig_allocacmp_buffer_3(32-1-conv_i_i1_fu_2170_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        conv_i_i1_fu_2170_p4 <= resvalue(8-1 downto 0);
    end process;

    
    conv_i_i2_fu_2186_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable conv_i_i2_fu_2186_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_A(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_3(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_3(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_A(5-1 downto 0)));
            for conv_i_i2_fu_2186_p4_i in 0 to 32-1 loop
                v0_cpy(conv_i_i2_fu_2186_p4_i) := ap_sig_allocacmp_buffer_3(32-1-conv_i_i2_fu_2186_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        conv_i_i2_fu_2186_p4 <= resvalue(8-1 downto 0);
    end process;

    
    conv_i_i3_fu_2202_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable conv_i_i3_fu_2202_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_4(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_4(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            for conv_i_i3_fu_2202_p4_i in 0 to 32-1 loop
                v0_cpy(conv_i_i3_fu_2202_p4_i) := ap_sig_allocacmp_buffer_3(32-1-conv_i_i3_fu_2202_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        conv_i_i3_fu_2202_p4 <= resvalue(8-1 downto 0);
    end process;

    
    conv_i_i4_fu_2218_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable conv_i_i4_fu_2218_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_C(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_5(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_5(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_C(5-1 downto 0)));
            for conv_i_i4_fu_2218_p4_i in 0 to 32-1 loop
                v0_cpy(conv_i_i4_fu_2218_p4_i) := ap_sig_allocacmp_buffer_3(32-1-conv_i_i4_fu_2218_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        conv_i_i4_fu_2218_p4 <= resvalue(8-1 downto 0);
    end process;

    conv_i_i581_fu_2148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1336_p4),64));
    conv_i_i597_fu_2142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_1310_p4),64));
    
    conv_i_i5_fu_2234_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable conv_i_i5_fu_2234_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_6(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_6(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_D(5-1 downto 0)));
            for conv_i_i5_fu_2234_p4_i in 0 to 32-1 loop
                v0_cpy(conv_i_i5_fu_2234_p4_i) := ap_sig_allocacmp_buffer_3(32-1-conv_i_i5_fu_2234_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        conv_i_i5_fu_2234_p4 <= resvalue(8-1 downto 0);
    end process;

    conv_i_i613_fu_2136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_1276_p4),64));
    conv_i_i629_fu_2130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_1250_p4),64));
    conv_i_i645_fu_2124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_1198_p4),64));
    conv_i_i661_fu_2118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_1172_p4),64));
    conv_i_i677_fu_2112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_1138_p4),64));
    conv_i_i693_fu_2106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln339_fu_1118_p1),64));
    
    conv_i_i6_fu_2250_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable conv_i_i6_fu_2250_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_E(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_7(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_7(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_E(5-1 downto 0)));
            for conv_i_i6_fu_2250_p4_i in 0 to 32-1 loop
                v0_cpy(conv_i_i6_fu_2250_p4_i) := ap_sig_allocacmp_buffer_3(32-1-conv_i_i6_fu_2250_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        conv_i_i6_fu_2250_p4 <= resvalue(8-1 downto 0);
    end process;

    
    conv_i_i_fu_2154_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable conv_i_i_fu_2154_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_8(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_1(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_8(5-1 downto 0)));
            for conv_i_i_fu_2154_p4_i in 0 to 32-1 loop
                v0_cpy(conv_i_i_fu_2154_p4_i) := ap_sig_allocacmp_buffer_3(32-1-conv_i_i_fu_2154_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        conv_i_i_fu_2154_p4 <= resvalue(8-1 downto 0);
    end process;

    counter_1_fu_2740_p2 <= std_logic_vector(unsigned(counter_fu_338) - unsigned(counter_4_v_fu_2736_p1));
    counter_2_fu_2868_p2 <= std_logic_vector(unsigned(counter_1_fu_2740_p2) + unsigned(ap_const_lv6_10));
    counter_4_v_fu_2736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_4_v_fu_2720_p3),6));
    counter_out <= counter_fu_338;

    counter_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, or_ln331_fu_1112_p2, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln331_fu_1112_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            counter_out_ap_vld <= ap_const_logic_1;
        else 
            counter_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    current_bits_7_fu_1706_p3 <= 
        select_ln339_5_fu_1674_p3 when (or_ln339_12_fu_1700_p2(0) = '1') else 
        current_bits_fu_358;
    current_bits_8_fu_2066_p3 <= 
        select_ln347_fu_2040_p3 when (or_ln347_3_fu_2060_p2(0) = '1') else 
        select_ln339_9_fu_1886_p3;
    current_bits_9_fu_2098_p3 <= 
        current_bits_8_fu_2066_p3 when (or_ln347_7_fu_2092_p2(0) = '1') else 
        current_bits_1_fu_362;
    dext_address0 <= zext_ln376_fu_2271_p1(5 - 1 downto 0);

    dext_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dext_ce0 <= ap_const_logic_1;
        else 
            dext_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    done_0_out <= done_0_reg_1026;

    done_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, or_ln331_fu_1112_p2, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln331_fu_1112_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            done_0_out_ap_vld <= ap_const_logic_1;
        else 
            done_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    huffDone_1_fu_2666_p2 <= (icmp_ln401_fu_2569_p2 and and_ln395_1_fu_2660_p2);

    huffman_eos_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, huffman_eos_stream_empty_n, ap_predicate_op448_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op448_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            huffman_eos_stream_blk_n <= huffman_eos_stream_empty_n;
        else 
            huffman_eos_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    huffman_eos_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op448_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op448_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            huffman_eos_stream_read <= ap_const_logic_1;
        else 
            huffman_eos_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    huffman_input_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, huffman_input_stream_empty_n, ap_predicate_op447_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op447_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            huffman_input_stream_blk_n <= huffman_input_stream_empty_n;
        else 
            huffman_input_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    huffman_input_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op447_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op447_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            huffman_input_stream_read <= ap_const_logic_1;
        else 
            huffman_input_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln339_10_fu_1478_p2 <= "1" when (unsigned(zext_ln339_11_fu_1474_p1) < unsigned(codeOffsets_0_load_10)) else "0";
    icmp_ln339_11_fu_1504_p2 <= "1" when (unsigned(zext_ln339_12_fu_1500_p1) < unsigned(codeOffsets_0_load_11)) else "0";
    icmp_ln339_12_fu_1552_p2 <= "1" when (unsigned(zext_ln339_13_fu_1548_p1) < unsigned(codeOffsets_0_load_12)) else "0";
    icmp_ln339_13_fu_1578_p2 <= "1" when (unsigned(zext_ln339_14_fu_1574_p1) < unsigned(codeOffsets_0_load_13)) else "0";
    icmp_ln339_14_fu_1604_p2 <= "1" when (unsigned(zext_ln339_15_fu_1600_p1) < unsigned(codeOffsets_0_load_14)) else "0";
    icmp_ln339_15_fu_1714_p2 <= "1" when (unsigned(zext_ln339_fu_1122_p1) < unsigned(codeOffsets_1_load)) else "0";
    icmp_ln339_16_fu_1726_p2 <= "1" when (unsigned(zext_ln339_1_fu_1148_p1) < unsigned(codeOffsets_1_load_1)) else "0";
    icmp_ln339_17_fu_1746_p2 <= "1" when (unsigned(zext_ln339_2_fu_1182_p1) < unsigned(codeOffsets_1_load_2)) else "0";
    icmp_ln339_18_fu_1758_p2 <= "1" when (unsigned(zext_ln339_3_fu_1208_p1) < unsigned(codeOffsets_1_load_3)) else "0";
    icmp_ln339_19_fu_1796_p2 <= "1" when (unsigned(zext_ln339_5_fu_1260_p1) < unsigned(codeOffsets_1_load_4)) else "0";
    icmp_ln339_1_fu_1152_p2 <= "1" when (unsigned(zext_ln339_1_fu_1148_p1) < unsigned(codeOffsets_0_load_1)) else "0";
    icmp_ln339_20_fu_1808_p2 <= "1" when (unsigned(zext_ln339_6_fu_1286_p1) < unsigned(codeOffsets_1_load_5)) else "0";
    icmp_ln339_21_fu_1828_p2 <= "1" when (unsigned(zext_ln339_7_fu_1320_p1) < unsigned(codeOffsets_1_load_6)) else "0";
    icmp_ln339_22_fu_1840_p2 <= "1" when (unsigned(zext_ln339_8_fu_1346_p1) < unsigned(codeOffsets_1_load_7)) else "0";
    icmp_ln339_23_fu_1894_p2 <= "1" when (unsigned(zext_ln339_9_fu_1414_p1) < unsigned(codeOffsets_1_load_8)) else "0";
    icmp_ln339_24_fu_1906_p2 <= "1" when (unsigned(zext_ln339_10_fu_1440_p1) < unsigned(codeOffsets_1_load_9)) else "0";
    icmp_ln339_25_fu_1926_p2 <= "1" when (unsigned(zext_ln339_11_fu_1474_p1) < unsigned(codeOffsets_1_load_10)) else "0";
    icmp_ln339_26_fu_1938_p2 <= "1" when (unsigned(zext_ln339_12_fu_1500_p1) < unsigned(codeOffsets_1_load_11)) else "0";
    icmp_ln339_27_fu_1972_p2 <= "1" when (unsigned(zext_ln339_13_fu_1548_p1) < unsigned(codeOffsets_1_load_12)) else "0";
    icmp_ln339_28_fu_1984_p2 <= "1" when (unsigned(zext_ln339_14_fu_1574_p1) < unsigned(codeOffsets_1_load_13)) else "0";
    icmp_ln339_29_fu_1996_p2 <= "1" when (unsigned(zext_ln339_15_fu_1600_p1) < unsigned(codeOffsets_1_load_14)) else "0";
    icmp_ln339_2_fu_1186_p2 <= "1" when (unsigned(zext_ln339_2_fu_1182_p1) < unsigned(codeOffsets_0_load_2)) else "0";
    icmp_ln339_3_fu_1212_p2 <= "1" when (unsigned(zext_ln339_3_fu_1208_p1) < unsigned(codeOffsets_0_load_3)) else "0";
    icmp_ln339_4_fu_1264_p2 <= "1" when (unsigned(zext_ln339_5_fu_1260_p1) < unsigned(codeOffsets_0_load_4)) else "0";
    icmp_ln339_5_fu_1290_p2 <= "1" when (unsigned(zext_ln339_6_fu_1286_p1) < unsigned(codeOffsets_0_load_5)) else "0";
    icmp_ln339_6_fu_1324_p2 <= "1" when (unsigned(zext_ln339_7_fu_1320_p1) < unsigned(codeOffsets_0_load_6)) else "0";
    icmp_ln339_7_fu_1350_p2 <= "1" when (unsigned(zext_ln339_8_fu_1346_p1) < unsigned(codeOffsets_0_load_7)) else "0";
    icmp_ln339_8_fu_1418_p2 <= "1" when (unsigned(zext_ln339_9_fu_1414_p1) < unsigned(codeOffsets_0_load_8)) else "0";
    icmp_ln339_9_fu_1444_p2 <= "1" when (unsigned(zext_ln339_10_fu_1440_p1) < unsigned(codeOffsets_0_load_9)) else "0";
    icmp_ln339_fu_1126_p2 <= "1" when (unsigned(zext_ln339_fu_1122_p1) < unsigned(codeOffsets_0_load)) else "0";
    icmp_ln401_fu_2569_p2 <= "1" when (lsymbol_fu_2352_p33 = ap_const_lv9_100) else "0";
    icmp_ln427_fu_2812_p2 <= "1" when (tmp_15_fu_2802_p4 = ap_const_lv2_0) else "0";
        ignoreValue_cast_cast_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ignoreValue_cast),8));

    isDistance_1_fu_2758_p2 <= (xor_ln401_fu_2752_p2 or sel_tmp31_fu_2746_p2);
    isExtra_1_fu_2529_p2 <= "0" when (tmp_fu_2519_p4 = ap_const_lv3_0) else "1";
    isExtra_2_fu_2590_p2 <= "1" when (unsigned(val0_5_fu_2586_p1) > unsigned(ap_const_lv5_8)) else "0";
    isExtra_3_fu_2796_p2 <= (xor_ln401_1_fu_2790_p2 and sel_tmp42_fu_2764_p3);
    lext_address0 <= zext_ln371_fu_2266_p1(5 - 1 downto 0);

    lext_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lext_ce0 <= ap_const_logic_1;
        else 
            lext_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lsymbol_2_fu_2419_p10 <= bl5Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p12 <= bl6Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p14 <= bl7Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p16 <= bl8Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p18 <= bl9Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p2 <= bl1Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p20 <= bl10Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p22 <= bl11Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p24 <= bl12Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p26 <= bl13Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p28 <= bl14Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p30 <= bl15Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p31 <= "XXXXX";
    lsymbol_2_fu_2419_p4 <= bl2Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p6 <= bl3Codes_1_q0(5 - 1 downto 0);
    lsymbol_2_fu_2419_p8 <= bl4Codes_1_q0(5 - 1 downto 0);
    lsymbol_fu_2352_p31 <= "XXXXXXXXX";

    lz77_output_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, lz77_output_stream_full_n, or_ln331_reg_2971, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln331_reg_2971 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lz77_output_stream_blk_n <= lz77_output_stream_full_n;
        else 
            lz77_output_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    lz77_output_stream_din <= 
        tmpVal_4_fu_2575_p5 when (huffDone_1_fu_2666_p2(0) = '1') else 
        tmpVal_8_fu_2646_p3;

    lz77_output_stream_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln331_reg_2971, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln331_reg_2971 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lz77_output_stream_write <= ap_const_logic_1;
        else 
            lz77_output_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln331_fu_1112_p2 <= (ap_phi_mux_huffDone_phi_fu_1062_p4 or ap_phi_mux_done_0_phi_fu_1029_p4);
    or_ln339_10_fu_1688_p2 <= (val_fu_1132_p2 or or_ln339_fu_1232_p2);
    or_ln339_11_fu_1694_p2 <= (or_ln339_8_fu_1668_p2 or or_ln339_10_fu_1688_p2);
    or_ln339_12_fu_1700_p2 <= (or_ln339_9_fu_1682_p2 or or_ln339_11_fu_1694_p2);
    or_ln339_13_fu_1778_p2 <= (val_18_fu_1764_p2 or val_17_fu_1752_p2);
    or_ln339_14_fu_1860_p2 <= (val_22_fu_1846_p2 or val_21_fu_1834_p2);
    or_ln339_15_fu_1874_p2 <= (val_20_fu_1814_p2 or or_ln339_14_fu_1860_p2);
    or_ln339_16_fu_1880_p2 <= (val_19_fu_1802_p2 or or_ln339_15_fu_1874_p2);
    or_ln339_17_fu_1958_p2 <= (val_26_fu_1944_p2 or val_25_fu_1932_p2);
    or_ln339_1_fu_1370_p2 <= (val_7_fu_1356_p2 or val_6_fu_1330_p2);
    or_ln339_2_fu_1384_p2 <= (val_5_fu_1296_p2 or or_ln339_1_fu_1370_p2);
    or_ln339_3_fu_1390_p2 <= (val_4_fu_1270_p2 or or_ln339_2_fu_1384_p2);
    or_ln339_4_fu_1524_p2 <= (val_11_fu_1510_p2 or val_10_fu_1484_p2);
    or_ln339_5_fu_1642_p2 <= (val_12_fu_1558_p2 or or_ln340_fu_1624_p2);
    or_ln339_6_fu_1656_p2 <= (val_9_fu_1450_p2 or or_ln339_5_fu_1642_p2);
    or_ln339_7_fu_1662_p2 <= (val_8_fu_1424_p2 or or_ln339_4_fu_1524_p2);
    or_ln339_8_fu_1668_p2 <= (or_ln339_7_fu_1662_p2 or or_ln339_6_fu_1656_p2);
    or_ln339_9_fu_1682_p2 <= (val_1_fu_1158_p2 or or_ln339_3_fu_1390_p2);
    or_ln339_fu_1232_p2 <= (val_3_fu_1218_p2 or val_2_fu_1192_p2);
    or_ln340_1_fu_2016_p2 <= (val_29_fu_2002_p2 or val_28_fu_1990_p2);
    or_ln340_fu_1624_p2 <= (val_14_fu_1610_p2 or val_13_fu_1584_p2);
    or_ln347_1_fu_2048_p2 <= (val_24_fu_1912_p2 or or_ln347_fu_2034_p2);
    or_ln347_2_fu_2054_p2 <= (val_23_fu_1900_p2 or or_ln339_17_fu_1958_p2);
    or_ln347_3_fu_2060_p2 <= (or_ln347_2_fu_2054_p2 or or_ln347_1_fu_2048_p2);
    or_ln347_4_fu_2074_p2 <= (val_16_fu_1732_p2 or or_ln339_16_fu_1880_p2);
    or_ln347_5_fu_2080_p2 <= (val_15_fu_1720_p2 or or_ln339_13_fu_1778_p2);
    or_ln347_6_fu_2086_p2 <= (or_ln347_5_fu_2080_p2 or or_ln347_3_fu_2060_p2);
    or_ln347_7_fu_2092_p2 <= (or_ln347_6_fu_2086_p2 or or_ln347_4_fu_2074_p2);
    or_ln347_fu_2034_p2 <= (val_27_fu_1978_p2 or or_ln340_1_fu_2016_p2);
    or_ln395_fu_2654_p2 <= (xor_ln395_1_fu_2547_p2 or sel_tmp6_demorgan_fu_2628_p2);
    or_ln401_2_fu_2772_p2 <= (xor_ln395_1_fu_2547_p2 or icmp_ln401_fu_2569_p2);
    or_ln401_3_fu_2784_p2 <= (isExtra_reg_1048 or and_ln401_1_fu_2778_p2);
    or_ln401_fu_2681_p2 <= (or_ln395_fu_2654_p2 or icmp_ln401_fu_2569_p2);
    or_ln430_fu_2846_p2 <= (trunc_ln430_fu_2842_p1 or shl_ln430_fu_2836_p2);
    sel_tmp1_fu_2608_p2 <= (isExtra_reg_1048 xor ap_const_lv1_1);
    sel_tmp20_fu_2694_p2 <= (isDistance_reg_1037 xor ap_const_lv1_1);
    sel_tmp21_fu_2700_p2 <= (sel_tmp20_fu_2694_p2 or isExtra_reg_1048);
    sel_tmp23_v_fu_2713_p3 <= 
        select_ln382_fu_2489_p3 when (isExtra_reg_1048(0) = '1') else 
        current_bits_7_reg_2975;
    sel_tmp2_fu_2614_p2 <= (sel_tmp1_fu_2608_p2 and isDistance_reg_1037);
    sel_tmp31_fu_2746_p2 <= (isExtra_reg_1048 and isDistance_reg_1037);
    sel_tmp42_fu_2764_p3 <= 
        isExtra_1_fu_2529_p2 when (sel_tmp2_fu_2614_p2(0) = '1') else 
        isExtra_2_fu_2590_p2;
    sel_tmp6_demorgan_fu_2628_p2 <= (isExtra_reg_1048 or isDistance_reg_1037);
    sel_tmp6_fu_2634_p2 <= (sel_tmp6_demorgan_fu_2628_p2 xor ap_const_lv1_1);
    select_ln339_10_fu_1964_p3 <= 
        select_ln340_9_fu_1950_p3 when (or_ln339_17_fu_1958_p2(0) = '1') else 
        select_ln340_8_fu_1918_p3;
    select_ln339_11_fu_1302_p3 <= 
        ap_const_lv4_6 when (val_5_fu_1296_p2(0) = '1') else 
        ap_const_lv4_5;
    select_ln339_13_fu_1738_p3 <= 
        ap_const_lv3_2 when (val_16_fu_1732_p2(0) = '1') else 
        ap_const_lv3_1;
    select_ln339_14_fu_1820_p3 <= 
        ap_const_lv4_6 when (val_20_fu_1814_p2(0) = '1') else 
        ap_const_lv4_5;
    select_ln339_1_fu_1376_p3 <= 
        select_ln340_1_fu_1362_p3 when (or_ln339_1_fu_1370_p2(0) = '1') else 
        select_ln339_11_fu_1302_p3;
    select_ln339_2_fu_1396_p3 <= 
        select_ln339_1_fu_1376_p3 when (or_ln339_3_fu_1390_p2(0) = '1') else 
        zext_ln339_4_fu_1246_p1;
    select_ln339_3_fu_1530_p3 <= 
        select_ln340_3_fu_1516_p3 when (or_ln339_4_fu_1524_p2(0) = '1') else 
        select_ln340_2_fu_1456_p3;
    select_ln339_4_fu_1648_p3 <= 
        sext_ln339_fu_1638_p1 when (or_ln339_5_fu_1642_p2(0) = '1') else 
        select_ln339_3_fu_1530_p3;
    select_ln339_5_fu_1674_p3 <= 
        select_ln339_4_fu_1648_p3 when (or_ln339_8_fu_1668_p2(0) = '1') else 
        select_ln339_2_fu_1396_p3;
    select_ln339_6_fu_1164_p3 <= 
        ap_const_lv3_2 when (val_1_fu_1158_p2(0) = '1') else 
        ap_const_lv3_1;
    select_ln339_7_fu_1784_p3 <= 
        select_ln340_6_fu_1770_p3 when (or_ln339_13_fu_1778_p2(0) = '1') else 
        select_ln339_13_fu_1738_p3;
    select_ln339_8_fu_1866_p3 <= 
        select_ln340_7_fu_1852_p3 when (or_ln339_14_fu_1860_p2(0) = '1') else 
        select_ln339_14_fu_1820_p3;
    select_ln339_9_fu_1886_p3 <= 
        select_ln339_8_fu_1866_p3 when (or_ln339_16_fu_1880_p2(0) = '1') else 
        zext_ln339_16_fu_1792_p1;
    select_ln339_fu_1238_p3 <= 
        select_ln340_fu_1224_p3 when (or_ln339_fu_1232_p2(0) = '1') else 
        select_ln339_6_fu_1164_p3;
    select_ln340_10_fu_2008_p3 <= 
        ap_const_lv3_7 when (val_29_fu_2002_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln340_11_fu_2022_p3 <= 
        select_ln340_10_fu_2008_p3 when (or_ln340_1_fu_2016_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln340_1_fu_1362_p3 <= 
        ap_const_lv4_8 when (val_7_fu_1356_p2(0) = '1') else 
        ap_const_lv4_7;
    select_ln340_2_fu_1456_p3 <= 
        ap_const_lv4_A when (val_9_fu_1450_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln340_3_fu_1516_p3 <= 
        ap_const_lv4_C when (val_11_fu_1510_p2(0) = '1') else 
        ap_const_lv4_B;
    select_ln340_4_fu_1616_p3 <= 
        ap_const_lv3_7 when (val_14_fu_1610_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln340_5_fu_1630_p3 <= 
        select_ln340_4_fu_1616_p3 when (or_ln340_fu_1624_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln340_6_fu_1770_p3 <= 
        ap_const_lv3_4 when (val_18_fu_1764_p2(0) = '1') else 
        ap_const_lv3_3;
    select_ln340_7_fu_1852_p3 <= 
        ap_const_lv4_8 when (val_22_fu_1846_p2(0) = '1') else 
        ap_const_lv4_7;
    select_ln340_8_fu_1918_p3 <= 
        ap_const_lv4_A when (val_24_fu_1912_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln340_9_fu_1950_p3 <= 
        ap_const_lv4_C when (val_26_fu_1944_p2(0) = '1') else 
        ap_const_lv4_B;
    select_ln340_fu_1224_p3 <= 
        ap_const_lv3_4 when (val_3_fu_1218_p2(0) = '1') else 
        ap_const_lv3_3;
    select_ln347_fu_2040_p3 <= 
        sext_ln347_fu_2030_p1 when (or_ln347_fu_2034_p2(0) = '1') else 
        select_ln339_10_fu_1964_p3;
    select_ln382_fu_2489_p3 <= 
        lext_q0 when (isDistance_reg_1037(0) = '1') else 
        dext_q0;
        sext_ln309_fu_2565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmpVal_3_fu_2557_p3),16));

        sext_ln339_fu_1638_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln340_5_fu_1630_p3),4));

        sext_ln347_fu_2030_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln340_11_fu_2022_p3),4));

    shl_ln382_fu_2501_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_1),to_integer(unsigned('0' & zext_ln382_fu_2497_p1(16-1 downto 0)))));
    shl_ln430_fu_2836_p2 <= std_logic_vector(shift_left(unsigned(zext_ln430_fu_2828_p1),to_integer(unsigned('0' & zext_ln430_1_fu_2832_p1(31-1 downto 0)))));
    tmpVal_1_fu_2513_p2 <= (trunc_ln372_fu_2486_p1 and add_ln382_fu_2507_p2);
    tmpVal_3_fu_2557_p3 <= (ap_const_lv5_10 & trunc_ln396_fu_2553_p1);
    tmpVal_4_fu_2575_p5 <= (ignoreValue_cast_cast_reg_2950 & tmpVal_fu_354(7 downto 0));
    tmpVal_6_fu_2600_p3 <= 
        tmpVal_1_fu_2513_p2 when (isExtra_reg_1048(0) = '1') else 
        zext_ln411_fu_2596_p1;
    tmpVal_7_fu_2620_p3 <= 
        zext_ln419_fu_2535_p1 when (sel_tmp2_fu_2614_p2(0) = '1') else 
        tmpVal_6_fu_2600_p3;
    tmpVal_8_fu_2646_p3 <= 
        sext_ln309_fu_2565_p1 when (and_ln395_fu_2640_p2(0) = '1') else 
        tmpVal_7_fu_2620_p3;
    tmpVal_9_fu_2672_p3 <= 
        tmpVal_4_fu_2575_p5 when (huffDone_1_fu_2666_p2(0) = '1') else 
        tmpVal_8_fu_2646_p3;
    
    tmp_10_fu_1490_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_10_fu_1490_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            for tmp_10_fu_1490_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_10_fu_1490_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_10_fu_1490_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_10_fu_1490_p4 <= resvalue(12-1 downto 0);
    end process;

    
    tmp_11_fu_1538_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_11_fu_1538_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_C(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_C(5-1 downto 0)));
            for tmp_11_fu_1538_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_11_fu_1538_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_11_fu_1538_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_11_fu_1538_p4 <= resvalue(13-1 downto 0);
    end process;

    
    tmp_12_fu_1564_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_12_fu_1564_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_D(5-1 downto 0)));
            for tmp_12_fu_1564_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_12_fu_1564_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_12_fu_1564_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_12_fu_1564_p4 <= resvalue(14-1 downto 0);
    end process;

    
    tmp_13_fu_1590_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_13_fu_1590_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_E(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_E(5-1 downto 0)));
            for tmp_13_fu_1590_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_13_fu_1590_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_13_fu_1590_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_13_fu_1590_p4 <= resvalue(15-1 downto 0);
    end process;

    tmp_14_fu_2539_p3 <= lsymbol_fu_2352_p33(8 downto 8);
    tmp_15_fu_2802_p4 <= counter_1_fu_2740_p2(5 downto 4);
    tmp_16_fu_2852_p3 <= buffer_1_fu_2731_p2(31 downto 31);
    
    tmp_1_fu_1138_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_1_fu_1138_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1(5-1 downto 0)));
            for tmp_1_fu_1138_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_1_fu_1138_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_1_fu_1138_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_1138_p4 <= resvalue(2-1 downto 0);
    end process;

    
    tmp_2_fu_1172_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_2_fu_1172_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_2(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_2(5-1 downto 0)));
            for tmp_2_fu_1172_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_2_fu_1172_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_2_fu_1172_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_1172_p4 <= resvalue(3-1 downto 0);
    end process;

    
    tmp_3_fu_1198_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_3_fu_1198_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_3(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_3(5-1 downto 0)));
            for tmp_3_fu_1198_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_3_fu_1198_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_3_fu_1198_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_1198_p4 <= resvalue(4-1 downto 0);
    end process;

    
    tmp_4_fu_1250_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_4_fu_1250_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_4(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_4(5-1 downto 0)));
            for tmp_4_fu_1250_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_4_fu_1250_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_4_fu_1250_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_4_fu_1250_p4 <= resvalue(5-1 downto 0);
    end process;

    
    tmp_5_fu_1276_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_5_fu_1276_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_5(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_5(5-1 downto 0)));
            for tmp_5_fu_1276_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_5_fu_1276_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_5_fu_1276_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_5_fu_1276_p4 <= resvalue(6-1 downto 0);
    end process;

    
    tmp_6_fu_1310_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_6_fu_1310_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_6(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_6(5-1 downto 0)));
            for tmp_6_fu_1310_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_6_fu_1310_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_6_fu_1310_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_1310_p4 <= resvalue(7-1 downto 0);
    end process;

    
    tmp_7_fu_1336_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_7_fu_1336_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_7(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_7(5-1 downto 0)));
            for tmp_7_fu_1336_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_7_fu_1336_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_7_fu_1336_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_7_fu_1336_p4 <= resvalue(8-1 downto 0);
    end process;

    
    tmp_8_fu_1404_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_8_fu_1404_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_8(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_8(5-1 downto 0)));
            for tmp_8_fu_1404_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_8_fu_1404_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_8_fu_1404_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_1404_p4 <= resvalue(9-1 downto 0);
    end process;

    
    tmp_9_fu_1430_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_9_fu_1430_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_9(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_9(5-1 downto 0)));
            for tmp_9_fu_1430_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_9_fu_1430_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_9_fu_1430_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_9_fu_1430_p4 <= resvalue(10-1 downto 0);
    end process;

    tmp_fu_2519_p4 <= lsymbol_2_fu_2419_p33(4 downto 2);
    
    tmp_s_fu_1464_p4_proc : process(ap_sig_allocacmp_buffer_3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_s_fu_1464_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_A(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_buffer_3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_A(5-1 downto 0)));
            for tmp_s_fu_1464_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_s_fu_1464_p4_i) := ap_sig_allocacmp_buffer_3(32-1-tmp_s_fu_1464_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_s_fu_1464_p4 <= resvalue(11-1 downto 0);
    end process;

    trunc_ln339_fu_1118_p1 <= ap_sig_allocacmp_buffer_3(1 - 1 downto 0);
    trunc_ln372_fu_2486_p1 <= buffer_3_reg_2955(16 - 1 downto 0);
    trunc_ln396_fu_2553_p1 <= lsymbol_fu_2352_p33(8 - 1 downto 0);
    trunc_ln430_fu_2842_p1 <= buffer_1_fu_2731_p2(31 - 1 downto 0);
    val0_4_fu_2687_p3 <= 
        val0_1_reg_2966 when (or_ln401_fu_2681_p2(0) = '1') else 
        val0_5_fu_2586_p1;
    val0_5_fu_2586_p1 <= lsymbol_fu_2352_p33(5 - 1 downto 0);
    val1_2_fu_2706_p3 <= 
        val1_1_reg_2961 when (sel_tmp21_fu_2700_p2(0) = '1') else 
        lsymbol_2_fu_2419_p33;
    val_10_fu_1484_p2 <= (icmp_ln339_10_fu_1478_p2 xor ap_const_lv1_1);
    val_11_fu_1510_p2 <= (icmp_ln339_11_fu_1504_p2 xor ap_const_lv1_1);
    val_12_fu_1558_p2 <= (icmp_ln339_12_fu_1552_p2 xor ap_const_lv1_1);
    val_13_fu_1584_p2 <= (icmp_ln339_13_fu_1578_p2 xor ap_const_lv1_1);
    val_14_fu_1610_p2 <= (icmp_ln339_14_fu_1604_p2 xor ap_const_lv1_1);
    val_15_fu_1720_p2 <= (icmp_ln339_15_fu_1714_p2 xor ap_const_lv1_1);
    val_16_fu_1732_p2 <= (icmp_ln339_16_fu_1726_p2 xor ap_const_lv1_1);
    val_17_fu_1752_p2 <= (icmp_ln339_17_fu_1746_p2 xor ap_const_lv1_1);
    val_18_fu_1764_p2 <= (icmp_ln339_18_fu_1758_p2 xor ap_const_lv1_1);
    val_19_fu_1802_p2 <= (icmp_ln339_19_fu_1796_p2 xor ap_const_lv1_1);
    val_1_fu_1158_p2 <= (icmp_ln339_1_fu_1152_p2 xor ap_const_lv1_1);
    val_20_fu_1814_p2 <= (icmp_ln339_20_fu_1808_p2 xor ap_const_lv1_1);
    val_21_fu_1834_p2 <= (icmp_ln339_21_fu_1828_p2 xor ap_const_lv1_1);
    val_22_fu_1846_p2 <= (icmp_ln339_22_fu_1840_p2 xor ap_const_lv1_1);
    val_23_fu_1900_p2 <= (icmp_ln339_23_fu_1894_p2 xor ap_const_lv1_1);
    val_24_fu_1912_p2 <= (icmp_ln339_24_fu_1906_p2 xor ap_const_lv1_1);
    val_25_fu_1932_p2 <= (icmp_ln339_25_fu_1926_p2 xor ap_const_lv1_1);
    val_26_fu_1944_p2 <= (icmp_ln339_26_fu_1938_p2 xor ap_const_lv1_1);
    val_27_fu_1978_p2 <= (icmp_ln339_27_fu_1972_p2 xor ap_const_lv1_1);
    val_28_fu_1990_p2 <= (icmp_ln339_28_fu_1984_p2 xor ap_const_lv1_1);
    val_29_fu_2002_p2 <= (icmp_ln339_29_fu_1996_p2 xor ap_const_lv1_1);
    val_2_fu_1192_p2 <= (icmp_ln339_2_fu_1186_p2 xor ap_const_lv1_1);
    val_3_fu_1218_p2 <= (icmp_ln339_3_fu_1212_p2 xor ap_const_lv1_1);
    val_4_fu_1270_p2 <= (icmp_ln339_4_fu_1264_p2 xor ap_const_lv1_1);
    val_5_fu_1296_p2 <= (icmp_ln339_5_fu_1290_p2 xor ap_const_lv1_1);
    val_6_fu_1330_p2 <= (icmp_ln339_6_fu_1324_p2 xor ap_const_lv1_1);
    val_7_fu_1356_p2 <= (icmp_ln339_7_fu_1350_p2 xor ap_const_lv1_1);
    val_8_fu_1424_p2 <= (icmp_ln339_8_fu_1418_p2 xor ap_const_lv1_1);
    val_9_fu_1450_p2 <= (icmp_ln339_9_fu_1444_p2 xor ap_const_lv1_1);
    val_fu_1132_p2 <= (icmp_ln339_fu_1126_p2 xor ap_const_lv1_1);
    xor_ln395_1_fu_2547_p2 <= (tmp_14_fu_2539_p3 xor ap_const_lv1_1);
    xor_ln401_1_fu_2790_p2 <= (or_ln401_3_fu_2784_p2 xor ap_const_lv1_1);
    xor_ln401_fu_2752_p2 <= (or_ln401_fu_2681_p2 xor ap_const_lv1_1);
    zext_ln339_10_fu_1440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1430_p4),16));
    zext_ln339_11_fu_1474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1464_p4),16));
    zext_ln339_12_fu_1500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1490_p4),16));
    zext_ln339_13_fu_1548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1538_p4),16));
    zext_ln339_14_fu_1574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1564_p4),16));
    zext_ln339_15_fu_1600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_1590_p4),16));
    zext_ln339_16_fu_1792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln339_7_fu_1784_p3),4));
    zext_ln339_1_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_1138_p4),16));
    zext_ln339_2_fu_1182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_1172_p4),16));
    zext_ln339_3_fu_1208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_1198_p4),16));
    zext_ln339_4_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln339_fu_1238_p3),4));
    zext_ln339_5_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_1250_p4),16));
    zext_ln339_6_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_1276_p4),16));
    zext_ln339_7_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_1310_p4),16));
    zext_ln339_8_fu_1346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1336_p4),16));
    zext_ln339_9_fu_1414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1404_p4),16));
    zext_ln339_fu_1122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln339_fu_1118_p1),16));
    zext_ln371_fu_2266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_val0_1),64));
    zext_ln376_fu_2271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_val1_1),64));
    zext_ln382_fu_2497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln382_fu_2489_p3),16));
    zext_ln411_fu_2596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val0_5_fu_2586_p1),16));
    zext_ln419_fu_2535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsymbol_2_fu_2419_p33),16));
    zext_ln430_1_fu_2832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(counter_1_fu_2740_p2),31));
    zext_ln430_fu_2828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(huffman_input_stream_dout),31));
end behav;
