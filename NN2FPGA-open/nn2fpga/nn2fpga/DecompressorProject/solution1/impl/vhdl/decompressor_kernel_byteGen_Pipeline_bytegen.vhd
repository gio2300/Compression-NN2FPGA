-- ==============================================================
-- Generated by Vitis HLS v2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decompressor_kernel_byteGen_Pipeline_bytegen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    huffman_input_stream_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    huffman_input_stream_empty_n : IN STD_LOGIC;
    huffman_input_stream_read : OUT STD_LOGIC;
    huffman_eos_stream_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    huffman_eos_stream_empty_n : IN STD_LOGIC;
    huffman_eos_stream_read : OUT STD_LOGIC;
    write_flag_0 : IN STD_LOGIC_VECTOR (0 downto 0);
    empty_39 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_bitbuffer_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (0 downto 0);
    add_i307_cast : IN STD_LOGIC_VECTOR (8 downto 0);
    codeOffsets_load : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    bl1Codes_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    bl1Codes_ce0 : OUT STD_LOGIC;
    bl1Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl2Codes_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    bl2Codes_ce0 : OUT STD_LOGIC;
    bl2Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl3Codes_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bl3Codes_ce0 : OUT STD_LOGIC;
    bl3Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl4Codes_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bl4Codes_ce0 : OUT STD_LOGIC;
    bl4Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl5Codes_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bl5Codes_ce0 : OUT STD_LOGIC;
    bl5Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl6Codes_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bl6Codes_ce0 : OUT STD_LOGIC;
    bl6Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl7Codes_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bl7Codes_ce0 : OUT STD_LOGIC;
    bl7Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    lens_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    lens_ce0 : OUT STD_LOGIC;
    lens_we0 : OUT STD_LOGIC;
    lens_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    write_flag_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    write_flag_1_out_ap_vld : OUT STD_LOGIC;
    bits_cntr_1_out : OUT STD_LOGIC_VECTOR (5 downto 0);
    bits_cntr_1_out_ap_vld : OUT STD_LOGIC;
    write_flag3_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    write_flag3_1_out_ap_vld : OUT STD_LOGIC;
    p_bitbuffer_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_bitbuffer_1_out_ap_vld : OUT STD_LOGIC;
    done_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    done_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of decompressor_kernel_byteGen_Pipeline_bytegen is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal or_ln469_reg_1606 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln529_fu_1319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op219_read_state3 : BOOLEAN;
    signal ap_predicate_op225_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal or_ln469_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal huffman_input_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal huffman_eos_stream_blk_n : STD_LOGIC;
    signal isExtra_reg_461 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_i307_cast_cast_fu_472_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_i307_cast_cast_reg_1580 : STD_LOGIC_VECTOR (15 downto 0);
    signal copy_4_reg_1585 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_bitbuffer_1_load_reg_1591 : STD_LOGIC_VECTOR (31 downto 0);
    signal dynamic_curInSize_4_reg_1600 : STD_LOGIC_VECTOR (15 downto 0);
    signal current_bits_14_fu_800_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal current_bits_14_reg_1610 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln467_fu_808_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln467_reg_1616 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln496_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln496_reg_1656 : STD_LOGIC_VECTOR (0 downto 0);
    signal isExtra_4_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln478_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln479_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln480_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln481_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln482_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln483_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln484_fu_842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln526_fu_1275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln525_fu_1259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal len_fu_190 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal len_3_fu_1251_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal copy_fu_194 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal copy_7_fu_1279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_copy_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal current_bits_fu_198 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal extra_fu_202 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal extra_3_fu_1158_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_56_fu_206 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln533_fu_1361_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln496_2_fu_1081_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_57_fu_210 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal or_ln529_1_fu_1331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_bitbuffer_1_fu_214 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln531_fu_1355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitbuffer_42_fu_1065_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_p_bitbuffer_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal bits_cntr_1_fu_218 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln496_fu_1050_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal write_flag_1_fu_222 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal or_ln496_1_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dynamic_curInSize_fu_226 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal dynamic_curInSize_5_fu_1270_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_dynamic_curInSize_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal done_1_fu_230 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal write_flag3_1_fu_234 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln469_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln469_1_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln473_fu_565_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln473_fu_569_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln473_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_592_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln473_1_fu_602_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln473_1_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_617_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln473_2_fu_627_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln473_2_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_31_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_30_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln474_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln474_fu_642_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal current_bits_11_fu_584_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_664_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln473_3_fu_674_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln473_3_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_689_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln473_4_fu_699_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln473_4_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_33_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_32_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln474_1_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln474_2_fu_714_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal current_bits_12_fu_656_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_fu_736_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln473_5_fu_746_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln473_5_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_761_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln473_6_fu_771_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln473_6_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_35_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_34_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln474_2_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln474_4_fu_786_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal current_bits_13_fu_728_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal current_val_fu_901_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal current_val_fu_901_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal current_val_fu_901_p6 : STD_LOGIC_VECTOR (4 downto 0);
    signal current_val_fu_901_p8 : STD_LOGIC_VECTOR (4 downto 0);
    signal current_val_fu_901_p10 : STD_LOGIC_VECTOR (4 downto 0);
    signal current_val_fu_901_p12 : STD_LOGIC_VECTOR (4 downto 0);
    signal current_val_fu_901_p14 : STD_LOGIC_VECTOR (4 downto 0);
    signal current_val_fu_901_p15 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln487_fu_936_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln488_fu_944_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln488_1_fu_948_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln489_fu_957_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln489_fu_963_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln489_fu_966_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal extra_copy_fu_972_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln495_fu_983_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal current_val_fu_901_p17 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_fu_993_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln499_fu_1007_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln496_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln495_fu_987_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sel_tmp3_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln496_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln499_fu_1010_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sel_tmp2_fu_1031_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitbuffer_40_fu_952_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitbuffer_fu_939_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitbuffer_41_fu_1058_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp10_fu_1073_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln496_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln496_2_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln497_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln502_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln502_1_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln502_1_fu_1130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln502_fu_1118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln497_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln502_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln502_fu_1136_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln502_1_fu_1150_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_5_fu_978_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln497_1_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp32_fu_1166_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln497_fu_1180_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln502_2_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln502_3_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln502_2_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln502_3_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln496_3_fu_1188_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln462_fu_1016_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal len_2_fu_1227_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln502_4_fu_1239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln502_1_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln462_fu_1235_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal copy_6_fu_1219_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_1303_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln529_fu_1313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln529_fu_1325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln531_fu_1337_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln531_1_fu_1341_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln531_fu_1345_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln531_2_fu_1351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_261 : BOOLEAN;
    signal ap_condition_914 : BOOLEAN;
    signal ap_condition_917 : BOOLEAN;
    signal ap_condition_921 : BOOLEAN;
    signal current_val_fu_901_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_val_fu_901_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_val_fu_901_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_val_fu_901_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_val_fu_901_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_val_fu_901_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_val_fu_901_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component decompressor_kernel_sparsemux_15_3_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        din3 : IN STD_LOGIC_VECTOR (4 downto 0);
        din4 : IN STD_LOGIC_VECTOR (4 downto 0);
        din5 : IN STD_LOGIC_VECTOR (4 downto 0);
        din6 : IN STD_LOGIC_VECTOR (4 downto 0);
        def : IN STD_LOGIC_VECTOR (4 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component decompressor_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_15_3_5_1_1_U260 : component decompressor_kernel_sparsemux_15_3_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "001",
        din0_WIDTH => 5,
        CASE1 => "010",
        din1_WIDTH => 5,
        CASE2 => "011",
        din2_WIDTH => 5,
        CASE3 => "100",
        din3_WIDTH => 5,
        CASE4 => "101",
        din4_WIDTH => 5,
        CASE5 => "110",
        din5_WIDTH => 5,
        CASE6 => "111",
        din6_WIDTH => 5,
        def_WIDTH => 5,
        sel_WIDTH => 3,
        dout_WIDTH => 5)
    port map (
        din0 => current_val_fu_901_p2,
        din1 => current_val_fu_901_p4,
        din2 => current_val_fu_901_p6,
        din3 => current_val_fu_901_p8,
        din4 => current_val_fu_901_p10,
        din5 => current_val_fu_901_p12,
        din6 => current_val_fu_901_p14,
        def => current_val_fu_901_p15,
        sel => trunc_ln467_reg_1616,
        dout => current_val_fu_901_p17);

    flow_control_loop_pipe_sequential_init_U : component decompressor_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    bits_cntr_1_fu_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    bits_cntr_1_fu_218 <= empty_39;
                elsif ((ap_const_boolean_1 = ap_condition_917)) then 
                    bits_cntr_1_fu_218 <= select_ln496_fu_1050_p3;
                elsif ((ap_const_boolean_1 = ap_condition_914)) then 
                    bits_cntr_1_fu_218 <= add_ln533_fu_1361_p2;
                end if;
            end if; 
        end if;
    end process;

    copy_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln469_reg_1606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln525_fu_1259_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                copy_fu_194 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln469_reg_1606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln525_fu_1259_p2 = ap_const_lv1_0))) then 
                copy_fu_194 <= copy_7_fu_1279_p2;
            end if; 
        end if;
    end process;

    current_bits_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    current_bits_fu_198 <= ap_const_lv4_0;
                elsif (((or_ln469_fu_559_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    current_bits_fu_198 <= current_bits_14_fu_800_p3;
                end if;
            end if; 
        end if;
    end process;

    done_1_fu_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    done_1_fu_230 <= empty;
                elsif ((ap_const_boolean_1 = ap_condition_914)) then 
                    done_1_fu_230 <= huffman_eos_stream_dout;
                end if;
            end if; 
        end if;
    end process;

    dynamic_curInSize_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    dynamic_curInSize_fu_226 <= ap_const_lv16_0;
                elsif ((ap_const_boolean_1 = ap_condition_921)) then 
                    dynamic_curInSize_fu_226 <= dynamic_curInSize_5_fu_1270_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_56_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_56_fu_206 <= empty_39;
                elsif ((ap_const_boolean_1 = ap_condition_917)) then 
                    empty_56_fu_206 <= select_ln496_2_fu_1081_p3;
                elsif ((ap_const_boolean_1 = ap_condition_914)) then 
                    empty_56_fu_206 <= add_ln533_fu_1361_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_57_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_57_fu_210 <= empty;
                elsif ((ap_const_boolean_1 = ap_condition_917)) then 
                    empty_57_fu_210 <= or_ln529_1_fu_1331_p2;
                elsif ((ap_const_boolean_1 = ap_condition_914)) then 
                    empty_57_fu_210 <= huffman_eos_stream_dout;
                end if;
            end if; 
        end if;
    end process;

    extra_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    extra_fu_202 <= ap_const_lv3_0;
                elsif (((or_ln469_reg_1606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    extra_fu_202 <= extra_3_fu_1158_p3;
                end if;
            end if; 
        end if;
    end process;

    isExtra_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln469_reg_1606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                isExtra_reg_461 <= isExtra_4_fu_1112_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                isExtra_reg_461 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    len_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    len_fu_190 <= ap_const_lv16_0;
                elsif (((or_ln469_reg_1606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    len_fu_190 <= len_3_fu_1251_p3;
                end if;
            end if; 
        end if;
    end process;

    p_bitbuffer_1_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_bitbuffer_1_fu_214 <= p_bitbuffer_0;
                elsif ((ap_const_boolean_1 = ap_condition_917)) then 
                    p_bitbuffer_1_fu_214 <= bitbuffer_42_fu_1065_p3;
                elsif ((ap_const_boolean_1 = ap_condition_914)) then 
                    p_bitbuffer_1_fu_214 <= add_ln531_fu_1355_p2;
                end if;
            end if; 
        end if;
    end process;

    write_flag3_1_fu_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    write_flag3_1_fu_234 <= write_flag_0;
                elsif ((ap_const_boolean_1 = ap_condition_914)) then 
                    write_flag3_1_fu_234 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    write_flag_1_fu_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    write_flag_1_fu_222 <= write_flag_0;
                elsif ((ap_const_boolean_1 = ap_condition_917)) then 
                    write_flag_1_fu_222 <= or_ln496_1_fu_1025_p2;
                elsif ((ap_const_boolean_1 = ap_condition_914)) then 
                    write_flag_1_fu_222 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_i307_cast_cast_reg_1580(8 downto 0) <= add_i307_cast_cast_fu_472_p1(8 downto 0);
                copy_4_reg_1585 <= ap_sig_allocacmp_copy_4;
                current_bits_14_reg_1610 <= current_bits_14_fu_800_p3;
                dynamic_curInSize_4_reg_1600 <= ap_sig_allocacmp_dynamic_curInSize_4;
                icmp_ln496_reg_1656 <= icmp_ln496_fu_847_p2;
                or_ln469_reg_1606 <= or_ln469_fu_559_p2;
                trunc_ln467_reg_1616 <= trunc_ln467_fu_808_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_bitbuffer_1_load_reg_1591 <= ap_sig_allocacmp_p_bitbuffer_1_load;
            end if;
        end if;
    end process;
    add_i307_cast_cast_reg_1580(15 downto 9) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_i307_cast_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_i307_cast),16));
    add_ln489_fu_966_p2 <= std_logic_vector(unsigned(shl_ln489_fu_957_p2) + unsigned(ap_const_lv8_FF));
    add_ln531_fu_1355_p2 <= std_logic_vector(unsigned(zext_ln531_2_fu_1351_p1) + unsigned(bitbuffer_42_fu_1065_p3));
    add_ln533_fu_1361_p2 <= std_logic_vector(unsigned(select_ln496_2_fu_1081_p3) + unsigned(ap_const_lv6_10));
    and_ln496_fu_1045_p2 <= (sel_tmp3_fu_1039_p2 and icmp_ln496_reg_1656);
    and_ln497_1_fu_1174_p2 <= (xor_ln497_fu_1001_p2 and and_ln496_fu_1045_p2);
    and_ln502_1_fu_1130_p2 <= (isExtra_4_fu_1112_p2 and icmp_ln502_1_fu_1124_p2);
    and_ln502_2_fu_1207_p2 <= (icmp_ln502_3_fu_1201_p2 and icmp_ln502_2_fu_1195_p2);
    and_ln502_3_fu_1213_p2 <= (isExtra_4_fu_1112_p2 and and_ln502_2_fu_1207_p2);
    and_ln502_4_fu_1239_p2 <= (tmp_21_fu_993_p3 and icmp_ln502_1_fu_1124_p2);
    and_ln502_fu_1118_p2 <= (isExtra_4_fu_1112_p2 and icmp_ln502_fu_1106_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(huffman_input_stream_empty_n, ap_predicate_op219_read_state3, huffman_eos_stream_empty_n, ap_predicate_op225_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((ap_predicate_op225_read_state3 = ap_const_boolean_1) and (huffman_eos_stream_empty_n = ap_const_logic_0)) or ((ap_predicate_op219_read_state3 = ap_const_boolean_1) and (huffman_input_stream_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_261_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln469_reg_1606, ap_block_pp0_stage0)
    begin
                ap_condition_261 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln469_reg_1606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_914_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln469_reg_1606, or_ln529_fu_1319_p2)
    begin
                ap_condition_914 <= ((or_ln529_fu_1319_p2 = ap_const_lv1_0) and (or_ln469_reg_1606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_917_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln469_reg_1606, or_ln529_fu_1319_p2)
    begin
                ap_condition_917 <= ((or_ln529_fu_1319_p2 = ap_const_lv1_1) and (or_ln469_reg_1606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_921_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln469_reg_1606, icmp_ln525_fu_1259_p2)
    begin
                ap_condition_921 <= ((or_ln469_reg_1606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln525_fu_1259_p2 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, or_ln469_fu_559_p2)
    begin
        if (((or_ln469_fu_559_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_predicate_op219_read_state3_assign_proc : process(or_ln469_reg_1606, or_ln529_fu_1319_p2)
    begin
                ap_predicate_op219_read_state3 <= ((or_ln529_fu_1319_p2 = ap_const_lv1_0) and (or_ln469_reg_1606 = ap_const_lv1_1));
    end process;


    ap_predicate_op225_read_state3_assign_proc : process(or_ln469_reg_1606, or_ln529_fu_1319_p2)
    begin
                ap_predicate_op225_read_state3 <= ((or_ln529_fu_1319_p2 = ap_const_lv1_0) and (or_ln469_reg_1606 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_copy_4_assign_proc : process(icmp_ln525_fu_1259_p2, copy_fu_194, copy_7_fu_1279_p2, ap_condition_261)
    begin
        if ((ap_const_boolean_1 = ap_condition_261)) then
            if ((icmp_ln525_fu_1259_p2 = ap_const_lv1_1)) then 
                ap_sig_allocacmp_copy_4 <= ap_const_lv8_0;
            elsif ((icmp_ln525_fu_1259_p2 = ap_const_lv1_0)) then 
                ap_sig_allocacmp_copy_4 <= copy_7_fu_1279_p2;
            else 
                ap_sig_allocacmp_copy_4 <= copy_fu_194;
            end if;
        else 
            ap_sig_allocacmp_copy_4 <= copy_fu_194;
        end if; 
    end process;


    ap_sig_allocacmp_dynamic_curInSize_4_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln469_reg_1606, ap_block_pp0_stage0, icmp_ln525_fu_1259_p2, dynamic_curInSize_fu_226, dynamic_curInSize_5_fu_1270_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln469_reg_1606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln525_fu_1259_p2 = ap_const_lv1_0))) then 
            ap_sig_allocacmp_dynamic_curInSize_4 <= dynamic_curInSize_5_fu_1270_p2;
        else 
            ap_sig_allocacmp_dynamic_curInSize_4 <= dynamic_curInSize_fu_226;
        end if; 
    end process;


    ap_sig_allocacmp_p_bitbuffer_1_load_assign_proc : process(or_ln529_fu_1319_p2, p_bitbuffer_1_fu_214, add_ln531_fu_1355_p2, bitbuffer_42_fu_1065_p3, ap_condition_261)
    begin
        if ((ap_const_boolean_1 = ap_condition_261)) then
            if ((or_ln529_fu_1319_p2 = ap_const_lv1_1)) then 
                ap_sig_allocacmp_p_bitbuffer_1_load <= bitbuffer_42_fu_1065_p3;
            elsif ((or_ln529_fu_1319_p2 = ap_const_lv1_0)) then 
                ap_sig_allocacmp_p_bitbuffer_1_load <= add_ln531_fu_1355_p2;
            else 
                ap_sig_allocacmp_p_bitbuffer_1_load <= p_bitbuffer_1_fu_214;
            end if;
        else 
            ap_sig_allocacmp_p_bitbuffer_1_load <= p_bitbuffer_1_fu_214;
        end if; 
    end process;

    bitbuffer_40_fu_952_p2 <= std_logic_vector(shift_right(unsigned(p_bitbuffer_1_load_reg_1591),to_integer(unsigned('0' & zext_ln488_fu_944_p1(31-1 downto 0)))));
    bitbuffer_41_fu_1058_p3 <= 
        bitbuffer_40_fu_952_p2 when (isExtra_reg_461(0) = '1') else 
        p_bitbuffer_1_load_reg_1591;
    bitbuffer_42_fu_1065_p3 <= 
        bitbuffer_fu_939_p2 when (and_ln496_fu_1045_p2(0) = '1') else 
        bitbuffer_41_fu_1058_p3;
    bitbuffer_fu_939_p2 <= std_logic_vector(shift_right(unsigned(p_bitbuffer_1_load_reg_1591),to_integer(unsigned('0' & zext_ln487_fu_936_p1(31-1 downto 0)))));
    bits_cntr_1_out <= bits_cntr_1_fu_218;

    bits_cntr_1_out_ap_vld_assign_proc : process(or_ln469_reg_1606, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln469_reg_1606 = ap_const_lv1_0))) then 
            bits_cntr_1_out_ap_vld <= ap_const_logic_1;
        else 
            bits_cntr_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bl1Codes_address0 <= zext_ln478_fu_812_p1(1 - 1 downto 0);

    bl1Codes_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl1Codes_ce0 <= ap_const_logic_1;
        else 
            bl1Codes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl2Codes_address0 <= zext_ln479_fu_817_p1(2 - 1 downto 0);

    bl2Codes_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl2Codes_ce0 <= ap_const_logic_1;
        else 
            bl2Codes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl3Codes_address0 <= zext_ln480_fu_822_p1(3 - 1 downto 0);

    bl3Codes_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl3Codes_ce0 <= ap_const_logic_1;
        else 
            bl3Codes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl4Codes_address0 <= zext_ln481_fu_827_p1(4 - 1 downto 0);

    bl4Codes_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl4Codes_ce0 <= ap_const_logic_1;
        else 
            bl4Codes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl5Codes_address0 <= zext_ln482_fu_832_p1(5 - 1 downto 0);

    bl5Codes_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl5Codes_ce0 <= ap_const_logic_1;
        else 
            bl5Codes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl6Codes_address0 <= zext_ln483_fu_837_p1(6 - 1 downto 0);

    bl6Codes_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl6Codes_ce0 <= ap_const_logic_1;
        else 
            bl6Codes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bl7Codes_address0 <= zext_ln484_fu_842_p1(7 - 1 downto 0);

    bl7Codes_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bl7Codes_ce0 <= ap_const_logic_1;
        else 
            bl7Codes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    copy_5_fu_978_p2 <= std_logic_vector(unsigned(extra_copy_fu_972_p2) + unsigned(copy_4_reg_1585));
    copy_6_fu_1219_p3 <= 
        ap_const_lv8_B when (and_ln502_3_fu_1213_p2(0) = '1') else 
        select_ln496_3_fu_1188_p3;
    copy_7_fu_1279_p2 <= std_logic_vector(unsigned(copy_6_fu_1219_p3) + unsigned(ap_const_lv8_FF));
    current_bits_11_fu_584_p3 <= 
        ap_const_lv4_1 when (val_fu_578_p2(0) = '1') else 
        current_bits_fu_198;
    current_bits_12_fu_656_p3 <= 
        select_ln474_fu_642_p3 when (or_ln474_fu_650_p2(0) = '1') else 
        current_bits_11_fu_584_p3;
    current_bits_13_fu_728_p3 <= 
        select_ln474_2_fu_714_p3 when (or_ln474_1_fu_722_p2(0) = '1') else 
        current_bits_12_fu_656_p3;
    current_bits_14_fu_800_p3 <= 
        select_ln474_4_fu_786_p3 when (or_ln474_2_fu_794_p2(0) = '1') else 
        current_bits_13_fu_728_p3;
    current_val_fu_901_p10 <= bl5Codes_q0(5 - 1 downto 0);
    current_val_fu_901_p12 <= bl6Codes_q0(5 - 1 downto 0);
    current_val_fu_901_p14 <= bl7Codes_q0(5 - 1 downto 0);
    current_val_fu_901_p15 <= "XXXXX";
    current_val_fu_901_p2 <= bl1Codes_q0(5 - 1 downto 0);
    current_val_fu_901_p4 <= bl2Codes_q0(5 - 1 downto 0);
    current_val_fu_901_p6 <= bl3Codes_q0(5 - 1 downto 0);
    current_val_fu_901_p8 <= bl4Codes_q0(5 - 1 downto 0);
    done_1_out <= done_1_fu_230;

    done_1_out_ap_vld_assign_proc : process(or_ln469_reg_1606, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln469_reg_1606 = ap_const_lv1_0))) then 
            done_1_out_ap_vld <= ap_const_logic_1;
        else 
            done_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dynamic_curInSize_5_fu_1270_p2 <= std_logic_vector(unsigned(dynamic_curInSize_4_reg_1600) + unsigned(ap_const_lv16_1));
    extra_3_fu_1158_p3 <= 
        select_ln502_fu_1136_p3 when (or_ln502_fu_1144_p2(0) = '1') else 
        select_ln502_1_fu_1150_p3;
    extra_copy_fu_972_p2 <= (trunc_ln489_fu_963_p1 and add_ln489_fu_966_p2);

    huffman_eos_stream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, huffman_eos_stream_empty_n, ap_predicate_op225_read_state3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op225_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            huffman_eos_stream_blk_n <= huffman_eos_stream_empty_n;
        else 
            huffman_eos_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    huffman_eos_stream_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op225_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op225_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            huffman_eos_stream_read <= ap_const_logic_1;
        else 
            huffman_eos_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    huffman_input_stream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, huffman_input_stream_empty_n, ap_predicate_op219_read_state3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op219_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            huffman_input_stream_blk_n <= huffman_input_stream_empty_n;
        else 
            huffman_input_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    huffman_input_stream_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op219_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op219_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            huffman_input_stream_read <= ap_const_logic_1;
        else 
            huffman_input_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln469_1_fu_553_p2 <= "0" when (ap_sig_allocacmp_copy_4 = ap_const_lv8_0) else "1";
    icmp_ln469_fu_548_p2 <= "1" when (unsigned(ap_sig_allocacmp_dynamic_curInSize_4) < unsigned(add_i307_cast_cast_reg_1580)) else "0";
    icmp_ln473_1_fu_606_p2 <= "1" when (unsigned(zext_ln473_1_fu_602_p1) < unsigned(codeOffsets_load_1)) else "0";
    icmp_ln473_2_fu_631_p2 <= "1" when (unsigned(zext_ln473_2_fu_627_p1) < unsigned(codeOffsets_load_2)) else "0";
    icmp_ln473_3_fu_678_p2 <= "1" when (unsigned(zext_ln473_3_fu_674_p1) < unsigned(codeOffsets_load_3)) else "0";
    icmp_ln473_4_fu_703_p2 <= "1" when (unsigned(zext_ln473_4_fu_699_p1) < unsigned(codeOffsets_load_4)) else "0";
    icmp_ln473_5_fu_750_p2 <= "1" when (unsigned(zext_ln473_5_fu_746_p1) < unsigned(codeOffsets_load_5)) else "0";
    icmp_ln473_6_fu_775_p2 <= "1" when (unsigned(zext_ln473_6_fu_771_p1) < unsigned(codeOffsets_load_6)) else "0";
    icmp_ln473_fu_573_p2 <= "1" when (unsigned(zext_ln473_fu_569_p1) < unsigned(codeOffsets_load)) else "0";
    icmp_ln496_fu_847_p2 <= "1" when (ap_sig_allocacmp_copy_4 = ap_const_lv8_0) else "0";
    icmp_ln502_1_fu_1124_p2 <= "1" when (current_val_fu_901_p17 = ap_const_lv5_10) else "0";
    icmp_ln502_2_fu_1195_p2 <= "0" when (current_val_fu_901_p17 = ap_const_lv5_10) else "1";
    icmp_ln502_3_fu_1201_p2 <= "0" when (current_val_fu_901_p17 = ap_const_lv5_11) else "1";
    icmp_ln502_fu_1106_p2 <= "1" when (current_val_fu_901_p17 = ap_const_lv5_11) else "0";
    icmp_ln525_fu_1259_p2 <= "1" when (copy_6_fu_1219_p3 = ap_const_lv8_0) else "0";
    icmp_ln529_fu_1313_p2 <= "0" when (tmp_22_fu_1303_p4 = ap_const_lv2_0) else "1";
    isExtra_4_fu_1112_p2 <= (tmp_21_fu_993_p3 and and_ln496_fu_1045_p2);
    len_2_fu_1227_p3 <= 
        trunc_ln462_fu_1016_p1 when (and_ln497_1_fu_1174_p2(0) = '1') else 
        ap_const_lv4_0;
    len_3_fu_1251_p3 <= 
        len_fu_190 when (or_ln502_1_fu_1245_p2(0) = '1') else 
        zext_ln462_fu_1235_p1;
    lens_address0 <= zext_ln526_fu_1275_p1(9 - 1 downto 0);

    lens_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lens_ce0 <= ap_const_logic_1;
        else 
            lens_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lens_d0 <= len_3_fu_1251_p3(5 - 1 downto 0);

    lens_we0_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln469_reg_1606, ap_block_pp0_stage0_11001, icmp_ln525_fu_1259_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln469_reg_1606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln525_fu_1259_p2 = ap_const_lv1_0))) then 
            lens_we0 <= ap_const_logic_1;
        else 
            lens_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln469_fu_559_p2 <= (icmp_ln469_fu_548_p2 or icmp_ln469_1_fu_553_p2);
    or_ln474_1_fu_722_p2 <= (val_33_fu_708_p2 or val_32_fu_683_p2);
    or_ln474_2_fu_794_p2 <= (val_35_fu_780_p2 or val_34_fu_755_p2);
    or_ln474_fu_650_p2 <= (val_31_fu_636_p2 or val_30_fu_611_p2);
    or_ln496_1_fu_1025_p2 <= (write_flag_1_fu_222 or or_ln496_fu_1020_p2);
    or_ln496_2_fu_1094_p2 <= (xor_ln496_fu_1089_p2 or isExtra_reg_461);
    or_ln496_fu_1020_p2 <= (isExtra_reg_461 or icmp_ln496_reg_1656);
    or_ln497_fu_1100_p2 <= (xor_ln497_fu_1001_p2 or or_ln496_2_fu_1094_p2);
    or_ln502_1_fu_1245_p2 <= (or_ln496_2_fu_1094_p2 or and_ln502_4_fu_1239_p2);
    or_ln502_fu_1144_p2 <= (and_ln502_fu_1118_p2 or and_ln502_1_fu_1130_p2);
    or_ln529_1_fu_1331_p2 <= (xor_ln529_fu_1325_p2 or empty_57_fu_210);
    or_ln529_fu_1319_p2 <= (icmp_ln529_fu_1313_p2 or empty_57_fu_210);
    p_bitbuffer_1_out <= p_bitbuffer_1_load_reg_1591;

    p_bitbuffer_1_out_ap_vld_assign_proc : process(or_ln469_reg_1606, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln469_reg_1606 = ap_const_lv1_0))) then 
            p_bitbuffer_1_out_ap_vld <= ap_const_logic_1;
        else 
            p_bitbuffer_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp10_fu_1073_p3 <= 
        sub_ln495_fu_987_p2 when (isExtra_reg_461(0) = '1') else 
        empty_56_fu_206;
    sel_tmp2_fu_1031_p3 <= 
        sub_ln495_fu_987_p2 when (isExtra_reg_461(0) = '1') else 
        bits_cntr_1_fu_218;
    sel_tmp32_fu_1166_p3 <= 
        copy_5_fu_978_p2 when (isExtra_reg_461(0) = '1') else 
        ap_const_lv8_3;
    sel_tmp3_fu_1039_p2 <= (isExtra_reg_461 xor ap_const_lv1_1);
    select_ln474_2_fu_714_p3 <= 
        ap_const_lv4_5 when (val_33_fu_708_p2(0) = '1') else 
        ap_const_lv4_4;
    select_ln474_4_fu_786_p3 <= 
        ap_const_lv4_7 when (val_35_fu_780_p2(0) = '1') else 
        ap_const_lv4_6;
    select_ln474_fu_642_p3 <= 
        ap_const_lv4_3 when (val_31_fu_636_p2(0) = '1') else 
        ap_const_lv4_2;
    select_ln496_2_fu_1081_p3 <= 
        sub_ln499_fu_1010_p2 when (and_ln496_fu_1045_p2(0) = '1') else 
        sel_tmp10_fu_1073_p3;
    select_ln496_3_fu_1188_p3 <= 
        select_ln497_fu_1180_p3 when (or_ln496_fu_1020_p2(0) = '1') else 
        copy_4_reg_1585;
    select_ln496_fu_1050_p3 <= 
        sub_ln499_fu_1010_p2 when (and_ln496_fu_1045_p2(0) = '1') else 
        sel_tmp2_fu_1031_p3;
    select_ln497_fu_1180_p3 <= 
        ap_const_lv8_1 when (and_ln497_1_fu_1174_p2(0) = '1') else 
        sel_tmp32_fu_1166_p3;
    select_ln502_1_fu_1150_p3 <= 
        extra_fu_202 when (or_ln497_fu_1100_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln502_fu_1136_p3 <= 
        ap_const_lv3_2 when (and_ln502_1_fu_1130_p2(0) = '1') else 
        ap_const_lv3_3;
    shl_ln489_fu_957_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln488_1_fu_948_p1(8-1 downto 0)))));
    shl_ln531_fu_1345_p2 <= std_logic_vector(shift_left(unsigned(zext_ln531_fu_1337_p1),to_integer(unsigned('0' & zext_ln531_1_fu_1341_p1(31-1 downto 0)))));
    sub_ln495_fu_987_p2 <= std_logic_vector(unsigned(empty_56_fu_206) - unsigned(zext_ln495_fu_983_p1));
    sub_ln499_fu_1010_p2 <= std_logic_vector(unsigned(empty_56_fu_206) - unsigned(zext_ln499_fu_1007_p1));
    
    tmp_15_fu_617_p4_proc : process(ap_sig_allocacmp_p_bitbuffer_1_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_15_fu_617_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_2(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_p_bitbuffer_1_load;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_2(5-1 downto 0)));
            for tmp_15_fu_617_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_15_fu_617_p4_i) := ap_sig_allocacmp_p_bitbuffer_1_load(32-1-tmp_15_fu_617_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_15_fu_617_p4 <= resvalue(3-1 downto 0);
    end process;

    
    tmp_16_fu_664_p4_proc : process(ap_sig_allocacmp_p_bitbuffer_1_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_16_fu_664_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_3(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_p_bitbuffer_1_load;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_3(5-1 downto 0)));
            for tmp_16_fu_664_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_16_fu_664_p4_i) := ap_sig_allocacmp_p_bitbuffer_1_load(32-1-tmp_16_fu_664_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_16_fu_664_p4 <= resvalue(4-1 downto 0);
    end process;

    
    tmp_17_fu_689_p4_proc : process(ap_sig_allocacmp_p_bitbuffer_1_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_17_fu_689_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_4(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_p_bitbuffer_1_load;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_4(5-1 downto 0)));
            for tmp_17_fu_689_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_17_fu_689_p4_i) := ap_sig_allocacmp_p_bitbuffer_1_load(32-1-tmp_17_fu_689_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_17_fu_689_p4 <= resvalue(5-1 downto 0);
    end process;

    
    tmp_18_fu_736_p4_proc : process(ap_sig_allocacmp_p_bitbuffer_1_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_18_fu_736_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_5(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_p_bitbuffer_1_load;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_5(5-1 downto 0)));
            for tmp_18_fu_736_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_18_fu_736_p4_i) := ap_sig_allocacmp_p_bitbuffer_1_load(32-1-tmp_18_fu_736_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_18_fu_736_p4 <= resvalue(6-1 downto 0);
    end process;

    
    tmp_19_fu_761_p4_proc : process(ap_sig_allocacmp_p_bitbuffer_1_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_19_fu_761_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_6(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_p_bitbuffer_1_load;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_6(5-1 downto 0)));
            for tmp_19_fu_761_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_19_fu_761_p4_i) := ap_sig_allocacmp_p_bitbuffer_1_load(32-1-tmp_19_fu_761_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_19_fu_761_p4 <= resvalue(7-1 downto 0);
    end process;

    tmp_21_fu_993_p3 <= current_val_fu_901_p17(4 downto 4);
    tmp_22_fu_1303_p4 <= select_ln496_2_fu_1081_p3(5 downto 4);
    
    tmp_s_fu_592_p4_proc : process(ap_sig_allocacmp_p_bitbuffer_1_load)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_s_fu_592_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_p_bitbuffer_1_load;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1(5-1 downto 0)));
            for tmp_s_fu_592_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_s_fu_592_p4_i) := ap_sig_allocacmp_p_bitbuffer_1_load(32-1-tmp_s_fu_592_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_s_fu_592_p4 <= resvalue(2-1 downto 0);
    end process;

    trunc_ln462_fu_1016_p1 <= current_val_fu_901_p17(4 - 1 downto 0);
    trunc_ln467_fu_808_p1 <= current_bits_14_fu_800_p3(3 - 1 downto 0);
    trunc_ln473_fu_565_p1 <= ap_sig_allocacmp_p_bitbuffer_1_load(1 - 1 downto 0);
    trunc_ln489_fu_963_p1 <= p_bitbuffer_1_load_reg_1591(8 - 1 downto 0);
    val_30_fu_611_p2 <= (icmp_ln473_1_fu_606_p2 xor ap_const_lv1_1);
    val_31_fu_636_p2 <= (icmp_ln473_2_fu_631_p2 xor ap_const_lv1_1);
    val_32_fu_683_p2 <= (icmp_ln473_3_fu_678_p2 xor ap_const_lv1_1);
    val_33_fu_708_p2 <= (icmp_ln473_4_fu_703_p2 xor ap_const_lv1_1);
    val_34_fu_755_p2 <= (icmp_ln473_5_fu_750_p2 xor ap_const_lv1_1);
    val_35_fu_780_p2 <= (icmp_ln473_6_fu_775_p2 xor ap_const_lv1_1);
    val_fu_578_p2 <= (icmp_ln473_fu_573_p2 xor ap_const_lv1_1);
    write_flag3_1_out <= write_flag3_1_fu_234;

    write_flag3_1_out_ap_vld_assign_proc : process(or_ln469_reg_1606, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln469_reg_1606 = ap_const_lv1_0))) then 
            write_flag3_1_out_ap_vld <= ap_const_logic_1;
        else 
            write_flag3_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    write_flag_1_out <= write_flag_1_fu_222;

    write_flag_1_out_ap_vld_assign_proc : process(or_ln469_reg_1606, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln469_reg_1606 = ap_const_lv1_0))) then 
            write_flag_1_out_ap_vld <= ap_const_logic_1;
        else 
            write_flag_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln496_fu_1089_p2 <= (icmp_ln496_reg_1656 xor ap_const_lv1_1);
    xor_ln497_fu_1001_p2 <= (tmp_21_fu_993_p3 xor ap_const_lv1_1);
    xor_ln529_fu_1325_p2 <= (icmp_ln529_fu_1313_p2 xor ap_const_lv1_1);
    zext_ln462_fu_1235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(len_2_fu_1227_p3),16));
    zext_ln473_1_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_592_p4),16));
    zext_ln473_2_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_617_p4),16));
    zext_ln473_3_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_664_p4),16));
    zext_ln473_4_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_689_p4),16));
    zext_ln473_5_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_736_p4),16));
    zext_ln473_6_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_761_p4),16));
    zext_ln473_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln473_fu_565_p1),16));
    zext_ln478_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln473_fu_565_p1),64));
    zext_ln479_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_592_p4),64));
    zext_ln480_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_617_p4),64));
    zext_ln481_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_664_p4),64));
    zext_ln482_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_689_p4),64));
    zext_ln483_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_736_p4),64));
    zext_ln484_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_761_p4),64));
    zext_ln487_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_bits_14_reg_1610),32));
    zext_ln488_1_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(extra_fu_202),8));
    zext_ln488_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(extra_fu_202),32));
    zext_ln495_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(extra_fu_202),6));
    zext_ln499_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_bits_14_reg_1610),6));
    zext_ln526_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dynamic_curInSize_4_reg_1600),64));
    zext_ln531_1_fu_1341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln496_2_fu_1081_p3),31));
    zext_ln531_2_fu_1351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln531_fu_1345_p2),32));
    zext_ln531_fu_1337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(huffman_input_stream_dout),31));
end behav;
