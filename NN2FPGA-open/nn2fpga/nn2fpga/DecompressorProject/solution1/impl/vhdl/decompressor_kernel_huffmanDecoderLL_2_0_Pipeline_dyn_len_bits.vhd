-- ==============================================================
-- Generated by Vitis HLS v2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decompressor_kernel_huffmanDecoderLL_2_0_Pipeline_dyn_len_bits is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    done_26 : IN STD_LOGIC_VECTOR (0 downto 0);
    bits_cntr_39 : IN STD_LOGIC_VECTOR (5 downto 0);
    bitbuffer_37 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln1069_1 : IN STD_LOGIC_VECTOR (3 downto 0);
    dynamic_lens_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dynamic_lens_ce0 : OUT STD_LOGIC;
    dynamic_lens_we0 : OUT STD_LOGIC;
    dynamic_lens_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    huffman_input_stream_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    huffman_input_stream_empty_n : IN STD_LOGIC;
    huffman_input_stream_read : OUT STD_LOGIC;
    huffman_eos_stream_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    huffman_eos_stream_empty_n : IN STD_LOGIC;
    huffman_eos_stream_read : OUT STD_LOGIC;
    done_9_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    done_9_out_ap_vld : OUT STD_LOGIC;
    bits_cntr_7_out : OUT STD_LOGIC_VECTOR (5 downto 0);
    bits_cntr_7_out_ap_vld : OUT STD_LOGIC;
    bitbuffer_9_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    bitbuffer_9_out_ap_vld : OUT STD_LOGIC;
    order_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    order_ce0 : OUT STD_LOGIC;
    order_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    call_ret29_discardBitStreamLL_fu_610_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    call_ret29_discardBitStreamLL_fu_610_p_din2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    call_ret29_discardBitStreamLL_fu_610_p_din3 : OUT STD_LOGIC_VECTOR (4 downto 0);
    call_ret29_discardBitStreamLL_fu_610_p_dout0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    call_ret29_discardBitStreamLL_fu_610_p_dout0_1 : IN STD_LOGIC_VECTOR (5 downto 0);
    call_ret29_discardBitStreamLL_fu_610_p_ready : IN STD_LOGIC );
end;


architecture behav of decompressor_kernel_huffmanDecoderLL_2_0_Pipeline_dyn_len_bits is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln1069_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal huffman_input_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1069_reg_443 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1071_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal huffman_eos_stream_blk_n : STD_LOGIC;
    signal bitbuffer_9_load_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal bits_cntr_7_load_reg_436 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln1071_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_predicate_op44_read_state3 : BOOLEAN;
    signal ap_predicate_op50_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_bits_cntr_8_phi_fu_198_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal bits_cntr_fu_347_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_bits_cntr_8_reg_195 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_bits_cntr_8_reg_195 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_bitbuffer_10_phi_fu_207_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitbuffer_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_bitbuffer_10_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_bitbuffer_10_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1077_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln1077_1_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dynamic_curInSize_fu_92 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal dynamic_curInSize_2_fu_272_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal indvars_iv3_fu_96 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln1069_fu_308_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1069_1_cast_fu_223_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitbuffer_9_fu_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal bits_cntr_7_fu_104 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal done_9_fu_108 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal tmp_fu_281_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1071_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1073_fu_324_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1073_1_fu_328_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln1073_fu_331_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1073_2_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1077_fu_358_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_103 : BOOLEAN;
    signal ap_condition_332 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component decompressor_kernel_discardBitStreamLL IS
    port (
        ap_ready : OUT STD_LOGIC;
        bitbuffer_read : IN STD_LOGIC_VECTOR (31 downto 0);
        bits_cntr_read : IN STD_LOGIC_VECTOR (5 downto 0);
        n_bits_val : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component decompressor_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component decompressor_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_bitbuffer_10_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_103)) then
                if (((icmp_ln1069_fu_266_p2 = ap_const_lv1_0) and (or_ln1071_fu_297_p2 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_bitbuffer_10_reg_204 <= bitbuffer_9_fu_100;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_bitbuffer_10_reg_204 <= ap_phi_reg_pp0_iter0_bitbuffer_10_reg_204;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_bits_cntr_8_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_103)) then
                if (((icmp_ln1069_fu_266_p2 = ap_const_lv1_0) and (or_ln1071_fu_297_p2 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_bits_cntr_8_reg_195 <= bits_cntr_7_fu_104;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_bits_cntr_8_reg_195 <= ap_phi_reg_pp0_iter0_bits_cntr_8_reg_195;
                end if;
            end if; 
        end if;
    end process;

    bitbuffer_9_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bitbuffer_9_fu_100 <= bitbuffer_37;
                elsif (((icmp_ln1069_reg_443 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    bitbuffer_9_fu_100 <= call_ret29_discardBitStreamLL_fu_610_p_dout0_0;
                end if;
            end if; 
        end if;
    end process;

    bits_cntr_7_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bits_cntr_7_fu_104 <= bits_cntr_39;
                elsif (((icmp_ln1069_reg_443 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    bits_cntr_7_fu_104 <= call_ret29_discardBitStreamLL_fu_610_p_dout0_1;
                end if;
            end if; 
        end if;
    end process;

    done_9_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    done_9_fu_108 <= done_26;
                elsif ((ap_const_boolean_1 = ap_condition_332)) then 
                    done_9_fu_108 <= huffman_eos_stream_dout;
                end if;
            end if; 
        end if;
    end process;

    dynamic_curInSize_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                dynamic_curInSize_fu_92 <= ap_const_lv5_0;
            elsif (((icmp_ln1069_fu_266_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                dynamic_curInSize_fu_92 <= dynamic_curInSize_2_fu_272_p2;
            end if; 
        end if;
    end process;

    indvars_iv3_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                indvars_iv3_fu_96 <= zext_ln1069_1_cast_fu_223_p1;
            elsif (((icmp_ln1069_fu_266_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvars_iv3_fu_96 <= add_ln1069_fu_308_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                bitbuffer_9_load_reg_430 <= bitbuffer_9_fu_100;
                bits_cntr_7_load_reg_436 <= bits_cntr_7_fu_104;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln1069_reg_443 <= icmp_ln1069_fu_266_p2;
                or_ln1071_reg_447 <= or_ln1071_fu_297_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1069_fu_308_p2 <= std_logic_vector(unsigned(indvars_iv3_fu_96) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state3_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state3_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(huffman_input_stream_empty_n, huffman_eos_stream_empty_n, ap_predicate_op44_read_state3, ap_predicate_op50_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((huffman_eos_stream_empty_n = ap_const_logic_0) and (ap_predicate_op50_read_state3 = ap_const_boolean_1)) or ((huffman_input_stream_empty_n = ap_const_logic_0) and (ap_predicate_op44_read_state3 = ap_const_boolean_1)));
    end process;


    ap_condition_103_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_103 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_332_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln1069_reg_443, or_ln1071_reg_447)
    begin
                ap_condition_332 <= ((or_ln1071_reg_447 = ap_const_lv1_0) and (icmp_ln1069_reg_443 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1069_fu_266_p2)
    begin
        if (((icmp_ln1069_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_phi_mux_bitbuffer_10_phi_fu_207_p4_assign_proc : process(icmp_ln1069_reg_443, or_ln1071_reg_447, bitbuffer_fu_341_p2, ap_phi_reg_pp0_iter1_bitbuffer_10_reg_204)
    begin
        if (((or_ln1071_reg_447 = ap_const_lv1_0) and (icmp_ln1069_reg_443 = ap_const_lv1_0))) then 
            ap_phi_mux_bitbuffer_10_phi_fu_207_p4 <= bitbuffer_fu_341_p2;
        else 
            ap_phi_mux_bitbuffer_10_phi_fu_207_p4 <= ap_phi_reg_pp0_iter1_bitbuffer_10_reg_204;
        end if; 
    end process;


    ap_phi_mux_bits_cntr_8_phi_fu_198_p4_assign_proc : process(icmp_ln1069_reg_443, or_ln1071_reg_447, bits_cntr_fu_347_p2, ap_phi_reg_pp0_iter1_bits_cntr_8_reg_195)
    begin
        if (((or_ln1071_reg_447 = ap_const_lv1_0) and (icmp_ln1069_reg_443 = ap_const_lv1_0))) then 
            ap_phi_mux_bits_cntr_8_phi_fu_198_p4 <= bits_cntr_fu_347_p2;
        else 
            ap_phi_mux_bits_cntr_8_phi_fu_198_p4 <= ap_phi_reg_pp0_iter1_bits_cntr_8_reg_195;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_bitbuffer_10_reg_204 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_bits_cntr_8_reg_195 <= "XXXXXX";

    ap_predicate_op44_read_state3_assign_proc : process(icmp_ln1069_reg_443, or_ln1071_reg_447)
    begin
                ap_predicate_op44_read_state3 <= ((or_ln1071_reg_447 = ap_const_lv1_0) and (icmp_ln1069_reg_443 = ap_const_lv1_0));
    end process;


    ap_predicate_op50_read_state3_assign_proc : process(icmp_ln1069_reg_443, or_ln1071_reg_447)
    begin
                ap_predicate_op50_read_state3 <= ((or_ln1071_reg_447 = ap_const_lv1_0) and (icmp_ln1069_reg_443 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitbuffer_9_out <= bitbuffer_9_fu_100;

    bitbuffer_9_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1069_fu_266_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1069_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bitbuffer_9_out_ap_vld <= ap_const_logic_1;
        else 
            bitbuffer_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bitbuffer_fu_341_p2 <= std_logic_vector(unsigned(zext_ln1073_2_fu_337_p1) + unsigned(bitbuffer_9_load_reg_430));
    bits_cntr_7_out <= bits_cntr_7_fu_104;

    bits_cntr_7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1069_fu_266_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1069_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bits_cntr_7_out_ap_vld <= ap_const_logic_1;
        else 
            bits_cntr_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bits_cntr_fu_347_p2 <= std_logic_vector(unsigned(bits_cntr_7_load_reg_436) + unsigned(ap_const_lv6_10));
    call_ret29_discardBitStreamLL_fu_610_p_din1 <= ap_phi_mux_bitbuffer_10_phi_fu_207_p4;
    call_ret29_discardBitStreamLL_fu_610_p_din2 <= ap_phi_mux_bits_cntr_8_phi_fu_198_p4;
    call_ret29_discardBitStreamLL_fu_610_p_din3 <= ap_const_lv5_3;
    done_9_out <= done_9_fu_108;

    done_9_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1069_fu_266_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1069_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            done_9_out_ap_vld <= ap_const_logic_1;
        else 
            done_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dynamic_curInSize_2_fu_272_p2 <= std_logic_vector(unsigned(dynamic_curInSize_fu_92) + unsigned(ap_const_lv5_1));
    dynamic_lens_address0 <= zext_ln1077_1_fu_367_p1(9 - 1 downto 0);

    dynamic_lens_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dynamic_lens_ce0 <= ap_const_logic_1;
        else 
            dynamic_lens_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dynamic_lens_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1077_fu_358_p1),5));

    dynamic_lens_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1069_reg_443, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1069_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dynamic_lens_we0 <= ap_const_logic_1;
        else 
            dynamic_lens_we0 <= ap_const_logic_0;
        end if; 
    end process;


    huffman_eos_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, huffman_eos_stream_empty_n, ap_block_pp0_stage0, icmp_ln1069_reg_443, or_ln1071_reg_447)
    begin
        if (((or_ln1071_reg_447 = ap_const_lv1_0) and (icmp_ln1069_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            huffman_eos_stream_blk_n <= huffman_eos_stream_empty_n;
        else 
            huffman_eos_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    huffman_eos_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op50_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op50_read_state3 = ap_const_boolean_1))) then 
            huffman_eos_stream_read <= ap_const_logic_1;
        else 
            huffman_eos_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    huffman_input_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, huffman_input_stream_empty_n, ap_block_pp0_stage0, icmp_ln1069_reg_443, or_ln1071_reg_447)
    begin
        if (((or_ln1071_reg_447 = ap_const_lv1_0) and (icmp_ln1069_reg_443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            huffman_input_stream_blk_n <= huffman_input_stream_empty_n;
        else 
            huffman_input_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    huffman_input_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op44_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op44_read_state3 = ap_const_boolean_1))) then 
            huffman_input_stream_read <= ap_const_logic_1;
        else 
            huffman_input_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1069_fu_266_p2 <= "1" when (indvars_iv3_fu_96 = ap_const_lv6_13) else "0";
    icmp_ln1071_fu_291_p2 <= "0" when (tmp_fu_281_p4 = ap_const_lv2_0) else "1";
    or_ln1071_fu_297_p2 <= (icmp_ln1071_fu_291_p2 or done_9_fu_108);
    order_address0 <= zext_ln1077_fu_303_p1(5 - 1 downto 0);

    order_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            order_ce0 <= ap_const_logic_1;
        else 
            order_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1073_fu_331_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1073_fu_324_p1),to_integer(unsigned('0' & zext_ln1073_1_fu_328_p1(31-1 downto 0)))));
    tmp_fu_281_p4 <= bits_cntr_7_fu_104(5 downto 4);
    trunc_ln1077_fu_358_p1 <= ap_phi_mux_bitbuffer_10_phi_fu_207_p4(3 - 1 downto 0);
    zext_ln1069_1_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1069_1),6));
    zext_ln1073_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bits_cntr_7_load_reg_436),31));
    zext_ln1073_2_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1073_fu_331_p2),32));
    zext_ln1073_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(huffman_input_stream_dout),31));
    zext_ln1077_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(order_q0),64));
    zext_ln1077_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dynamic_curInSize_fu_92),64));
end behav;
