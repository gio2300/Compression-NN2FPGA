// ==============================================================
// Generated by Vitis HLS v2022.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module decompressor_kernel_huffmanDecoderLL_2_0_Pipeline_read_fname (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        huffman_input_stream_dout,
        huffman_input_stream_empty_n,
        huffman_input_stream_read,
        huffman_eos_stream_dout,
        huffman_eos_stream_empty_n,
        huffman_eos_stream_read,
        done_17,
        bits_cntr_16,
        bitbuffer_15,
        bitbuffer_14,
        done_1346_out,
        done_1346_out_ap_vld,
        bits_cntr_1340_out,
        bits_cntr_1340_out_ap_vld,
        bitbuffer_1333_out,
        bitbuffer_1333_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] huffman_input_stream_dout;
input   huffman_input_stream_empty_n;
output   huffman_input_stream_read;
input  [0:0] huffman_eos_stream_dout;
input   huffman_eos_stream_empty_n;
output   huffman_eos_stream_read;
input  [0:0] done_17;
input  [5:0] bits_cntr_16;
input  [31:0] bitbuffer_15;
input  [7:0] bitbuffer_14;
output  [0:0] done_1346_out;
output   done_1346_out_ap_vld;
output  [5:0] bits_cntr_1340_out;
output   bits_cntr_1340_out_ap_vld;
output  [31:0] bitbuffer_1333_out;
output   bitbuffer_1333_out_ap_vld;

reg ap_idle;
reg huffman_input_stream_read;
reg huffman_eos_stream_read;
reg done_1346_out_ap_vld;
reg bits_cntr_1340_out_ap_vld;
reg bitbuffer_1333_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln987_fu_209_p2;
wire   [0:0] or_ln993_fu_240_p2;
reg    ap_predicate_op33_read_state2;
reg    ap_predicate_op42_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    huffman_input_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    huffman_eos_stream_blk_n;
reg   [30:0] ap_phi_mux_bitbuffer_2334_phi_fu_158_p4;
wire   [30:0] bitbuffer_fu_280_p3;
wire   [30:0] ap_phi_reg_pp0_iter1_bitbuffer_2334_reg_155;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] zext_ln999_fu_305_p1;
reg   [7:0] lcl_tmp_fu_82;
wire   [7:0] trunc_ln989_fu_205_p1;
wire    ap_loop_init;
reg   [31:0] bitbuffer_1333_fu_86;
wire   [31:0] zext_ln987_fu_315_p1;
reg   [5:0] bits_cntr_1340_fu_90;
wire   [5:0] bits_cntr_2_fu_289_p2;
wire   [5:0] bits_cntr_fu_218_p2;
reg   [0:0] done_1346_fu_94;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] tmp_fu_224_p4;
wire   [0:0] icmp_ln993_fu_234_p2;
wire   [30:0] zext_ln995_fu_246_p1;
wire   [30:0] zext_ln995_1_fu_250_p1;
wire   [30:0] shl_ln995_fu_254_p2;
wire   [23:0] trunc_ln995_fu_260_p1;
wire   [23:0] grp_fu_164_p4;
wire   [6:0] tmp_3_fu_270_p4;
wire   [23:0] or_ln995_fu_264_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_259;
reg    ap_condition_262;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 lcl_tmp_fu_82 = 8'd0;
#0 bitbuffer_1333_fu_86 = 32'd0;
#0 bits_cntr_1340_fu_90 = 6'd0;
#0 done_1346_fu_94 = 1'd0;
#0 ap_done_reg = 1'b0;
end

decompressor_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bitbuffer_1333_fu_86 <= bitbuffer_15;
        end else if (((icmp_ln987_fu_209_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            bitbuffer_1333_fu_86 <= zext_ln987_fu_315_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bits_cntr_1340_fu_90 <= bits_cntr_16;
        end else if ((1'b1 == ap_condition_262)) begin
            bits_cntr_1340_fu_90 <= bits_cntr_fu_218_p2;
        end else if ((1'b1 == ap_condition_259)) begin
            bits_cntr_1340_fu_90 <= bits_cntr_2_fu_289_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            done_1346_fu_94 <= done_17;
        end else if ((1'b1 == ap_condition_259)) begin
            done_1346_fu_94 <= huffman_eos_stream_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lcl_tmp_fu_82 <= bitbuffer_14;
        end else if (((icmp_ln987_fu_209_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            lcl_tmp_fu_82 <= trunc_ln989_fu_205_p1;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln987_fu_209_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln987_fu_209_p2 == 1'd0)) begin
        if ((or_ln993_fu_240_p2 == 1'd1)) begin
            ap_phi_mux_bitbuffer_2334_phi_fu_158_p4 = zext_ln999_fu_305_p1;
        end else if ((or_ln993_fu_240_p2 == 1'd0)) begin
            ap_phi_mux_bitbuffer_2334_phi_fu_158_p4 = bitbuffer_fu_280_p3;
        end else begin
            ap_phi_mux_bitbuffer_2334_phi_fu_158_p4 = ap_phi_reg_pp0_iter1_bitbuffer_2334_reg_155;
        end
    end else begin
        ap_phi_mux_bitbuffer_2334_phi_fu_158_p4 = ap_phi_reg_pp0_iter1_bitbuffer_2334_reg_155;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln987_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bitbuffer_1333_out_ap_vld = 1'b1;
    end else begin
        bitbuffer_1333_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln987_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bits_cntr_1340_out_ap_vld = 1'b1;
    end else begin
        bits_cntr_1340_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln987_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        done_1346_out_ap_vld = 1'b1;
    end else begin
        done_1346_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op42_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffman_eos_stream_blk_n = huffman_eos_stream_empty_n;
    end else begin
        huffman_eos_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op42_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffman_eos_stream_read = 1'b1;
    end else begin
        huffman_eos_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op33_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffman_input_stream_blk_n = huffman_input_stream_empty_n;
    end else begin
        huffman_input_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op33_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffman_input_stream_read = 1'b1;
    end else begin
        huffman_input_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op42_read_state2 == 1'b1) & (huffman_eos_stream_empty_n == 1'b0)) | ((ap_predicate_op33_read_state2 == 1'b1) & (huffman_input_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_259 = ((or_ln993_fu_240_p2 == 1'd0) & (icmp_ln987_fu_209_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_262 = ((or_ln993_fu_240_p2 == 1'd1) & (icmp_ln987_fu_209_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter1_bitbuffer_2334_reg_155 = 'bx;

always @ (*) begin
    ap_predicate_op33_read_state2 = ((or_ln993_fu_240_p2 == 1'd0) & (icmp_ln987_fu_209_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op42_read_state2 = ((or_ln993_fu_240_p2 == 1'd0) & (icmp_ln987_fu_209_p2 == 1'd0));
end

assign bitbuffer_1333_out = bitbuffer_1333_fu_86;

assign bitbuffer_fu_280_p3 = {{tmp_3_fu_270_p4}, {or_ln995_fu_264_p2}};

assign bits_cntr_1340_out = bits_cntr_1340_fu_90;

assign bits_cntr_2_fu_289_p2 = (bits_cntr_1340_fu_90 + 6'd8);

assign bits_cntr_fu_218_p2 = ($signed(bits_cntr_1340_fu_90) + $signed(6'd56));

assign done_1346_out = done_1346_fu_94;

assign grp_fu_164_p4 = {{bitbuffer_1333_fu_86[31:8]}};

assign icmp_ln987_fu_209_p2 = ((lcl_tmp_fu_82 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln993_fu_234_p2 = ((tmp_fu_224_p4 != 2'd0) ? 1'b1 : 1'b0);

assign or_ln993_fu_240_p2 = (icmp_ln993_fu_234_p2 | done_1346_fu_94);

assign or_ln995_fu_264_p2 = (trunc_ln995_fu_260_p1 | grp_fu_164_p4);

assign shl_ln995_fu_254_p2 = zext_ln995_fu_246_p1 << zext_ln995_1_fu_250_p1;

assign tmp_3_fu_270_p4 = {{shl_ln995_fu_254_p2[30:24]}};

assign tmp_fu_224_p4 = {{bits_cntr_fu_218_p2[5:4]}};

assign trunc_ln989_fu_205_p1 = bitbuffer_1333_fu_86[7:0];

assign trunc_ln995_fu_260_p1 = shl_ln995_fu_254_p2[23:0];

assign zext_ln987_fu_315_p1 = ap_phi_mux_bitbuffer_2334_phi_fu_158_p4;

assign zext_ln995_1_fu_250_p1 = bits_cntr_fu_218_p2;

assign zext_ln995_fu_246_p1 = huffman_input_stream_dout;

assign zext_ln999_fu_305_p1 = grp_fu_164_p4;

endmodule //decompressor_kernel_huffmanDecoderLL_2_0_Pipeline_read_fname
