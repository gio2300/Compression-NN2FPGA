// ==============================================================
// Generated by Vitis HLS v2022.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module decompressor_kernel_code_generator_array_dyn_new_Pipeline_firstCode (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        codeOffsets_address0,
        codeOffsets_ce0,
        codeOffsets_we0,
        codeOffsets_d0,
        count_13_reload,
        count_12_reload,
        count_11_reload,
        count_10_reload,
        count_9_reload,
        count_8_reload,
        count_7_reload,
        count_6_reload,
        count_5_reload,
        count_4_reload,
        count_3_reload,
        count_2_reload,
        count_1_reload,
        count_reload,
        firstCode_14_out,
        firstCode_14_out_ap_vld,
        firstCode_13_out,
        firstCode_13_out_ap_vld,
        firstCode_12_out,
        firstCode_12_out_ap_vld,
        firstCode_11_out,
        firstCode_11_out_ap_vld,
        firstCode_10_out,
        firstCode_10_out_ap_vld,
        firstCode_9_out,
        firstCode_9_out_ap_vld,
        firstCode_8_out,
        firstCode_8_out_ap_vld,
        firstCode_7_out,
        firstCode_7_out_ap_vld,
        firstCode_6_out,
        firstCode_6_out_ap_vld,
        firstCode_5_out,
        firstCode_5_out_ap_vld,
        firstCode_4_out,
        firstCode_4_out_ap_vld,
        firstCode_3_out,
        firstCode_3_out_ap_vld,
        firstCode_2_out,
        firstCode_2_out_ap_vld,
        firstCode_1_out,
        firstCode_1_out_ap_vld,
        firstCode_out,
        firstCode_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] codeOffsets_address0;
output   codeOffsets_ce0;
output   codeOffsets_we0;
output  [15:0] codeOffsets_d0;
input  [8:0] count_13_reload;
input  [8:0] count_12_reload;
input  [8:0] count_11_reload;
input  [8:0] count_10_reload;
input  [8:0] count_9_reload;
input  [8:0] count_8_reload;
input  [8:0] count_7_reload;
input  [8:0] count_6_reload;
input  [8:0] count_5_reload;
input  [8:0] count_4_reload;
input  [8:0] count_3_reload;
input  [8:0] count_2_reload;
input  [8:0] count_1_reload;
input  [8:0] count_reload;
output  [14:0] firstCode_14_out;
output   firstCode_14_out_ap_vld;
output  [14:0] firstCode_13_out;
output   firstCode_13_out_ap_vld;
output  [14:0] firstCode_12_out;
output   firstCode_12_out_ap_vld;
output  [14:0] firstCode_11_out;
output   firstCode_11_out_ap_vld;
output  [14:0] firstCode_10_out;
output   firstCode_10_out_ap_vld;
output  [14:0] firstCode_9_out;
output   firstCode_9_out_ap_vld;
output  [14:0] firstCode_8_out;
output   firstCode_8_out_ap_vld;
output  [14:0] firstCode_7_out;
output   firstCode_7_out_ap_vld;
output  [14:0] firstCode_6_out;
output   firstCode_6_out_ap_vld;
output  [14:0] firstCode_5_out;
output   firstCode_5_out_ap_vld;
output  [14:0] firstCode_4_out;
output   firstCode_4_out_ap_vld;
output  [14:0] firstCode_3_out;
output   firstCode_3_out_ap_vld;
output  [14:0] firstCode_2_out;
output   firstCode_2_out_ap_vld;
output  [14:0] firstCode_1_out;
output   firstCode_1_out_ap_vld;
output  [14:0] firstCode_out;
output   firstCode_out_ap_vld;

reg ap_idle;
reg codeOffsets_ce0;
reg codeOffsets_we0;
reg firstCode_14_out_ap_vld;
reg firstCode_13_out_ap_vld;
reg firstCode_12_out_ap_vld;
reg firstCode_11_out_ap_vld;
reg firstCode_10_out_ap_vld;
reg firstCode_9_out_ap_vld;
reg firstCode_8_out_ap_vld;
reg firstCode_7_out_ap_vld;
reg firstCode_6_out_ap_vld;
reg firstCode_5_out_ap_vld;
reg firstCode_4_out_ap_vld;
reg firstCode_3_out_ap_vld;
reg firstCode_2_out_ap_vld;
reg firstCode_1_out_ap_vld;
reg firstCode_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln785_fu_413_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln787_1_fu_432_p1;
reg   [14:0] phi_ln787_fu_130;
wire   [14:0] firstCode_15_fu_524_p2;
wire    ap_loop_init;
reg   [14:0] ap_sig_allocacmp_phi_ln787_load;
reg   [4:0] i_3_fu_134;
wire   [4:0] add_ln785_fu_605_p2;
reg   [4:0] ap_sig_allocacmp_i;
reg   [14:0] firstCode_fu_138;
wire   [3:0] trunc_ln785_fu_422_p1;
reg   [14:0] firstCode_1_fu_142;
reg   [14:0] firstCode_2_fu_146;
reg   [14:0] firstCode_3_fu_150;
reg   [14:0] firstCode_4_fu_154;
reg   [14:0] firstCode_5_fu_158;
reg   [14:0] firstCode_6_fu_162;
reg   [14:0] firstCode_7_fu_166;
reg   [14:0] firstCode_8_fu_170;
reg   [14:0] firstCode_9_fu_174;
reg   [14:0] firstCode_10_fu_178;
reg   [14:0] firstCode_11_fu_182;
reg   [14:0] firstCode_12_fu_186;
reg   [14:0] firstCode_13_fu_190;
reg   [14:0] firstCode_14_fu_194;
wire   [3:0] add_ln787_fu_426_p2;
wire   [8:0] tmp_s_fu_437_p31;
wire   [8:0] tmp_s_fu_437_p33;
wire   [14:0] zext_ln787_fu_505_p1;
wire   [14:0] add_ln787_1_fu_509_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire   [3:0] tmp_s_fu_437_p1;
wire   [3:0] tmp_s_fu_437_p3;
wire   [3:0] tmp_s_fu_437_p5;
wire   [3:0] tmp_s_fu_437_p7;
wire   [3:0] tmp_s_fu_437_p9;
wire   [3:0] tmp_s_fu_437_p11;
wire   [3:0] tmp_s_fu_437_p13;
wire  signed [3:0] tmp_s_fu_437_p15;
wire  signed [3:0] tmp_s_fu_437_p17;
wire  signed [3:0] tmp_s_fu_437_p19;
wire  signed [3:0] tmp_s_fu_437_p21;
wire  signed [3:0] tmp_s_fu_437_p23;
wire  signed [3:0] tmp_s_fu_437_p25;
wire  signed [3:0] tmp_s_fu_437_p27;
wire  signed [3:0] tmp_s_fu_437_p29;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 phi_ln787_fu_130 = 15'd0;
#0 i_3_fu_134 = 5'd0;
#0 firstCode_fu_138 = 15'd0;
#0 firstCode_1_fu_142 = 15'd0;
#0 firstCode_2_fu_146 = 15'd0;
#0 firstCode_3_fu_150 = 15'd0;
#0 firstCode_4_fu_154 = 15'd0;
#0 firstCode_5_fu_158 = 15'd0;
#0 firstCode_6_fu_162 = 15'd0;
#0 firstCode_7_fu_166 = 15'd0;
#0 firstCode_8_fu_170 = 15'd0;
#0 firstCode_9_fu_174 = 15'd0;
#0 firstCode_10_fu_178 = 15'd0;
#0 firstCode_11_fu_182 = 15'd0;
#0 firstCode_12_fu_186 = 15'd0;
#0 firstCode_13_fu_190 = 15'd0;
#0 firstCode_14_fu_194 = 15'd0;
#0 ap_done_reg = 1'b0;
end

decompressor_kernel_sparsemux_31_4_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h1 ),
    .din0_WIDTH( 9 ),
    .CASE1( 4'h2 ),
    .din1_WIDTH( 9 ),
    .CASE2( 4'h3 ),
    .din2_WIDTH( 9 ),
    .CASE3( 4'h4 ),
    .din3_WIDTH( 9 ),
    .CASE4( 4'h5 ),
    .din4_WIDTH( 9 ),
    .CASE5( 4'h6 ),
    .din5_WIDTH( 9 ),
    .CASE6( 4'h7 ),
    .din6_WIDTH( 9 ),
    .CASE7( 4'h8 ),
    .din7_WIDTH( 9 ),
    .CASE8( 4'h9 ),
    .din8_WIDTH( 9 ),
    .CASE9( 4'hA ),
    .din9_WIDTH( 9 ),
    .CASE10( 4'hB ),
    .din10_WIDTH( 9 ),
    .CASE11( 4'hC ),
    .din11_WIDTH( 9 ),
    .CASE12( 4'hD ),
    .din12_WIDTH( 9 ),
    .CASE13( 4'hE ),
    .din13_WIDTH( 9 ),
    .CASE14( 4'hF ),
    .din14_WIDTH( 9 ),
    .def_WIDTH( 9 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
sparsemux_31_4_9_1_1_U175(
    .din0(9'd0),
    .din1(count_13_reload),
    .din2(count_12_reload),
    .din3(count_11_reload),
    .din4(count_10_reload),
    .din5(count_9_reload),
    .din6(count_8_reload),
    .din7(count_7_reload),
    .din8(count_6_reload),
    .din9(count_5_reload),
    .din10(count_4_reload),
    .din11(count_3_reload),
    .din12(count_2_reload),
    .din13(count_1_reload),
    .din14(count_reload),
    .def(tmp_s_fu_437_p31),
    .sel(trunc_ln785_fu_422_p1),
    .dout(tmp_s_fu_437_p33)
);

decompressor_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln785_fu_413_p2 == 1'd0)) begin
            i_3_fu_134 <= add_ln785_fu_605_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_3_fu_134 <= 5'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln785_fu_413_p2 == 1'd0)) begin
                        phi_ln787_fu_130[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
        end else if ((ap_loop_init == 1'b1)) begin
                        phi_ln787_fu_130[1] <= 1'b0;
            phi_ln787_fu_130[2] <= 1'b0;
            phi_ln787_fu_130[3] <= 1'b0;
            phi_ln787_fu_130[4] <= 1'b0;
            phi_ln787_fu_130[5] <= 1'b0;
            phi_ln787_fu_130[6] <= 1'b0;
            phi_ln787_fu_130[7] <= 1'b0;
            phi_ln787_fu_130[8] <= 1'b0;
            phi_ln787_fu_130[9] <= 1'b0;
            phi_ln787_fu_130[10] <= 1'b0;
            phi_ln787_fu_130[11] <= 1'b0;
            phi_ln787_fu_130[12] <= 1'b0;
            phi_ln787_fu_130[13] <= 1'b0;
            phi_ln787_fu_130[14] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd11))) begin
        firstCode_10_fu_178[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd12))) begin
        firstCode_11_fu_182[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd13))) begin
        firstCode_12_fu_186[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd14))) begin
        firstCode_13_fu_190[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (((icmp_ln785_fu_413_p2 == 1'd0) & (trunc_ln785_fu_422_p1 == 4'd0)) | ((icmp_ln785_fu_413_p2 == 1'd0) & (trunc_ln785_fu_422_p1 == 4'd15))))) begin
        firstCode_14_fu_194[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd2))) begin
        firstCode_1_fu_142[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd3))) begin
        firstCode_2_fu_146[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd4))) begin
        firstCode_3_fu_150[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd5))) begin
        firstCode_4_fu_154[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd6))) begin
        firstCode_5_fu_158[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd7))) begin
        firstCode_6_fu_162[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd8))) begin
        firstCode_7_fu_166[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd9))) begin
        firstCode_8_fu_170[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd10))) begin
        firstCode_9_fu_174[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln785_fu_422_p1 == 4'd1))) begin
        firstCode_fu_138[14 : 1] <= firstCode_15_fu_524_p2[14 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 5'd1;
    end else begin
        ap_sig_allocacmp_i = i_3_fu_134;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_phi_ln787_load = 15'd0;
    end else begin
        ap_sig_allocacmp_phi_ln787_load = phi_ln787_fu_130;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        codeOffsets_ce0 = 1'b1;
    end else begin
        codeOffsets_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        codeOffsets_we0 = 1'b1;
    end else begin
        codeOffsets_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_10_out_ap_vld = 1'b1;
    end else begin
        firstCode_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_11_out_ap_vld = 1'b1;
    end else begin
        firstCode_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_12_out_ap_vld = 1'b1;
    end else begin
        firstCode_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_13_out_ap_vld = 1'b1;
    end else begin
        firstCode_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_14_out_ap_vld = 1'b1;
    end else begin
        firstCode_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_1_out_ap_vld = 1'b1;
    end else begin
        firstCode_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_2_out_ap_vld = 1'b1;
    end else begin
        firstCode_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_3_out_ap_vld = 1'b1;
    end else begin
        firstCode_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_4_out_ap_vld = 1'b1;
    end else begin
        firstCode_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_5_out_ap_vld = 1'b1;
    end else begin
        firstCode_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_6_out_ap_vld = 1'b1;
    end else begin
        firstCode_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_7_out_ap_vld = 1'b1;
    end else begin
        firstCode_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_8_out_ap_vld = 1'b1;
    end else begin
        firstCode_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_9_out_ap_vld = 1'b1;
    end else begin
        firstCode_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln785_fu_413_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        firstCode_out_ap_vld = 1'b1;
    end else begin
        firstCode_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln785_fu_605_p2 = (ap_sig_allocacmp_i + 5'd1);

assign add_ln787_1_fu_509_p2 = (ap_sig_allocacmp_phi_ln787_load + zext_ln787_fu_505_p1);

assign add_ln787_fu_426_p2 = (trunc_ln785_fu_422_p1 + 4'd15);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign codeOffsets_address0 = zext_ln787_1_fu_432_p1;

assign codeOffsets_d0 = {{add_ln787_1_fu_509_p2}, {1'd0}};

assign firstCode_10_out = firstCode_10_fu_178;

assign firstCode_11_out = firstCode_11_fu_182;

assign firstCode_12_out = firstCode_12_fu_186;

assign firstCode_13_out = firstCode_13_fu_190;

assign firstCode_14_out = firstCode_14_fu_194;

assign firstCode_15_fu_524_p2 = add_ln787_1_fu_509_p2 << 15'd1;

assign firstCode_1_out = firstCode_1_fu_142;

assign firstCode_2_out = firstCode_2_fu_146;

assign firstCode_3_out = firstCode_3_fu_150;

assign firstCode_4_out = firstCode_4_fu_154;

assign firstCode_5_out = firstCode_5_fu_158;

assign firstCode_6_out = firstCode_6_fu_162;

assign firstCode_7_out = firstCode_7_fu_166;

assign firstCode_8_out = firstCode_8_fu_170;

assign firstCode_9_out = firstCode_9_fu_174;

assign firstCode_out = firstCode_fu_138;

assign icmp_ln785_fu_413_p2 = ((ap_sig_allocacmp_i == 5'd16) ? 1'b1 : 1'b0);

assign tmp_s_fu_437_p31 = 'bx;

assign trunc_ln785_fu_422_p1 = ap_sig_allocacmp_i[3:0];

assign zext_ln787_1_fu_432_p1 = add_ln787_fu_426_p2;

assign zext_ln787_fu_505_p1 = tmp_s_fu_437_p33;

always @ (posedge ap_clk) begin
    phi_ln787_fu_130[0] <= 1'b0;
    firstCode_fu_138[0] <= 1'b0;
    firstCode_1_fu_142[0] <= 1'b0;
    firstCode_2_fu_146[0] <= 1'b0;
    firstCode_3_fu_150[0] <= 1'b0;
    firstCode_4_fu_154[0] <= 1'b0;
    firstCode_5_fu_158[0] <= 1'b0;
    firstCode_6_fu_162[0] <= 1'b0;
    firstCode_7_fu_166[0] <= 1'b0;
    firstCode_8_fu_170[0] <= 1'b0;
    firstCode_9_fu_174[0] <= 1'b0;
    firstCode_10_fu_178[0] <= 1'b0;
    firstCode_11_fu_182[0] <= 1'b0;
    firstCode_12_fu_186[0] <= 1'b0;
    firstCode_13_fu_190[0] <= 1'b0;
    firstCode_14_fu_194[0] <= 1'b0;
end

endmodule //decompressor_kernel_code_generator_array_dyn_new_Pipeline_firstCode
