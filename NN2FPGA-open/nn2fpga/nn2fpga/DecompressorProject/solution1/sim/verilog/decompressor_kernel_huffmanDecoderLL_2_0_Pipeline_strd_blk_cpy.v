// ==============================================================
// Generated by Vitis HLS v2022.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module decompressor_kernel_huffmanDecoderLL_2_0_Pipeline_strd_blk_cpy (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        huffman_eos_stream_dout,
        huffman_eos_stream_empty_n,
        huffman_eos_stream_read,
        lz77_output_stream_din,
        lz77_output_stream_full_n,
        lz77_output_stream_write,
        huffman_input_stream_dout,
        huffman_input_stream_empty_n,
        huffman_input_stream_read,
        done_25,
        bitbuffer_33,
        bits_cntr_35,
        empty,
        done_6_out,
        done_6_out_ap_vld,
        bitbuffer_6338_out,
        bitbuffer_6338_out_ap_vld,
        bits_cntr_5_out,
        bits_cntr_5_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] huffman_eos_stream_dout;
input   huffman_eos_stream_empty_n;
output   huffman_eos_stream_read;
output  [15:0] lz77_output_stream_din;
input   lz77_output_stream_full_n;
output   lz77_output_stream_write;
input  [15:0] huffman_input_stream_dout;
input   huffman_input_stream_empty_n;
output   huffman_input_stream_read;
input  [0:0] done_25;
input  [31:0] bitbuffer_33;
input  [5:0] bits_cntr_35;
input  [15:0] empty;
output  [0:0] done_6_out;
output   done_6_out_ap_vld;
output  [31:0] bitbuffer_6338_out;
output   bitbuffer_6338_out_ap_vld;
output  [5:0] bits_cntr_5_out;
output   bits_cntr_5_out_ap_vld;

reg ap_idle;
reg huffman_eos_stream_read;
reg lz77_output_stream_write;
reg huffman_input_stream_read;
reg done_6_out_ap_vld;
reg bitbuffer_6338_out_ap_vld;
reg bits_cntr_5_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln1035_reg_410;
wire   [0:0] or_ln1042_fu_267_p2;
reg    ap_predicate_op34_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln1035_reg_410_pp0_iter1_reg;
reg   [0:0] or_ln1042_reg_419;
reg    ap_predicate_op47_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1035_fu_221_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    huffman_input_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    huffman_eos_stream_blk_n;
reg    lz77_output_stream_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] add_ln1041_fu_245_p2;
reg   [5:0] add_ln1041_reg_414;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [30:0] ap_phi_mux_bitbuffer_7339_phi_fu_183_p4;
wire   [30:0] bitbuffer_fu_348_p3;
wire   [30:0] ap_phi_reg_pp0_iter2_bitbuffer_7339_reg_180;
wire   [30:0] zext_ln1048_fu_357_p1;
reg   [15:0] i_fu_100;
wire   [15:0] i_2_fu_227_p2;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_i_1;
reg   [5:0] bits_cntr_fu_104;
wire   [5:0] add_ln1046_fu_273_p2;
reg   [31:0] bitbuffer_6338_fu_108;
wire   [31:0] zext_ln1035_fu_362_p1;
reg   [0:0] done_6_fu_112;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] tmp_1_fu_251_p4;
wire   [0:0] icmp_ln1042_fu_261_p2;
wire   [7:0] trunc_ln1037_fu_298_p1;
wire   [12:0] tmpVal_fu_302_p3;
wire   [30:0] zext_ln1044_fu_315_p1;
wire   [30:0] zext_ln1044_1_fu_319_p1;
wire   [30:0] shl_ln1044_fu_322_p2;
wire   [23:0] trunc_ln1044_fu_328_p1;
wire   [23:0] grp_fu_189_p4;
wire   [6:0] tmp_7_fu_338_p4;
wire   [23:0] or_ln1044_fu_332_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_319;
reg    ap_condition_322;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_fu_100 = 16'd0;
#0 bits_cntr_fu_104 = 6'd0;
#0 bitbuffer_6338_fu_108 = 32'd0;
#0 done_6_fu_112 = 1'd0;
#0 ap_done_reg = 1'b0;
end

decompressor_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            bitbuffer_6338_fu_108 <= bitbuffer_33;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            bitbuffer_6338_fu_108 <= zext_ln1035_fu_362_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bits_cntr_fu_104 <= bits_cntr_35;
        end else if ((1'b1 == ap_condition_322)) begin
            bits_cntr_fu_104 <= add_ln1041_fu_245_p2;
        end else if ((1'b1 == ap_condition_319)) begin
            bits_cntr_fu_104 <= add_ln1046_fu_273_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            done_6_fu_112 <= done_25;
        end else if ((1'b1 == ap_condition_319)) begin
            done_6_fu_112 <= huffman_eos_stream_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1035_fu_221_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_100 <= i_2_fu_227_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_100 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln1041_reg_414 <= add_ln1041_fu_245_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln1035_reg_410 <= icmp_ln1035_fu_221_p2;
        icmp_ln1035_reg_410_pp0_iter1_reg <= icmp_ln1035_reg_410;
        or_ln1042_reg_419 <= or_ln1042_fu_267_p2;
    end
end

always @ (*) begin
    if (((icmp_ln1035_fu_221_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1035_reg_410 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1035_reg_410_pp0_iter1_reg == 1'd0)) begin
        if ((or_ln1042_reg_419 == 1'd1)) begin
            ap_phi_mux_bitbuffer_7339_phi_fu_183_p4 = zext_ln1048_fu_357_p1;
        end else if ((or_ln1042_reg_419 == 1'd0)) begin
            ap_phi_mux_bitbuffer_7339_phi_fu_183_p4 = bitbuffer_fu_348_p3;
        end else begin
            ap_phi_mux_bitbuffer_7339_phi_fu_183_p4 = ap_phi_reg_pp0_iter2_bitbuffer_7339_reg_180;
        end
    end else begin
        ap_phi_mux_bitbuffer_7339_phi_fu_183_p4 = ap_phi_reg_pp0_iter2_bitbuffer_7339_reg_180;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 16'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1035_reg_410 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bitbuffer_6338_out_ap_vld = 1'b1;
    end else begin
        bitbuffer_6338_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1035_reg_410 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bits_cntr_5_out_ap_vld = 1'b1;
    end else begin
        bits_cntr_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1035_reg_410 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        done_6_out_ap_vld = 1'b1;
    end else begin
        done_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op34_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffman_eos_stream_blk_n = huffman_eos_stream_empty_n;
    end else begin
        huffman_eos_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op34_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffman_eos_stream_read = 1'b1;
    end else begin
        huffman_eos_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op47_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        huffman_input_stream_blk_n = huffman_input_stream_empty_n;
    end else begin
        huffman_input_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op47_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        huffman_input_stream_read = 1'b1;
    end else begin
        huffman_input_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1035_reg_410_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lz77_output_stream_blk_n = lz77_output_stream_full_n;
    end else begin
        lz77_output_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1035_reg_410_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lz77_output_stream_write = 1'b1;
    end else begin
        lz77_output_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1041_fu_245_p2 = ($signed(bits_cntr_fu_104) + $signed(6'd56));

assign add_ln1046_fu_273_p2 = (bits_cntr_fu_104 + 6'd8);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op34_read_state2 == 1'b1) & (huffman_eos_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op47_read_state3 == 1'b1) & (huffman_input_stream_empty_n == 1'b0)) | ((icmp_ln1035_reg_410_pp0_iter1_reg == 1'd0) & (lz77_output_stream_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_319 = ((or_ln1042_fu_267_p2 == 1'd0) & (icmp_ln1035_reg_410 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_322 = ((or_ln1042_fu_267_p2 == 1'd1) & (icmp_ln1035_reg_410 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter2_bitbuffer_7339_reg_180 = 'bx;

always @ (*) begin
    ap_predicate_op34_read_state2 = ((or_ln1042_fu_267_p2 == 1'd0) & (icmp_ln1035_reg_410 == 1'd0));
end

always @ (*) begin
    ap_predicate_op47_read_state3 = ((or_ln1042_reg_419 == 1'd0) & (icmp_ln1035_reg_410_pp0_iter1_reg == 1'd0));
end

assign bitbuffer_6338_out = bitbuffer_6338_fu_108;

assign bitbuffer_fu_348_p3 = {{tmp_7_fu_338_p4}, {or_ln1044_fu_332_p2}};

assign bits_cntr_5_out = bits_cntr_fu_104;

assign done_6_out = done_6_fu_112;

assign grp_fu_189_p4 = {{bitbuffer_6338_fu_108[31:8]}};

assign i_2_fu_227_p2 = (ap_sig_allocacmp_i_1 + 16'd1);

assign icmp_ln1035_fu_221_p2 = ((ap_sig_allocacmp_i_1 == empty) ? 1'b1 : 1'b0);

assign icmp_ln1042_fu_261_p2 = ((tmp_1_fu_251_p4 != 2'd0) ? 1'b1 : 1'b0);

assign lz77_output_stream_din = $signed(tmpVal_fu_302_p3);

assign or_ln1042_fu_267_p2 = (icmp_ln1042_fu_261_p2 | done_6_fu_112);

assign or_ln1044_fu_332_p2 = (trunc_ln1044_fu_328_p1 | grp_fu_189_p4);

assign shl_ln1044_fu_322_p2 = zext_ln1044_fu_315_p1 << zext_ln1044_1_fu_319_p1;

assign tmpVal_fu_302_p3 = {{5'd16}, {trunc_ln1037_fu_298_p1}};

assign tmp_1_fu_251_p4 = {{add_ln1041_fu_245_p2[5:4]}};

assign tmp_7_fu_338_p4 = {{shl_ln1044_fu_322_p2[30:24]}};

assign trunc_ln1037_fu_298_p1 = bitbuffer_6338_fu_108[7:0];

assign trunc_ln1044_fu_328_p1 = shl_ln1044_fu_322_p2[23:0];

assign zext_ln1035_fu_362_p1 = ap_phi_mux_bitbuffer_7339_phi_fu_183_p4;

assign zext_ln1044_1_fu_319_p1 = add_ln1041_reg_414;

assign zext_ln1044_fu_315_p1 = huffman_input_stream_dout;

assign zext_ln1048_fu_357_p1 = grp_fu_189_p4;

endmodule //decompressor_kernel_huffmanDecoderLL_2_0_Pipeline_strd_blk_cpy
