// ==============================================================
// Generated by Vitis HLS v2022.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module decompressor_kernel_byteGen_Pipeline_bytegen (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        huffman_input_stream_dout,
        huffman_input_stream_empty_n,
        huffman_input_stream_read,
        huffman_eos_stream_dout,
        huffman_eos_stream_empty_n,
        huffman_eos_stream_read,
        write_flag_0,
        empty_39,
        p_bitbuffer_0,
        empty,
        add_i307_cast,
        codeOffsets_load,
        codeOffsets_load_1,
        codeOffsets_load_2,
        codeOffsets_load_3,
        codeOffsets_load_4,
        codeOffsets_load_5,
        codeOffsets_load_6,
        bl1Codes_address0,
        bl1Codes_ce0,
        bl1Codes_q0,
        bl2Codes_address0,
        bl2Codes_ce0,
        bl2Codes_q0,
        bl3Codes_address0,
        bl3Codes_ce0,
        bl3Codes_q0,
        bl4Codes_address0,
        bl4Codes_ce0,
        bl4Codes_q0,
        bl5Codes_address0,
        bl5Codes_ce0,
        bl5Codes_q0,
        bl6Codes_address0,
        bl6Codes_ce0,
        bl6Codes_q0,
        bl7Codes_address0,
        bl7Codes_ce0,
        bl7Codes_q0,
        lens_address0,
        lens_ce0,
        lens_we0,
        lens_d0,
        write_flag_1_out,
        write_flag_1_out_ap_vld,
        bits_cntr_1_out,
        bits_cntr_1_out_ap_vld,
        write_flag3_1_out,
        write_flag3_1_out_ap_vld,
        p_bitbuffer_1_out,
        p_bitbuffer_1_out_ap_vld,
        done_1_out,
        done_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] huffman_input_stream_dout;
input   huffman_input_stream_empty_n;
output   huffman_input_stream_read;
input  [0:0] huffman_eos_stream_dout;
input   huffman_eos_stream_empty_n;
output   huffman_eos_stream_read;
input  [0:0] write_flag_0;
input  [5:0] empty_39;
input  [31:0] p_bitbuffer_0;
input  [0:0] empty;
input  [8:0] add_i307_cast;
input  [15:0] codeOffsets_load;
input  [15:0] codeOffsets_load_1;
input  [15:0] codeOffsets_load_2;
input  [15:0] codeOffsets_load_3;
input  [15:0] codeOffsets_load_4;
input  [15:0] codeOffsets_load_5;
input  [15:0] codeOffsets_load_6;
output  [0:0] bl1Codes_address0;
output   bl1Codes_ce0;
input  [8:0] bl1Codes_q0;
output  [1:0] bl2Codes_address0;
output   bl2Codes_ce0;
input  [8:0] bl2Codes_q0;
output  [2:0] bl3Codes_address0;
output   bl3Codes_ce0;
input  [8:0] bl3Codes_q0;
output  [3:0] bl4Codes_address0;
output   bl4Codes_ce0;
input  [8:0] bl4Codes_q0;
output  [4:0] bl5Codes_address0;
output   bl5Codes_ce0;
input  [8:0] bl5Codes_q0;
output  [5:0] bl6Codes_address0;
output   bl6Codes_ce0;
input  [8:0] bl6Codes_q0;
output  [6:0] bl7Codes_address0;
output   bl7Codes_ce0;
input  [8:0] bl7Codes_q0;
output  [8:0] lens_address0;
output   lens_ce0;
output   lens_we0;
output  [4:0] lens_d0;
output  [0:0] write_flag_1_out;
output   write_flag_1_out_ap_vld;
output  [5:0] bits_cntr_1_out;
output   bits_cntr_1_out_ap_vld;
output  [0:0] write_flag3_1_out;
output   write_flag3_1_out_ap_vld;
output  [31:0] p_bitbuffer_1_out;
output   p_bitbuffer_1_out_ap_vld;
output  [0:0] done_1_out;
output   done_1_out_ap_vld;

reg ap_idle;
reg huffman_input_stream_read;
reg huffman_eos_stream_read;
reg bl1Codes_ce0;
reg bl2Codes_ce0;
reg bl3Codes_ce0;
reg bl4Codes_ce0;
reg bl5Codes_ce0;
reg bl6Codes_ce0;
reg bl7Codes_ce0;
reg lens_ce0;
reg lens_we0;
reg write_flag_1_out_ap_vld;
reg bits_cntr_1_out_ap_vld;
reg write_flag3_1_out_ap_vld;
reg p_bitbuffer_1_out_ap_vld;
reg done_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] or_ln469_reg_1606;
wire   [0:0] or_ln529_fu_1319_p2;
reg    ap_predicate_op219_read_state3;
reg    ap_predicate_op225_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] or_ln469_fu_559_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    huffman_input_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    huffman_eos_stream_blk_n;
reg   [0:0] isExtra_reg_461;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] add_i307_cast_cast_fu_472_p1;
reg   [15:0] add_i307_cast_cast_reg_1580;
reg   [7:0] copy_4_reg_1585;
reg   [31:0] p_bitbuffer_1_load_reg_1591;
reg   [15:0] dynamic_curInSize_4_reg_1600;
wire   [3:0] current_bits_14_fu_800_p3;
reg   [3:0] current_bits_14_reg_1610;
wire   [2:0] trunc_ln467_fu_808_p1;
reg   [2:0] trunc_ln467_reg_1616;
wire   [0:0] icmp_ln496_fu_847_p2;
reg   [0:0] icmp_ln496_reg_1656;
wire   [0:0] isExtra_4_fu_1112_p2;
wire    ap_loop_init;
wire   [63:0] zext_ln478_fu_812_p1;
wire   [63:0] zext_ln479_fu_817_p1;
wire   [63:0] zext_ln480_fu_822_p1;
wire   [63:0] zext_ln481_fu_827_p1;
wire   [63:0] zext_ln482_fu_832_p1;
wire   [63:0] zext_ln483_fu_837_p1;
wire   [63:0] zext_ln484_fu_842_p1;
wire   [63:0] zext_ln526_fu_1275_p1;
wire   [0:0] icmp_ln525_fu_1259_p2;
reg   [15:0] len_fu_190;
wire   [15:0] len_3_fu_1251_p3;
reg   [7:0] copy_fu_194;
wire   [7:0] copy_7_fu_1279_p2;
reg   [7:0] ap_sig_allocacmp_copy_4;
reg   [3:0] current_bits_fu_198;
reg   [2:0] extra_fu_202;
wire   [2:0] extra_3_fu_1158_p3;
reg   [5:0] empty_56_fu_206;
wire   [5:0] add_ln533_fu_1361_p2;
wire   [5:0] select_ln496_2_fu_1081_p3;
reg   [0:0] empty_57_fu_210;
wire   [0:0] or_ln529_1_fu_1331_p2;
reg   [31:0] p_bitbuffer_1_fu_214;
wire   [31:0] add_ln531_fu_1355_p2;
wire   [31:0] bitbuffer_42_fu_1065_p3;
reg   [31:0] ap_sig_allocacmp_p_bitbuffer_1_load;
reg   [5:0] bits_cntr_1_fu_218;
wire   [5:0] select_ln496_fu_1050_p3;
reg   [0:0] write_flag_1_fu_222;
wire   [0:0] or_ln496_1_fu_1025_p2;
reg   [15:0] dynamic_curInSize_fu_226;
wire   [15:0] dynamic_curInSize_5_fu_1270_p2;
reg   [15:0] ap_sig_allocacmp_dynamic_curInSize_4;
reg   [0:0] done_1_fu_230;
reg   [0:0] write_flag3_1_fu_234;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln469_fu_548_p2;
wire   [0:0] icmp_ln469_1_fu_553_p2;
wire   [0:0] trunc_ln473_fu_565_p1;
wire   [15:0] zext_ln473_fu_569_p1;
wire   [0:0] icmp_ln473_fu_573_p2;
wire   [0:0] val_fu_578_p2;
reg   [1:0] tmp_s_fu_592_p4;
wire   [15:0] zext_ln473_1_fu_602_p1;
wire   [0:0] icmp_ln473_1_fu_606_p2;
reg   [2:0] tmp_15_fu_617_p4;
wire   [15:0] zext_ln473_2_fu_627_p1;
wire   [0:0] icmp_ln473_2_fu_631_p2;
wire   [0:0] val_31_fu_636_p2;
wire   [0:0] val_30_fu_611_p2;
wire   [0:0] or_ln474_fu_650_p2;
wire   [3:0] select_ln474_fu_642_p3;
wire   [3:0] current_bits_11_fu_584_p3;
reg   [3:0] tmp_16_fu_664_p4;
wire   [15:0] zext_ln473_3_fu_674_p1;
wire   [0:0] icmp_ln473_3_fu_678_p2;
reg   [4:0] tmp_17_fu_689_p4;
wire   [15:0] zext_ln473_4_fu_699_p1;
wire   [0:0] icmp_ln473_4_fu_703_p2;
wire   [0:0] val_33_fu_708_p2;
wire   [0:0] val_32_fu_683_p2;
wire   [0:0] or_ln474_1_fu_722_p2;
wire   [3:0] select_ln474_2_fu_714_p3;
wire   [3:0] current_bits_12_fu_656_p3;
reg   [5:0] tmp_18_fu_736_p4;
wire   [15:0] zext_ln473_5_fu_746_p1;
wire   [0:0] icmp_ln473_5_fu_750_p2;
reg   [6:0] tmp_19_fu_761_p4;
wire   [15:0] zext_ln473_6_fu_771_p1;
wire   [0:0] icmp_ln473_6_fu_775_p2;
wire   [0:0] val_35_fu_780_p2;
wire   [0:0] val_34_fu_755_p2;
wire   [0:0] or_ln474_2_fu_794_p2;
wire   [3:0] select_ln474_4_fu_786_p3;
wire   [3:0] current_bits_13_fu_728_p3;
wire   [4:0] current_val_fu_901_p2;
wire   [4:0] current_val_fu_901_p4;
wire   [4:0] current_val_fu_901_p6;
wire   [4:0] current_val_fu_901_p8;
wire   [4:0] current_val_fu_901_p10;
wire   [4:0] current_val_fu_901_p12;
wire   [4:0] current_val_fu_901_p14;
wire   [4:0] current_val_fu_901_p15;
wire   [31:0] zext_ln487_fu_936_p1;
wire   [31:0] zext_ln488_fu_944_p1;
wire   [7:0] zext_ln488_1_fu_948_p1;
wire   [7:0] shl_ln489_fu_957_p2;
wire   [7:0] trunc_ln489_fu_963_p1;
wire   [7:0] add_ln489_fu_966_p2;
wire   [7:0] extra_copy_fu_972_p2;
wire   [5:0] zext_ln495_fu_983_p1;
wire   [4:0] current_val_fu_901_p17;
wire   [0:0] tmp_21_fu_993_p3;
wire   [5:0] zext_ln499_fu_1007_p1;
wire   [0:0] or_ln496_fu_1020_p2;
wire   [5:0] sub_ln495_fu_987_p2;
wire   [0:0] sel_tmp3_fu_1039_p2;
wire   [0:0] and_ln496_fu_1045_p2;
wire   [5:0] sub_ln499_fu_1010_p2;
wire   [5:0] sel_tmp2_fu_1031_p3;
wire   [31:0] bitbuffer_40_fu_952_p2;
wire   [31:0] bitbuffer_fu_939_p2;
wire   [31:0] bitbuffer_41_fu_1058_p3;
wire   [5:0] sel_tmp10_fu_1073_p3;
wire   [0:0] xor_ln496_fu_1089_p2;
wire   [0:0] or_ln496_2_fu_1094_p2;
wire   [0:0] xor_ln497_fu_1001_p2;
wire   [0:0] icmp_ln502_fu_1106_p2;
wire   [0:0] icmp_ln502_1_fu_1124_p2;
wire   [0:0] and_ln502_1_fu_1130_p2;
wire   [0:0] and_ln502_fu_1118_p2;
wire   [0:0] or_ln497_fu_1100_p2;
wire   [0:0] or_ln502_fu_1144_p2;
wire   [2:0] select_ln502_fu_1136_p3;
wire   [2:0] select_ln502_1_fu_1150_p3;
wire   [7:0] copy_5_fu_978_p2;
wire   [0:0] and_ln497_1_fu_1174_p2;
wire   [7:0] sel_tmp32_fu_1166_p3;
wire   [7:0] select_ln497_fu_1180_p3;
wire   [0:0] icmp_ln502_2_fu_1195_p2;
wire   [0:0] icmp_ln502_3_fu_1201_p2;
wire   [0:0] and_ln502_2_fu_1207_p2;
wire   [0:0] and_ln502_3_fu_1213_p2;
wire   [7:0] select_ln496_3_fu_1188_p3;
wire   [3:0] trunc_ln462_fu_1016_p1;
wire   [3:0] len_2_fu_1227_p3;
wire   [0:0] and_ln502_4_fu_1239_p2;
wire   [0:0] or_ln502_1_fu_1245_p2;
wire   [15:0] zext_ln462_fu_1235_p1;
wire   [7:0] copy_6_fu_1219_p3;
wire   [1:0] tmp_22_fu_1303_p4;
wire   [0:0] icmp_ln529_fu_1313_p2;
wire   [0:0] xor_ln529_fu_1325_p2;
wire   [30:0] zext_ln531_fu_1337_p1;
wire   [30:0] zext_ln531_1_fu_1341_p1;
wire   [30:0] shl_ln531_fu_1345_p2;
wire   [31:0] zext_ln531_2_fu_1351_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_261;
reg    ap_condition_914;
reg    ap_condition_917;
reg    ap_condition_921;
wire   [2:0] current_val_fu_901_p1;
wire   [2:0] current_val_fu_901_p3;
wire   [2:0] current_val_fu_901_p5;
wire  signed [2:0] current_val_fu_901_p7;
wire  signed [2:0] current_val_fu_901_p9;
wire  signed [2:0] current_val_fu_901_p11;
wire  signed [2:0] current_val_fu_901_p13;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 len_fu_190 = 16'd0;
#0 copy_fu_194 = 8'd0;
#0 current_bits_fu_198 = 4'd0;
#0 extra_fu_202 = 3'd0;
#0 empty_56_fu_206 = 6'd0;
#0 empty_57_fu_210 = 1'd0;
#0 p_bitbuffer_1_fu_214 = 32'd0;
#0 bits_cntr_1_fu_218 = 6'd0;
#0 write_flag_1_fu_222 = 1'd0;
#0 dynamic_curInSize_fu_226 = 16'd0;
#0 done_1_fu_230 = 1'd0;
#0 write_flag3_1_fu_234 = 1'd0;
#0 ap_done_reg = 1'b0;
end

decompressor_kernel_sparsemux_15_3_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h1 ),
    .din0_WIDTH( 5 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 5 ),
    .CASE2( 3'h3 ),
    .din2_WIDTH( 5 ),
    .CASE3( 3'h4 ),
    .din3_WIDTH( 5 ),
    .CASE4( 3'h5 ),
    .din4_WIDTH( 5 ),
    .CASE5( 3'h6 ),
    .din5_WIDTH( 5 ),
    .CASE6( 3'h7 ),
    .din6_WIDTH( 5 ),
    .def_WIDTH( 5 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 5 ))
sparsemux_15_3_5_1_1_U260(
    .din0(current_val_fu_901_p2),
    .din1(current_val_fu_901_p4),
    .din2(current_val_fu_901_p6),
    .din3(current_val_fu_901_p8),
    .din4(current_val_fu_901_p10),
    .din5(current_val_fu_901_p12),
    .din6(current_val_fu_901_p14),
    .def(current_val_fu_901_p15),
    .sel(trunc_ln467_reg_1616),
    .dout(current_val_fu_901_p17)
);

decompressor_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            bits_cntr_1_fu_218 <= empty_39;
        end else if ((1'b1 == ap_condition_917)) begin
            bits_cntr_1_fu_218 <= select_ln496_fu_1050_p3;
        end else if ((1'b1 == ap_condition_914)) begin
            bits_cntr_1_fu_218 <= add_ln533_fu_1361_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (or_ln469_reg_1606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_fu_1259_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        copy_fu_194 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln469_reg_1606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_fu_1259_p2 == 1'd0))) begin
        copy_fu_194 <= copy_7_fu_1279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            current_bits_fu_198 <= 4'd0;
        end else if (((or_ln469_fu_559_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            current_bits_fu_198 <= current_bits_14_fu_800_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            done_1_fu_230 <= empty;
        end else if ((1'b1 == ap_condition_914)) begin
            done_1_fu_230 <= huffman_eos_stream_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dynamic_curInSize_fu_226 <= 16'd0;
        end else if ((1'b1 == ap_condition_921)) begin
            dynamic_curInSize_fu_226 <= dynamic_curInSize_5_fu_1270_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_56_fu_206 <= empty_39;
        end else if ((1'b1 == ap_condition_917)) begin
            empty_56_fu_206 <= select_ln496_2_fu_1081_p3;
        end else if ((1'b1 == ap_condition_914)) begin
            empty_56_fu_206 <= add_ln533_fu_1361_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_57_fu_210 <= empty;
        end else if ((1'b1 == ap_condition_917)) begin
            empty_57_fu_210 <= or_ln529_1_fu_1331_p2;
        end else if ((1'b1 == ap_condition_914)) begin
            empty_57_fu_210 <= huffman_eos_stream_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            extra_fu_202 <= 3'd0;
        end else if (((or_ln469_reg_1606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            extra_fu_202 <= extra_3_fu_1158_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln469_reg_1606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        isExtra_reg_461 <= isExtra_4_fu_1112_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        isExtra_reg_461 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            len_fu_190 <= 16'd0;
        end else if (((or_ln469_reg_1606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            len_fu_190 <= len_3_fu_1251_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_bitbuffer_1_fu_214 <= p_bitbuffer_0;
        end else if ((1'b1 == ap_condition_917)) begin
            p_bitbuffer_1_fu_214 <= bitbuffer_42_fu_1065_p3;
        end else if ((1'b1 == ap_condition_914)) begin
            p_bitbuffer_1_fu_214 <= add_ln531_fu_1355_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            write_flag3_1_fu_234 <= write_flag_0;
        end else if ((1'b1 == ap_condition_914)) begin
            write_flag3_1_fu_234 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            write_flag_1_fu_222 <= write_flag_0;
        end else if ((1'b1 == ap_condition_917)) begin
            write_flag_1_fu_222 <= or_ln496_1_fu_1025_p2;
        end else if ((1'b1 == ap_condition_914)) begin
            write_flag_1_fu_222 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i307_cast_cast_reg_1580[8 : 0] <= add_i307_cast_cast_fu_472_p1[8 : 0];
        copy_4_reg_1585 <= ap_sig_allocacmp_copy_4;
        current_bits_14_reg_1610 <= current_bits_14_fu_800_p3;
        dynamic_curInSize_4_reg_1600 <= ap_sig_allocacmp_dynamic_curInSize_4;
        icmp_ln496_reg_1656 <= icmp_ln496_fu_847_p2;
        or_ln469_reg_1606 <= or_ln469_fu_559_p2;
        trunc_ln467_reg_1616 <= trunc_ln467_fu_808_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_bitbuffer_1_load_reg_1591 <= ap_sig_allocacmp_p_bitbuffer_1_load;
    end
end

always @ (*) begin
    if (((or_ln469_fu_559_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_261)) begin
        if ((icmp_ln525_fu_1259_p2 == 1'd1)) begin
            ap_sig_allocacmp_copy_4 = 8'd0;
        end else if ((icmp_ln525_fu_1259_p2 == 1'd0)) begin
            ap_sig_allocacmp_copy_4 = copy_7_fu_1279_p2;
        end else begin
            ap_sig_allocacmp_copy_4 = copy_fu_194;
        end
    end else begin
        ap_sig_allocacmp_copy_4 = copy_fu_194;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln469_reg_1606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_fu_1259_p2 == 1'd0))) begin
        ap_sig_allocacmp_dynamic_curInSize_4 = dynamic_curInSize_5_fu_1270_p2;
    end else begin
        ap_sig_allocacmp_dynamic_curInSize_4 = dynamic_curInSize_fu_226;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_261)) begin
        if ((or_ln529_fu_1319_p2 == 1'd1)) begin
            ap_sig_allocacmp_p_bitbuffer_1_load = bitbuffer_42_fu_1065_p3;
        end else if ((or_ln529_fu_1319_p2 == 1'd0)) begin
            ap_sig_allocacmp_p_bitbuffer_1_load = add_ln531_fu_1355_p2;
        end else begin
            ap_sig_allocacmp_p_bitbuffer_1_load = p_bitbuffer_1_fu_214;
        end
    end else begin
        ap_sig_allocacmp_p_bitbuffer_1_load = p_bitbuffer_1_fu_214;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln469_reg_1606 == 1'd0))) begin
        bits_cntr_1_out_ap_vld = 1'b1;
    end else begin
        bits_cntr_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl1Codes_ce0 = 1'b1;
    end else begin
        bl1Codes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl2Codes_ce0 = 1'b1;
    end else begin
        bl2Codes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl3Codes_ce0 = 1'b1;
    end else begin
        bl3Codes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl4Codes_ce0 = 1'b1;
    end else begin
        bl4Codes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl5Codes_ce0 = 1'b1;
    end else begin
        bl5Codes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl6Codes_ce0 = 1'b1;
    end else begin
        bl6Codes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl7Codes_ce0 = 1'b1;
    end else begin
        bl7Codes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln469_reg_1606 == 1'd0))) begin
        done_1_out_ap_vld = 1'b1;
    end else begin
        done_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op225_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        huffman_eos_stream_blk_n = huffman_eos_stream_empty_n;
    end else begin
        huffman_eos_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op225_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        huffman_eos_stream_read = 1'b1;
    end else begin
        huffman_eos_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op219_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        huffman_input_stream_blk_n = huffman_input_stream_empty_n;
    end else begin
        huffman_input_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op219_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        huffman_input_stream_read = 1'b1;
    end else begin
        huffman_input_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lens_ce0 = 1'b1;
    end else begin
        lens_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln469_reg_1606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_fu_1259_p2 == 1'd0))) begin
        lens_we0 = 1'b1;
    end else begin
        lens_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln469_reg_1606 == 1'd0))) begin
        p_bitbuffer_1_out_ap_vld = 1'b1;
    end else begin
        p_bitbuffer_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln469_reg_1606 == 1'd0))) begin
        write_flag3_1_out_ap_vld = 1'b1;
    end else begin
        write_flag3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln469_reg_1606 == 1'd0))) begin
        write_flag_1_out_ap_vld = 1'b1;
    end else begin
        write_flag_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_i307_cast_cast_fu_472_p1 = add_i307_cast;

assign add_ln489_fu_966_p2 = ($signed(shl_ln489_fu_957_p2) + $signed(8'd255));

assign add_ln531_fu_1355_p2 = (zext_ln531_2_fu_1351_p1 + bitbuffer_42_fu_1065_p3);

assign add_ln533_fu_1361_p2 = (select_ln496_2_fu_1081_p3 + 6'd16);

assign and_ln496_fu_1045_p2 = (sel_tmp3_fu_1039_p2 & icmp_ln496_reg_1656);

assign and_ln497_1_fu_1174_p2 = (xor_ln497_fu_1001_p2 & and_ln496_fu_1045_p2);

assign and_ln502_1_fu_1130_p2 = (isExtra_4_fu_1112_p2 & icmp_ln502_1_fu_1124_p2);

assign and_ln502_2_fu_1207_p2 = (icmp_ln502_3_fu_1201_p2 & icmp_ln502_2_fu_1195_p2);

assign and_ln502_3_fu_1213_p2 = (isExtra_4_fu_1112_p2 & and_ln502_2_fu_1207_p2);

assign and_ln502_4_fu_1239_p2 = (tmp_21_fu_993_p3 & icmp_ln502_1_fu_1124_p2);

assign and_ln502_fu_1118_p2 = (isExtra_4_fu_1112_p2 & icmp_ln502_fu_1106_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op225_read_state3 == 1'b1) & (huffman_eos_stream_empty_n == 1'b0)) | ((ap_predicate_op219_read_state3 == 1'b1) & (huffman_input_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_261 = ((1'b0 == ap_block_pp0_stage0) & (or_ln469_reg_1606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_914 = ((or_ln529_fu_1319_p2 == 1'd0) & (or_ln469_reg_1606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_917 = ((or_ln529_fu_1319_p2 == 1'd1) & (or_ln469_reg_1606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_921 = ((or_ln469_reg_1606 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_fu_1259_p2 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op219_read_state3 = ((or_ln529_fu_1319_p2 == 1'd0) & (or_ln469_reg_1606 == 1'd1));
end

always @ (*) begin
    ap_predicate_op225_read_state3 = ((or_ln529_fu_1319_p2 == 1'd0) & (or_ln469_reg_1606 == 1'd1));
end

assign bitbuffer_40_fu_952_p2 = p_bitbuffer_1_load_reg_1591 >> zext_ln488_fu_944_p1;

assign bitbuffer_41_fu_1058_p3 = ((isExtra_reg_461[0:0] == 1'b1) ? bitbuffer_40_fu_952_p2 : p_bitbuffer_1_load_reg_1591);

assign bitbuffer_42_fu_1065_p3 = ((and_ln496_fu_1045_p2[0:0] == 1'b1) ? bitbuffer_fu_939_p2 : bitbuffer_41_fu_1058_p3);

assign bitbuffer_fu_939_p2 = p_bitbuffer_1_load_reg_1591 >> zext_ln487_fu_936_p1;

assign bits_cntr_1_out = bits_cntr_1_fu_218;

assign bl1Codes_address0 = zext_ln478_fu_812_p1;

assign bl2Codes_address0 = zext_ln479_fu_817_p1;

assign bl3Codes_address0 = zext_ln480_fu_822_p1;

assign bl4Codes_address0 = zext_ln481_fu_827_p1;

assign bl5Codes_address0 = zext_ln482_fu_832_p1;

assign bl6Codes_address0 = zext_ln483_fu_837_p1;

assign bl7Codes_address0 = zext_ln484_fu_842_p1;

assign copy_5_fu_978_p2 = (extra_copy_fu_972_p2 + copy_4_reg_1585);

assign copy_6_fu_1219_p3 = ((and_ln502_3_fu_1213_p2[0:0] == 1'b1) ? 8'd11 : select_ln496_3_fu_1188_p3);

assign copy_7_fu_1279_p2 = ($signed(copy_6_fu_1219_p3) + $signed(8'd255));

assign current_bits_11_fu_584_p3 = ((val_fu_578_p2[0:0] == 1'b1) ? 4'd1 : current_bits_fu_198);

assign current_bits_12_fu_656_p3 = ((or_ln474_fu_650_p2[0:0] == 1'b1) ? select_ln474_fu_642_p3 : current_bits_11_fu_584_p3);

assign current_bits_13_fu_728_p3 = ((or_ln474_1_fu_722_p2[0:0] == 1'b1) ? select_ln474_2_fu_714_p3 : current_bits_12_fu_656_p3);

assign current_bits_14_fu_800_p3 = ((or_ln474_2_fu_794_p2[0:0] == 1'b1) ? select_ln474_4_fu_786_p3 : current_bits_13_fu_728_p3);

assign current_val_fu_901_p10 = bl5Codes_q0[4:0];

assign current_val_fu_901_p12 = bl6Codes_q0[4:0];

assign current_val_fu_901_p14 = bl7Codes_q0[4:0];

assign current_val_fu_901_p15 = 'bx;

assign current_val_fu_901_p2 = bl1Codes_q0[4:0];

assign current_val_fu_901_p4 = bl2Codes_q0[4:0];

assign current_val_fu_901_p6 = bl3Codes_q0[4:0];

assign current_val_fu_901_p8 = bl4Codes_q0[4:0];

assign done_1_out = done_1_fu_230;

assign dynamic_curInSize_5_fu_1270_p2 = (dynamic_curInSize_4_reg_1600 + 16'd1);

assign extra_3_fu_1158_p3 = ((or_ln502_fu_1144_p2[0:0] == 1'b1) ? select_ln502_fu_1136_p3 : select_ln502_1_fu_1150_p3);

assign extra_copy_fu_972_p2 = (trunc_ln489_fu_963_p1 & add_ln489_fu_966_p2);

assign icmp_ln469_1_fu_553_p2 = ((ap_sig_allocacmp_copy_4 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln469_fu_548_p2 = ((ap_sig_allocacmp_dynamic_curInSize_4 < add_i307_cast_cast_reg_1580) ? 1'b1 : 1'b0);

assign icmp_ln473_1_fu_606_p2 = ((zext_ln473_1_fu_602_p1 < codeOffsets_load_1) ? 1'b1 : 1'b0);

assign icmp_ln473_2_fu_631_p2 = ((zext_ln473_2_fu_627_p1 < codeOffsets_load_2) ? 1'b1 : 1'b0);

assign icmp_ln473_3_fu_678_p2 = ((zext_ln473_3_fu_674_p1 < codeOffsets_load_3) ? 1'b1 : 1'b0);

assign icmp_ln473_4_fu_703_p2 = ((zext_ln473_4_fu_699_p1 < codeOffsets_load_4) ? 1'b1 : 1'b0);

assign icmp_ln473_5_fu_750_p2 = ((zext_ln473_5_fu_746_p1 < codeOffsets_load_5) ? 1'b1 : 1'b0);

assign icmp_ln473_6_fu_775_p2 = ((zext_ln473_6_fu_771_p1 < codeOffsets_load_6) ? 1'b1 : 1'b0);

assign icmp_ln473_fu_573_p2 = ((zext_ln473_fu_569_p1 < codeOffsets_load) ? 1'b1 : 1'b0);

assign icmp_ln496_fu_847_p2 = ((ap_sig_allocacmp_copy_4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln502_1_fu_1124_p2 = ((current_val_fu_901_p17 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln502_2_fu_1195_p2 = ((current_val_fu_901_p17 != 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln502_3_fu_1201_p2 = ((current_val_fu_901_p17 != 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln502_fu_1106_p2 = ((current_val_fu_901_p17 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln525_fu_1259_p2 = ((copy_6_fu_1219_p3 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln529_fu_1313_p2 = ((tmp_22_fu_1303_p4 != 2'd0) ? 1'b1 : 1'b0);

assign isExtra_4_fu_1112_p2 = (tmp_21_fu_993_p3 & and_ln496_fu_1045_p2);

assign len_2_fu_1227_p3 = ((and_ln497_1_fu_1174_p2[0:0] == 1'b1) ? trunc_ln462_fu_1016_p1 : 4'd0);

assign len_3_fu_1251_p3 = ((or_ln502_1_fu_1245_p2[0:0] == 1'b1) ? len_fu_190 : zext_ln462_fu_1235_p1);

assign lens_address0 = zext_ln526_fu_1275_p1;

assign lens_d0 = len_3_fu_1251_p3[4:0];

assign or_ln469_fu_559_p2 = (icmp_ln469_fu_548_p2 | icmp_ln469_1_fu_553_p2);

assign or_ln474_1_fu_722_p2 = (val_33_fu_708_p2 | val_32_fu_683_p2);

assign or_ln474_2_fu_794_p2 = (val_35_fu_780_p2 | val_34_fu_755_p2);

assign or_ln474_fu_650_p2 = (val_31_fu_636_p2 | val_30_fu_611_p2);

assign or_ln496_1_fu_1025_p2 = (write_flag_1_fu_222 | or_ln496_fu_1020_p2);

assign or_ln496_2_fu_1094_p2 = (xor_ln496_fu_1089_p2 | isExtra_reg_461);

assign or_ln496_fu_1020_p2 = (isExtra_reg_461 | icmp_ln496_reg_1656);

assign or_ln497_fu_1100_p2 = (xor_ln497_fu_1001_p2 | or_ln496_2_fu_1094_p2);

assign or_ln502_1_fu_1245_p2 = (or_ln496_2_fu_1094_p2 | and_ln502_4_fu_1239_p2);

assign or_ln502_fu_1144_p2 = (and_ln502_fu_1118_p2 | and_ln502_1_fu_1130_p2);

assign or_ln529_1_fu_1331_p2 = (xor_ln529_fu_1325_p2 | empty_57_fu_210);

assign or_ln529_fu_1319_p2 = (icmp_ln529_fu_1313_p2 | empty_57_fu_210);

assign p_bitbuffer_1_out = p_bitbuffer_1_load_reg_1591;

assign sel_tmp10_fu_1073_p3 = ((isExtra_reg_461[0:0] == 1'b1) ? sub_ln495_fu_987_p2 : empty_56_fu_206);

assign sel_tmp2_fu_1031_p3 = ((isExtra_reg_461[0:0] == 1'b1) ? sub_ln495_fu_987_p2 : bits_cntr_1_fu_218);

assign sel_tmp32_fu_1166_p3 = ((isExtra_reg_461[0:0] == 1'b1) ? copy_5_fu_978_p2 : 8'd3);

assign sel_tmp3_fu_1039_p2 = (isExtra_reg_461 ^ 1'd1);

assign select_ln474_2_fu_714_p3 = ((val_33_fu_708_p2[0:0] == 1'b1) ? 4'd5 : 4'd4);

assign select_ln474_4_fu_786_p3 = ((val_35_fu_780_p2[0:0] == 1'b1) ? 4'd7 : 4'd6);

assign select_ln474_fu_642_p3 = ((val_31_fu_636_p2[0:0] == 1'b1) ? 4'd3 : 4'd2);

assign select_ln496_2_fu_1081_p3 = ((and_ln496_fu_1045_p2[0:0] == 1'b1) ? sub_ln499_fu_1010_p2 : sel_tmp10_fu_1073_p3);

assign select_ln496_3_fu_1188_p3 = ((or_ln496_fu_1020_p2[0:0] == 1'b1) ? select_ln497_fu_1180_p3 : copy_4_reg_1585);

assign select_ln496_fu_1050_p3 = ((and_ln496_fu_1045_p2[0:0] == 1'b1) ? sub_ln499_fu_1010_p2 : sel_tmp2_fu_1031_p3);

assign select_ln497_fu_1180_p3 = ((and_ln497_1_fu_1174_p2[0:0] == 1'b1) ? 8'd1 : sel_tmp32_fu_1166_p3);

assign select_ln502_1_fu_1150_p3 = ((or_ln497_fu_1100_p2[0:0] == 1'b1) ? extra_fu_202 : 3'd7);

assign select_ln502_fu_1136_p3 = ((and_ln502_1_fu_1130_p2[0:0] == 1'b1) ? 3'd2 : 3'd3);

assign shl_ln489_fu_957_p2 = 8'd1 << zext_ln488_1_fu_948_p1;

assign shl_ln531_fu_1345_p2 = zext_ln531_fu_1337_p1 << zext_ln531_1_fu_1341_p1;

assign sub_ln495_fu_987_p2 = (empty_56_fu_206 - zext_ln495_fu_983_p1);

assign sub_ln499_fu_1010_p2 = (empty_56_fu_206 - zext_ln499_fu_1007_p1);

integer ap_tvar_int_0;

always @ (ap_sig_allocacmp_p_bitbuffer_1_load) begin
    for (ap_tvar_int_0 = 3 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 2 - 0) begin
            tmp_15_fu_617_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_15_fu_617_p4[ap_tvar_int_0] = ap_sig_allocacmp_p_bitbuffer_1_load[2 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (ap_sig_allocacmp_p_bitbuffer_1_load) begin
    for (ap_tvar_int_1 = 4 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 3 - 0) begin
            tmp_16_fu_664_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_16_fu_664_p4[ap_tvar_int_1] = ap_sig_allocacmp_p_bitbuffer_1_load[3 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (ap_sig_allocacmp_p_bitbuffer_1_load) begin
    for (ap_tvar_int_2 = 5 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 4 - 0) begin
            tmp_17_fu_689_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_17_fu_689_p4[ap_tvar_int_2] = ap_sig_allocacmp_p_bitbuffer_1_load[4 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (ap_sig_allocacmp_p_bitbuffer_1_load) begin
    for (ap_tvar_int_3 = 6 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 5 - 0) begin
            tmp_18_fu_736_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_18_fu_736_p4[ap_tvar_int_3] = ap_sig_allocacmp_p_bitbuffer_1_load[5 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (ap_sig_allocacmp_p_bitbuffer_1_load) begin
    for (ap_tvar_int_4 = 7 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 6 - 0) begin
            tmp_19_fu_761_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_19_fu_761_p4[ap_tvar_int_4] = ap_sig_allocacmp_p_bitbuffer_1_load[6 - ap_tvar_int_4];
        end
    end
end

assign tmp_21_fu_993_p3 = current_val_fu_901_p17[32'd4];

assign tmp_22_fu_1303_p4 = {{select_ln496_2_fu_1081_p3[5:4]}};

integer ap_tvar_int_5;

always @ (ap_sig_allocacmp_p_bitbuffer_1_load) begin
    for (ap_tvar_int_5 = 2 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 1 - 0) begin
            tmp_s_fu_592_p4[ap_tvar_int_5] = 1'b0;
        end else begin
            tmp_s_fu_592_p4[ap_tvar_int_5] = ap_sig_allocacmp_p_bitbuffer_1_load[1 - ap_tvar_int_5];
        end
    end
end

assign trunc_ln462_fu_1016_p1 = current_val_fu_901_p17[3:0];

assign trunc_ln467_fu_808_p1 = current_bits_14_fu_800_p3[2:0];

assign trunc_ln473_fu_565_p1 = ap_sig_allocacmp_p_bitbuffer_1_load[0:0];

assign trunc_ln489_fu_963_p1 = p_bitbuffer_1_load_reg_1591[7:0];

assign val_30_fu_611_p2 = (icmp_ln473_1_fu_606_p2 ^ 1'd1);

assign val_31_fu_636_p2 = (icmp_ln473_2_fu_631_p2 ^ 1'd1);

assign val_32_fu_683_p2 = (icmp_ln473_3_fu_678_p2 ^ 1'd1);

assign val_33_fu_708_p2 = (icmp_ln473_4_fu_703_p2 ^ 1'd1);

assign val_34_fu_755_p2 = (icmp_ln473_5_fu_750_p2 ^ 1'd1);

assign val_35_fu_780_p2 = (icmp_ln473_6_fu_775_p2 ^ 1'd1);

assign val_fu_578_p2 = (icmp_ln473_fu_573_p2 ^ 1'd1);

assign write_flag3_1_out = write_flag3_1_fu_234;

assign write_flag_1_out = write_flag_1_fu_222;

assign xor_ln496_fu_1089_p2 = (icmp_ln496_reg_1656 ^ 1'd1);

assign xor_ln497_fu_1001_p2 = (tmp_21_fu_993_p3 ^ 1'd1);

assign xor_ln529_fu_1325_p2 = (icmp_ln529_fu_1313_p2 ^ 1'd1);

assign zext_ln462_fu_1235_p1 = len_2_fu_1227_p3;

assign zext_ln473_1_fu_602_p1 = tmp_s_fu_592_p4;

assign zext_ln473_2_fu_627_p1 = tmp_15_fu_617_p4;

assign zext_ln473_3_fu_674_p1 = tmp_16_fu_664_p4;

assign zext_ln473_4_fu_699_p1 = tmp_17_fu_689_p4;

assign zext_ln473_5_fu_746_p1 = tmp_18_fu_736_p4;

assign zext_ln473_6_fu_771_p1 = tmp_19_fu_761_p4;

assign zext_ln473_fu_569_p1 = trunc_ln473_fu_565_p1;

assign zext_ln478_fu_812_p1 = trunc_ln473_fu_565_p1;

assign zext_ln479_fu_817_p1 = tmp_s_fu_592_p4;

assign zext_ln480_fu_822_p1 = tmp_15_fu_617_p4;

assign zext_ln481_fu_827_p1 = tmp_16_fu_664_p4;

assign zext_ln482_fu_832_p1 = tmp_17_fu_689_p4;

assign zext_ln483_fu_837_p1 = tmp_18_fu_736_p4;

assign zext_ln484_fu_842_p1 = tmp_19_fu_761_p4;

assign zext_ln487_fu_936_p1 = current_bits_14_reg_1610;

assign zext_ln488_1_fu_948_p1 = extra_fu_202;

assign zext_ln488_fu_944_p1 = extra_fu_202;

assign zext_ln495_fu_983_p1 = extra_fu_202;

assign zext_ln499_fu_1007_p1 = current_bits_14_reg_1610;

assign zext_ln526_fu_1275_p1 = dynamic_curInSize_4_reg_1600;

assign zext_ln531_1_fu_1341_p1 = select_ln496_2_fu_1081_p3;

assign zext_ln531_2_fu_1351_p1 = shl_ln531_fu_1345_p2;

assign zext_ln531_fu_1337_p1 = huffman_input_stream_dout;

always @ (posedge ap_clk) begin
    add_i307_cast_cast_reg_1580[15:9] <= 7'b0000000;
end

endmodule //decompressor_kernel_byteGen_Pipeline_bytegen
