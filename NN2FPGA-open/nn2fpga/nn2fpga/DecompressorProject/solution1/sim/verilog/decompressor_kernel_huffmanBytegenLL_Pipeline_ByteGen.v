// ==============================================================
// Generated by Vitis HLS v2022.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module decompressor_kernel_huffmanBytegenLL_Pipeline_ByteGen (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lz77_output_stream_din,
        lz77_output_stream_full_n,
        lz77_output_stream_write,
        huffman_input_stream_dout,
        huffman_input_stream_empty_n,
        huffman_input_stream_read,
        huffman_eos_stream_dout,
        huffman_eos_stream_empty_n,
        huffman_eos_stream_read,
        p_read2,
        p_bitbuffer_read,
        bits_cntr_read,
        codeOffsets_0_load,
        codeOffsets_0_load_1,
        codeOffsets_0_load_2,
        codeOffsets_0_load_3,
        codeOffsets_0_load_4,
        codeOffsets_0_load_5,
        codeOffsets_0_load_6,
        codeOffsets_0_load_7,
        codeOffsets_0_load_8,
        codeOffsets_0_load_9,
        codeOffsets_0_load_10,
        codeOffsets_0_load_11,
        codeOffsets_0_load_12,
        codeOffsets_0_load_13,
        codeOffsets_0_load_14,
        codeOffsets_1_load,
        codeOffsets_1_load_1,
        codeOffsets_1_load_2,
        codeOffsets_1_load_3,
        codeOffsets_1_load_4,
        codeOffsets_1_load_5,
        codeOffsets_1_load_6,
        codeOffsets_1_load_7,
        codeOffsets_1_load_8,
        codeOffsets_1_load_9,
        codeOffsets_1_load_10,
        codeOffsets_1_load_11,
        codeOffsets_1_load_12,
        codeOffsets_1_load_13,
        codeOffsets_1_load_14,
        bl1Codes_0_address0,
        bl1Codes_0_ce0,
        bl1Codes_0_q0,
        bl1Codes_1_address0,
        bl1Codes_1_ce0,
        bl1Codes_1_q0,
        bl2Codes_0_address0,
        bl2Codes_0_ce0,
        bl2Codes_0_q0,
        bl2Codes_1_address0,
        bl2Codes_1_ce0,
        bl2Codes_1_q0,
        bl3Codes_0_address0,
        bl3Codes_0_ce0,
        bl3Codes_0_q0,
        bl3Codes_1_address0,
        bl3Codes_1_ce0,
        bl3Codes_1_q0,
        bl4Codes_0_address0,
        bl4Codes_0_ce0,
        bl4Codes_0_q0,
        bl4Codes_1_address0,
        bl4Codes_1_ce0,
        bl4Codes_1_q0,
        bl5Codes_0_address0,
        bl5Codes_0_ce0,
        bl5Codes_0_q0,
        bl5Codes_1_address0,
        bl5Codes_1_ce0,
        bl5Codes_1_q0,
        bl6Codes_0_address0,
        bl6Codes_0_ce0,
        bl6Codes_0_q0,
        bl6Codes_1_address0,
        bl6Codes_1_ce0,
        bl6Codes_1_q0,
        bl7Codes_0_address0,
        bl7Codes_0_ce0,
        bl7Codes_0_q0,
        bl7Codes_1_address0,
        bl7Codes_1_ce0,
        bl7Codes_1_q0,
        bl8Codes_0_address0,
        bl8Codes_0_ce0,
        bl8Codes_0_q0,
        bl8Codes_1_address0,
        bl8Codes_1_ce0,
        bl8Codes_1_q0,
        bl9Codes_0_address0,
        bl9Codes_0_ce0,
        bl9Codes_0_q0,
        bl9Codes_1_address0,
        bl9Codes_1_ce0,
        bl9Codes_1_q0,
        bl10Codes_0_address0,
        bl10Codes_0_ce0,
        bl10Codes_0_q0,
        bl10Codes_1_address0,
        bl10Codes_1_ce0,
        bl10Codes_1_q0,
        bl11Codes_0_address0,
        bl11Codes_0_ce0,
        bl11Codes_0_q0,
        bl11Codes_1_address0,
        bl11Codes_1_ce0,
        bl11Codes_1_q0,
        bl12Codes_0_address0,
        bl12Codes_0_ce0,
        bl12Codes_0_q0,
        bl12Codes_1_address0,
        bl12Codes_1_ce0,
        bl12Codes_1_q0,
        bl13Codes_0_address0,
        bl13Codes_0_ce0,
        bl13Codes_0_q0,
        bl13Codes_1_address0,
        bl13Codes_1_ce0,
        bl13Codes_1_q0,
        bl14Codes_0_address0,
        bl14Codes_0_ce0,
        bl14Codes_0_q0,
        bl14Codes_1_address0,
        bl14Codes_1_ce0,
        bl14Codes_1_q0,
        bl15Codes_0_address0,
        bl15Codes_0_ce0,
        bl15Codes_0_q0,
        bl15Codes_1_address0,
        bl15Codes_1_ce0,
        bl15Codes_1_q0,
        ignoreValue_cast,
        done_0_out,
        done_0_out_ap_vld,
        buffer_out,
        buffer_out_ap_vld,
        counter_out,
        counter_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] lz77_output_stream_din;
input   lz77_output_stream_full_n;
output   lz77_output_stream_write;
input  [15:0] huffman_input_stream_dout;
input   huffman_input_stream_empty_n;
output   huffman_input_stream_read;
input  [0:0] huffman_eos_stream_dout;
input   huffman_eos_stream_empty_n;
output   huffman_eos_stream_read;
input  [0:0] p_read2;
input  [31:0] p_bitbuffer_read;
input  [5:0] bits_cntr_read;
input  [15:0] codeOffsets_0_load;
input  [15:0] codeOffsets_0_load_1;
input  [15:0] codeOffsets_0_load_2;
input  [15:0] codeOffsets_0_load_3;
input  [15:0] codeOffsets_0_load_4;
input  [15:0] codeOffsets_0_load_5;
input  [15:0] codeOffsets_0_load_6;
input  [15:0] codeOffsets_0_load_7;
input  [15:0] codeOffsets_0_load_8;
input  [15:0] codeOffsets_0_load_9;
input  [15:0] codeOffsets_0_load_10;
input  [15:0] codeOffsets_0_load_11;
input  [15:0] codeOffsets_0_load_12;
input  [15:0] codeOffsets_0_load_13;
input  [15:0] codeOffsets_0_load_14;
input  [15:0] codeOffsets_1_load;
input  [15:0] codeOffsets_1_load_1;
input  [15:0] codeOffsets_1_load_2;
input  [15:0] codeOffsets_1_load_3;
input  [15:0] codeOffsets_1_load_4;
input  [15:0] codeOffsets_1_load_5;
input  [15:0] codeOffsets_1_load_6;
input  [15:0] codeOffsets_1_load_7;
input  [15:0] codeOffsets_1_load_8;
input  [15:0] codeOffsets_1_load_9;
input  [15:0] codeOffsets_1_load_10;
input  [15:0] codeOffsets_1_load_11;
input  [15:0] codeOffsets_1_load_12;
input  [15:0] codeOffsets_1_load_13;
input  [15:0] codeOffsets_1_load_14;
output  [0:0] bl1Codes_0_address0;
output   bl1Codes_0_ce0;
input  [8:0] bl1Codes_0_q0;
output  [0:0] bl1Codes_1_address0;
output   bl1Codes_1_ce0;
input  [8:0] bl1Codes_1_q0;
output  [1:0] bl2Codes_0_address0;
output   bl2Codes_0_ce0;
input  [8:0] bl2Codes_0_q0;
output  [1:0] bl2Codes_1_address0;
output   bl2Codes_1_ce0;
input  [8:0] bl2Codes_1_q0;
output  [2:0] bl3Codes_0_address0;
output   bl3Codes_0_ce0;
input  [8:0] bl3Codes_0_q0;
output  [2:0] bl3Codes_1_address0;
output   bl3Codes_1_ce0;
input  [8:0] bl3Codes_1_q0;
output  [3:0] bl4Codes_0_address0;
output   bl4Codes_0_ce0;
input  [8:0] bl4Codes_0_q0;
output  [3:0] bl4Codes_1_address0;
output   bl4Codes_1_ce0;
input  [8:0] bl4Codes_1_q0;
output  [4:0] bl5Codes_0_address0;
output   bl5Codes_0_ce0;
input  [8:0] bl5Codes_0_q0;
output  [4:0] bl5Codes_1_address0;
output   bl5Codes_1_ce0;
input  [8:0] bl5Codes_1_q0;
output  [5:0] bl6Codes_0_address0;
output   bl6Codes_0_ce0;
input  [8:0] bl6Codes_0_q0;
output  [5:0] bl6Codes_1_address0;
output   bl6Codes_1_ce0;
input  [8:0] bl6Codes_1_q0;
output  [6:0] bl7Codes_0_address0;
output   bl7Codes_0_ce0;
input  [8:0] bl7Codes_0_q0;
output  [6:0] bl7Codes_1_address0;
output   bl7Codes_1_ce0;
input  [8:0] bl7Codes_1_q0;
output  [7:0] bl8Codes_0_address0;
output   bl8Codes_0_ce0;
input  [8:0] bl8Codes_0_q0;
output  [7:0] bl8Codes_1_address0;
output   bl8Codes_1_ce0;
input  [8:0] bl8Codes_1_q0;
output  [7:0] bl9Codes_0_address0;
output   bl9Codes_0_ce0;
input  [8:0] bl9Codes_0_q0;
output  [7:0] bl9Codes_1_address0;
output   bl9Codes_1_ce0;
input  [8:0] bl9Codes_1_q0;
output  [7:0] bl10Codes_0_address0;
output   bl10Codes_0_ce0;
input  [8:0] bl10Codes_0_q0;
output  [7:0] bl10Codes_1_address0;
output   bl10Codes_1_ce0;
input  [8:0] bl10Codes_1_q0;
output  [7:0] bl11Codes_0_address0;
output   bl11Codes_0_ce0;
input  [8:0] bl11Codes_0_q0;
output  [7:0] bl11Codes_1_address0;
output   bl11Codes_1_ce0;
input  [8:0] bl11Codes_1_q0;
output  [7:0] bl12Codes_0_address0;
output   bl12Codes_0_ce0;
input  [8:0] bl12Codes_0_q0;
output  [7:0] bl12Codes_1_address0;
output   bl12Codes_1_ce0;
input  [8:0] bl12Codes_1_q0;
output  [7:0] bl13Codes_0_address0;
output   bl13Codes_0_ce0;
input  [8:0] bl13Codes_0_q0;
output  [7:0] bl13Codes_1_address0;
output   bl13Codes_1_ce0;
input  [8:0] bl13Codes_1_q0;
output  [7:0] bl14Codes_0_address0;
output   bl14Codes_0_ce0;
input  [8:0] bl14Codes_0_q0;
output  [7:0] bl14Codes_1_address0;
output   bl14Codes_1_ce0;
input  [8:0] bl14Codes_1_q0;
output  [7:0] bl15Codes_0_address0;
output   bl15Codes_0_ce0;
input  [8:0] bl15Codes_0_q0;
output  [7:0] bl15Codes_1_address0;
output   bl15Codes_1_ce0;
input  [8:0] bl15Codes_1_q0;
input  [2:0] ignoreValue_cast;
output  [0:0] done_0_out;
output   done_0_out_ap_vld;
output  [31:0] buffer_out;
output   buffer_out_ap_vld;
output  [5:0] counter_out;
output   counter_out_ap_vld;

reg ap_idle;
reg lz77_output_stream_write;
reg huffman_input_stream_read;
reg huffman_eos_stream_read;
reg bl1Codes_0_ce0;
reg bl1Codes_1_ce0;
reg bl2Codes_0_ce0;
reg bl2Codes_1_ce0;
reg bl3Codes_0_ce0;
reg bl3Codes_1_ce0;
reg bl4Codes_0_ce0;
reg bl4Codes_1_ce0;
reg bl5Codes_0_ce0;
reg bl5Codes_1_ce0;
reg bl6Codes_0_ce0;
reg bl6Codes_1_ce0;
reg bl7Codes_0_ce0;
reg bl7Codes_1_ce0;
reg bl8Codes_0_ce0;
reg bl8Codes_1_ce0;
reg bl9Codes_0_ce0;
reg bl9Codes_1_ce0;
reg bl10Codes_0_ce0;
reg bl10Codes_1_ce0;
reg bl11Codes_0_ce0;
reg bl11Codes_1_ce0;
reg bl12Codes_0_ce0;
reg bl12Codes_1_ce0;
reg bl13Codes_0_ce0;
reg bl13Codes_1_ce0;
reg bl14Codes_0_ce0;
reg bl14Codes_1_ce0;
reg bl15Codes_0_ce0;
reg bl15Codes_1_ce0;
reg done_0_out_ap_vld;
reg buffer_out_ap_vld;
reg counter_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg   [0:0] or_ln331_reg_2971;
wire   [0:0] icmp_ln427_fu_2812_p2;
reg    ap_predicate_op447_read_state2;
reg    ap_predicate_op448_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] or_ln331_fu_1112_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [4:0] lext_address0;
reg    lext_ce0;
wire   [3:0] lext_q0;
wire   [4:0] dext_address0;
reg    dext_ce0;
wire   [3:0] dext_q0;
reg    lz77_output_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    huffman_input_stream_blk_n;
reg    huffman_eos_stream_blk_n;
reg   [0:0] done_0_reg_1026;
reg   [0:0] isDistance_reg_1037;
reg   [0:0] isExtra_reg_1048;
wire  signed [7:0] ignoreValue_cast_cast_fu_1082_p1;
reg  signed [7:0] ignoreValue_cast_cast_reg_2950;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] buffer_3_reg_2955;
reg   [4:0] val1_1_reg_2961;
reg   [4:0] val0_1_reg_2966;
wire   [3:0] current_bits_7_fu_1706_p3;
reg   [3:0] current_bits_7_reg_2975;
wire   [3:0] current_bits_9_fu_2098_p3;
reg   [3:0] current_bits_9_reg_2981;
wire   [0:0] huffDone_1_fu_2666_p2;
wire   [0:0] isDistance_1_fu_2758_p2;
wire   [0:0] isExtra_3_fu_2796_p2;
reg   [0:0] ap_phi_mux_done_0_phi_fu_1029_p4;
wire    ap_loop_init;
reg   [0:0] ap_phi_mux_done_1_phi_fu_1073_p4;
reg   [0:0] ap_phi_mux_huffDone_phi_fu_1062_p4;
wire   [0:0] ap_phi_reg_pp0_iter1_done_1_reg_1069;
wire   [63:0] conv_i_i693_fu_2106_p1;
wire   [63:0] conv_i_i677_fu_2112_p1;
wire   [63:0] conv_i_i661_fu_2118_p1;
wire   [63:0] conv_i_i645_fu_2124_p1;
wire   [63:0] conv_i_i629_fu_2130_p1;
wire   [63:0] conv_i_i613_fu_2136_p1;
wire   [63:0] conv_i_i597_fu_2142_p1;
wire   [63:0] conv_i_i581_fu_2148_p1;
wire   [63:0] conv_i558_fu_2164_p1;
wire   [63:0] conv_i539_fu_2180_p1;
wire   [63:0] conv_i520_fu_2196_p1;
wire   [63:0] conv_i501_fu_2212_p1;
wire   [63:0] conv_i482_fu_2228_p1;
wire   [63:0] conv_i463_fu_2244_p1;
wire   [63:0] conv_i449_fu_2260_p1;
wire   [63:0] zext_ln371_fu_2266_p1;
wire   [63:0] zext_ln376_fu_2271_p1;
reg   [5:0] counter_fu_338;
wire   [5:0] counter_1_fu_2740_p2;
wire   [5:0] counter_2_fu_2868_p2;
reg   [31:0] buffer_fu_342;
wire   [31:0] buffer_1_fu_2731_p2;
wire   [31:0] buffer_2_fu_2860_p3;
reg   [31:0] ap_sig_allocacmp_buffer_3;
reg   [4:0] val1_fu_346;
wire   [4:0] val1_2_fu_2706_p3;
reg   [4:0] ap_sig_allocacmp_val1_1;
reg   [4:0] val0_fu_350;
wire   [4:0] val0_4_fu_2687_p3;
reg   [4:0] ap_sig_allocacmp_val0_1;
reg   [15:0] tmpVal_fu_354;
wire   [15:0] tmpVal_9_fu_2672_p3;
reg   [3:0] current_bits_fu_358;
reg   [3:0] current_bits_1_fu_362;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] trunc_ln339_fu_1118_p1;
wire   [15:0] zext_ln339_fu_1122_p1;
wire   [0:0] icmp_ln339_fu_1126_p2;
reg   [1:0] tmp_1_fu_1138_p4;
wire   [15:0] zext_ln339_1_fu_1148_p1;
wire   [0:0] icmp_ln339_1_fu_1152_p2;
wire   [0:0] val_1_fu_1158_p2;
reg   [2:0] tmp_2_fu_1172_p4;
wire   [15:0] zext_ln339_2_fu_1182_p1;
wire   [0:0] icmp_ln339_2_fu_1186_p2;
reg   [3:0] tmp_3_fu_1198_p4;
wire   [15:0] zext_ln339_3_fu_1208_p1;
wire   [0:0] icmp_ln339_3_fu_1212_p2;
wire   [0:0] val_3_fu_1218_p2;
wire   [0:0] val_2_fu_1192_p2;
wire   [0:0] or_ln339_fu_1232_p2;
wire   [2:0] select_ln340_fu_1224_p3;
wire   [2:0] select_ln339_6_fu_1164_p3;
wire   [2:0] select_ln339_fu_1238_p3;
reg   [4:0] tmp_4_fu_1250_p4;
wire   [15:0] zext_ln339_5_fu_1260_p1;
wire   [0:0] icmp_ln339_4_fu_1264_p2;
reg   [5:0] tmp_5_fu_1276_p4;
wire   [15:0] zext_ln339_6_fu_1286_p1;
wire   [0:0] icmp_ln339_5_fu_1290_p2;
wire   [0:0] val_5_fu_1296_p2;
reg   [6:0] tmp_6_fu_1310_p4;
wire   [15:0] zext_ln339_7_fu_1320_p1;
wire   [0:0] icmp_ln339_6_fu_1324_p2;
reg   [7:0] tmp_7_fu_1336_p4;
wire   [15:0] zext_ln339_8_fu_1346_p1;
wire   [0:0] icmp_ln339_7_fu_1350_p2;
wire   [0:0] val_7_fu_1356_p2;
wire   [0:0] val_6_fu_1330_p2;
wire   [0:0] or_ln339_1_fu_1370_p2;
wire   [3:0] select_ln340_1_fu_1362_p3;
wire   [3:0] select_ln339_11_fu_1302_p3;
wire   [0:0] or_ln339_2_fu_1384_p2;
wire   [0:0] val_4_fu_1270_p2;
wire   [0:0] or_ln339_3_fu_1390_p2;
wire   [3:0] select_ln339_1_fu_1376_p3;
wire   [3:0] zext_ln339_4_fu_1246_p1;
reg   [8:0] tmp_8_fu_1404_p4;
wire   [15:0] zext_ln339_9_fu_1414_p1;
wire   [0:0] icmp_ln339_8_fu_1418_p2;
reg   [9:0] tmp_9_fu_1430_p4;
wire   [15:0] zext_ln339_10_fu_1440_p1;
wire   [0:0] icmp_ln339_9_fu_1444_p2;
wire   [0:0] val_9_fu_1450_p2;
reg   [10:0] tmp_s_fu_1464_p4;
wire   [15:0] zext_ln339_11_fu_1474_p1;
wire   [0:0] icmp_ln339_10_fu_1478_p2;
reg   [11:0] tmp_10_fu_1490_p4;
wire   [15:0] zext_ln339_12_fu_1500_p1;
wire   [0:0] icmp_ln339_11_fu_1504_p2;
wire   [0:0] val_11_fu_1510_p2;
wire   [0:0] val_10_fu_1484_p2;
wire   [0:0] or_ln339_4_fu_1524_p2;
wire   [3:0] select_ln340_3_fu_1516_p3;
wire   [3:0] select_ln340_2_fu_1456_p3;
reg   [12:0] tmp_11_fu_1538_p4;
wire   [15:0] zext_ln339_13_fu_1548_p1;
wire   [0:0] icmp_ln339_12_fu_1552_p2;
reg   [13:0] tmp_12_fu_1564_p4;
wire   [15:0] zext_ln339_14_fu_1574_p1;
wire   [0:0] icmp_ln339_13_fu_1578_p2;
reg   [14:0] tmp_13_fu_1590_p4;
wire   [15:0] zext_ln339_15_fu_1600_p1;
wire   [0:0] icmp_ln339_14_fu_1604_p2;
wire   [0:0] val_14_fu_1610_p2;
wire   [0:0] val_13_fu_1584_p2;
wire   [0:0] or_ln340_fu_1624_p2;
wire   [2:0] select_ln340_4_fu_1616_p3;
wire   [2:0] select_ln340_5_fu_1630_p3;
wire   [0:0] val_12_fu_1558_p2;
wire   [0:0] or_ln339_5_fu_1642_p2;
wire  signed [3:0] sext_ln339_fu_1638_p1;
wire   [3:0] select_ln339_3_fu_1530_p3;
wire   [0:0] val_8_fu_1424_p2;
wire   [0:0] or_ln339_7_fu_1662_p2;
wire   [0:0] or_ln339_6_fu_1656_p2;
wire   [0:0] or_ln339_8_fu_1668_p2;
wire   [3:0] select_ln339_4_fu_1648_p3;
wire   [3:0] select_ln339_2_fu_1396_p3;
wire   [0:0] val_fu_1132_p2;
wire   [0:0] or_ln339_10_fu_1688_p2;
wire   [0:0] or_ln339_11_fu_1694_p2;
wire   [0:0] or_ln339_9_fu_1682_p2;
wire   [0:0] or_ln339_12_fu_1700_p2;
wire   [3:0] select_ln339_5_fu_1674_p3;
wire   [0:0] icmp_ln339_15_fu_1714_p2;
wire   [0:0] icmp_ln339_16_fu_1726_p2;
wire   [0:0] val_16_fu_1732_p2;
wire   [0:0] icmp_ln339_17_fu_1746_p2;
wire   [0:0] icmp_ln339_18_fu_1758_p2;
wire   [0:0] val_18_fu_1764_p2;
wire   [0:0] val_17_fu_1752_p2;
wire   [0:0] or_ln339_13_fu_1778_p2;
wire   [2:0] select_ln340_6_fu_1770_p3;
wire   [2:0] select_ln339_13_fu_1738_p3;
wire   [2:0] select_ln339_7_fu_1784_p3;
wire   [0:0] icmp_ln339_19_fu_1796_p2;
wire   [0:0] icmp_ln339_20_fu_1808_p2;
wire   [0:0] val_20_fu_1814_p2;
wire   [0:0] icmp_ln339_21_fu_1828_p2;
wire   [0:0] icmp_ln339_22_fu_1840_p2;
wire   [0:0] val_22_fu_1846_p2;
wire   [0:0] val_21_fu_1834_p2;
wire   [0:0] or_ln339_14_fu_1860_p2;
wire   [3:0] select_ln340_7_fu_1852_p3;
wire   [3:0] select_ln339_14_fu_1820_p3;
wire   [0:0] or_ln339_15_fu_1874_p2;
wire   [0:0] val_19_fu_1802_p2;
wire   [0:0] or_ln339_16_fu_1880_p2;
wire   [3:0] select_ln339_8_fu_1866_p3;
wire   [3:0] zext_ln339_16_fu_1792_p1;
wire   [0:0] icmp_ln339_23_fu_1894_p2;
wire   [0:0] icmp_ln339_24_fu_1906_p2;
wire   [0:0] val_24_fu_1912_p2;
wire   [0:0] icmp_ln339_25_fu_1926_p2;
wire   [0:0] icmp_ln339_26_fu_1938_p2;
wire   [0:0] val_26_fu_1944_p2;
wire   [0:0] val_25_fu_1932_p2;
wire   [0:0] or_ln339_17_fu_1958_p2;
wire   [3:0] select_ln340_9_fu_1950_p3;
wire   [3:0] select_ln340_8_fu_1918_p3;
wire   [0:0] icmp_ln339_27_fu_1972_p2;
wire   [0:0] icmp_ln339_28_fu_1984_p2;
wire   [0:0] icmp_ln339_29_fu_1996_p2;
wire   [0:0] val_29_fu_2002_p2;
wire   [0:0] val_28_fu_1990_p2;
wire   [0:0] or_ln340_1_fu_2016_p2;
wire   [2:0] select_ln340_10_fu_2008_p3;
wire   [2:0] select_ln340_11_fu_2022_p3;
wire   [0:0] val_27_fu_1978_p2;
wire   [0:0] or_ln347_fu_2034_p2;
wire  signed [3:0] sext_ln347_fu_2030_p1;
wire   [3:0] select_ln339_10_fu_1964_p3;
wire   [0:0] val_23_fu_1900_p2;
wire   [0:0] or_ln347_2_fu_2054_p2;
wire   [0:0] or_ln347_1_fu_2048_p2;
wire   [0:0] or_ln347_3_fu_2060_p2;
wire   [3:0] select_ln347_fu_2040_p3;
wire   [3:0] select_ln339_9_fu_1886_p3;
wire   [0:0] val_15_fu_1720_p2;
wire   [0:0] or_ln347_5_fu_2080_p2;
wire   [0:0] or_ln347_6_fu_2086_p2;
wire   [0:0] or_ln347_4_fu_2074_p2;
wire   [0:0] or_ln347_7_fu_2092_p2;
wire   [3:0] current_bits_8_fu_2066_p3;
reg   [7:0] conv_i_i_fu_2154_p4;
reg   [7:0] conv_i_i1_fu_2170_p4;
reg   [7:0] conv_i_i2_fu_2186_p4;
reg   [7:0] conv_i_i3_fu_2202_p4;
reg   [7:0] conv_i_i4_fu_2218_p4;
reg   [7:0] conv_i_i5_fu_2234_p4;
reg   [7:0] conv_i_i6_fu_2250_p4;
wire   [8:0] lsymbol_fu_2352_p31;
wire   [4:0] lsymbol_2_fu_2419_p2;
wire   [4:0] lsymbol_2_fu_2419_p4;
wire   [4:0] lsymbol_2_fu_2419_p6;
wire   [4:0] lsymbol_2_fu_2419_p8;
wire   [4:0] lsymbol_2_fu_2419_p10;
wire   [4:0] lsymbol_2_fu_2419_p12;
wire   [4:0] lsymbol_2_fu_2419_p14;
wire   [4:0] lsymbol_2_fu_2419_p16;
wire   [4:0] lsymbol_2_fu_2419_p18;
wire   [4:0] lsymbol_2_fu_2419_p20;
wire   [4:0] lsymbol_2_fu_2419_p22;
wire   [4:0] lsymbol_2_fu_2419_p24;
wire   [4:0] lsymbol_2_fu_2419_p26;
wire   [4:0] lsymbol_2_fu_2419_p28;
wire   [4:0] lsymbol_2_fu_2419_p30;
wire   [4:0] lsymbol_2_fu_2419_p31;
wire   [3:0] select_ln382_fu_2489_p3;
wire   [15:0] zext_ln382_fu_2497_p1;
wire   [15:0] shl_ln382_fu_2501_p2;
wire   [15:0] add_ln382_fu_2507_p2;
wire   [15:0] trunc_ln372_fu_2486_p1;
wire   [4:0] lsymbol_2_fu_2419_p33;
wire   [2:0] tmp_fu_2519_p4;
wire   [8:0] lsymbol_fu_2352_p33;
wire   [0:0] tmp_14_fu_2539_p3;
wire   [7:0] trunc_ln396_fu_2553_p1;
wire   [12:0] tmpVal_3_fu_2557_p3;
wire   [4:0] val0_5_fu_2586_p1;
wire   [15:0] tmpVal_1_fu_2513_p2;
wire   [15:0] zext_ln411_fu_2596_p1;
wire   [0:0] sel_tmp1_fu_2608_p2;
wire   [0:0] sel_tmp2_fu_2614_p2;
wire   [15:0] zext_ln419_fu_2535_p1;
wire   [15:0] tmpVal_6_fu_2600_p3;
wire   [0:0] sel_tmp6_demorgan_fu_2628_p2;
wire   [0:0] xor_ln395_1_fu_2547_p2;
wire   [0:0] sel_tmp6_fu_2634_p2;
wire   [0:0] and_ln395_fu_2640_p2;
wire  signed [15:0] sext_ln309_fu_2565_p1;
wire   [15:0] tmpVal_7_fu_2620_p3;
wire   [0:0] icmp_ln401_fu_2569_p2;
wire   [0:0] and_ln395_1_fu_2660_p2;
wire   [15:0] tmpVal_4_fu_2575_p5;
wire   [15:0] tmpVal_8_fu_2646_p3;
wire   [0:0] or_ln395_fu_2654_p2;
wire   [0:0] or_ln401_fu_2681_p2;
wire   [0:0] sel_tmp20_fu_2694_p2;
wire   [0:0] sel_tmp21_fu_2700_p2;
wire   [3:0] sel_tmp23_v_fu_2713_p3;
wire   [3:0] buffer_4_v_fu_2720_p3;
wire   [31:0] buffer_4_v_cast_fu_2727_p1;
wire   [5:0] counter_4_v_fu_2736_p1;
wire   [0:0] sel_tmp31_fu_2746_p2;
wire   [0:0] xor_ln401_fu_2752_p2;
wire   [0:0] isExtra_1_fu_2529_p2;
wire   [0:0] isExtra_2_fu_2590_p2;
wire   [0:0] or_ln401_2_fu_2772_p2;
wire   [0:0] and_ln401_1_fu_2778_p2;
wire   [0:0] or_ln401_3_fu_2784_p2;
wire   [0:0] sel_tmp42_fu_2764_p3;
wire   [0:0] xor_ln401_1_fu_2790_p2;
wire   [1:0] tmp_15_fu_2802_p4;
wire   [30:0] zext_ln430_fu_2828_p1;
wire   [30:0] zext_ln430_1_fu_2832_p1;
wire   [30:0] trunc_ln430_fu_2842_p1;
wire   [30:0] shl_ln430_fu_2836_p2;
wire   [0:0] tmp_16_fu_2852_p3;
wire   [30:0] or_ln430_fu_2846_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_1652;
reg    ap_condition_1655;
reg    ap_condition_1658;
reg    ap_condition_1663;
wire   [3:0] lsymbol_fu_2352_p1;
wire   [3:0] lsymbol_fu_2352_p3;
wire   [3:0] lsymbol_fu_2352_p5;
wire   [3:0] lsymbol_fu_2352_p7;
wire   [3:0] lsymbol_fu_2352_p9;
wire   [3:0] lsymbol_fu_2352_p11;
wire   [3:0] lsymbol_fu_2352_p13;
wire  signed [3:0] lsymbol_fu_2352_p15;
wire  signed [3:0] lsymbol_fu_2352_p17;
wire  signed [3:0] lsymbol_fu_2352_p19;
wire  signed [3:0] lsymbol_fu_2352_p21;
wire  signed [3:0] lsymbol_fu_2352_p23;
wire  signed [3:0] lsymbol_fu_2352_p25;
wire  signed [3:0] lsymbol_fu_2352_p27;
wire  signed [3:0] lsymbol_fu_2352_p29;
wire   [3:0] lsymbol_2_fu_2419_p1;
wire   [3:0] lsymbol_2_fu_2419_p3;
wire   [3:0] lsymbol_2_fu_2419_p5;
wire   [3:0] lsymbol_2_fu_2419_p7;
wire   [3:0] lsymbol_2_fu_2419_p9;
wire   [3:0] lsymbol_2_fu_2419_p11;
wire   [3:0] lsymbol_2_fu_2419_p13;
wire  signed [3:0] lsymbol_2_fu_2419_p15;
wire  signed [3:0] lsymbol_2_fu_2419_p17;
wire  signed [3:0] lsymbol_2_fu_2419_p19;
wire  signed [3:0] lsymbol_2_fu_2419_p21;
wire  signed [3:0] lsymbol_2_fu_2419_p23;
wire  signed [3:0] lsymbol_2_fu_2419_p25;
wire  signed [3:0] lsymbol_2_fu_2419_p27;
wire  signed [3:0] lsymbol_2_fu_2419_p29;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 counter_fu_338 = 6'd0;
#0 buffer_fu_342 = 32'd0;
#0 val1_fu_346 = 5'd0;
#0 val0_fu_350 = 5'd0;
#0 tmpVal_fu_354 = 16'd0;
#0 current_bits_fu_358 = 4'd0;
#0 current_bits_1_fu_362 = 4'd0;
#0 ap_done_reg = 1'b0;
end

decompressor_kernel_huffmanBytegenLL_Pipeline_ByteGen_lext_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
lext_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lext_address0),
    .ce0(lext_ce0),
    .q0(lext_q0)
);

decompressor_kernel_huffmanBytegenLL_Pipeline_ByteGen_dext_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
dext_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dext_address0),
    .ce0(dext_ce0),
    .q0(dext_q0)
);

decompressor_kernel_sparsemux_31_4_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h1 ),
    .din0_WIDTH( 9 ),
    .CASE1( 4'h2 ),
    .din1_WIDTH( 9 ),
    .CASE2( 4'h3 ),
    .din2_WIDTH( 9 ),
    .CASE3( 4'h4 ),
    .din3_WIDTH( 9 ),
    .CASE4( 4'h5 ),
    .din4_WIDTH( 9 ),
    .CASE5( 4'h6 ),
    .din5_WIDTH( 9 ),
    .CASE6( 4'h7 ),
    .din6_WIDTH( 9 ),
    .CASE7( 4'h8 ),
    .din7_WIDTH( 9 ),
    .CASE8( 4'h9 ),
    .din8_WIDTH( 9 ),
    .CASE9( 4'hA ),
    .din9_WIDTH( 9 ),
    .CASE10( 4'hB ),
    .din10_WIDTH( 9 ),
    .CASE11( 4'hC ),
    .din11_WIDTH( 9 ),
    .CASE12( 4'hD ),
    .din12_WIDTH( 9 ),
    .CASE13( 4'hE ),
    .din13_WIDTH( 9 ),
    .CASE14( 4'hF ),
    .din14_WIDTH( 9 ),
    .def_WIDTH( 9 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
sparsemux_31_4_9_1_1_U27(
    .din0(bl1Codes_0_q0),
    .din1(bl2Codes_0_q0),
    .din2(bl3Codes_0_q0),
    .din3(bl4Codes_0_q0),
    .din4(bl5Codes_0_q0),
    .din5(bl6Codes_0_q0),
    .din6(bl7Codes_0_q0),
    .din7(bl8Codes_0_q0),
    .din8(bl9Codes_0_q0),
    .din9(bl10Codes_0_q0),
    .din10(bl11Codes_0_q0),
    .din11(bl12Codes_0_q0),
    .din12(bl13Codes_0_q0),
    .din13(bl14Codes_0_q0),
    .din14(bl15Codes_0_q0),
    .def(lsymbol_fu_2352_p31),
    .sel(current_bits_7_reg_2975),
    .dout(lsymbol_fu_2352_p33)
);

decompressor_kernel_sparsemux_31_4_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h1 ),
    .din0_WIDTH( 5 ),
    .CASE1( 4'h2 ),
    .din1_WIDTH( 5 ),
    .CASE2( 4'h3 ),
    .din2_WIDTH( 5 ),
    .CASE3( 4'h4 ),
    .din3_WIDTH( 5 ),
    .CASE4( 4'h5 ),
    .din4_WIDTH( 5 ),
    .CASE5( 4'h6 ),
    .din5_WIDTH( 5 ),
    .CASE6( 4'h7 ),
    .din6_WIDTH( 5 ),
    .CASE7( 4'h8 ),
    .din7_WIDTH( 5 ),
    .CASE8( 4'h9 ),
    .din8_WIDTH( 5 ),
    .CASE9( 4'hA ),
    .din9_WIDTH( 5 ),
    .CASE10( 4'hB ),
    .din10_WIDTH( 5 ),
    .CASE11( 4'hC ),
    .din11_WIDTH( 5 ),
    .CASE12( 4'hD ),
    .din12_WIDTH( 5 ),
    .CASE13( 4'hE ),
    .din13_WIDTH( 5 ),
    .CASE14( 4'hF ),
    .din14_WIDTH( 5 ),
    .def_WIDTH( 5 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 5 ))
sparsemux_31_4_5_1_1_U28(
    .din0(lsymbol_2_fu_2419_p2),
    .din1(lsymbol_2_fu_2419_p4),
    .din2(lsymbol_2_fu_2419_p6),
    .din3(lsymbol_2_fu_2419_p8),
    .din4(lsymbol_2_fu_2419_p10),
    .din5(lsymbol_2_fu_2419_p12),
    .din6(lsymbol_2_fu_2419_p14),
    .din7(lsymbol_2_fu_2419_p16),
    .din8(lsymbol_2_fu_2419_p18),
    .din9(lsymbol_2_fu_2419_p20),
    .din10(lsymbol_2_fu_2419_p22),
    .din11(lsymbol_2_fu_2419_p24),
    .din12(lsymbol_2_fu_2419_p26),
    .din13(lsymbol_2_fu_2419_p28),
    .din14(lsymbol_2_fu_2419_p30),
    .def(lsymbol_2_fu_2419_p31),
    .sel(current_bits_9_reg_2981),
    .dout(lsymbol_2_fu_2419_p33)
);

decompressor_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            buffer_fu_342 <= p_bitbuffer_read;
        end else if ((1'b1 == ap_condition_1658)) begin
            buffer_fu_342 <= buffer_2_fu_2860_p3;
        end else if ((1'b1 == ap_condition_1655)) begin
            buffer_fu_342 <= buffer_1_fu_2731_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            counter_fu_338 <= bits_cntr_read;
        end else if ((1'b1 == ap_condition_1658)) begin
            counter_fu_338 <= counter_2_fu_2868_p2;
        end else if ((1'b1 == ap_condition_1655)) begin
            counter_fu_338 <= counter_1_fu_2740_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_1663)) begin
            done_0_reg_1026 <= ap_phi_mux_done_1_phi_fu_1073_p4;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            done_0_reg_1026 <= p_read2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_1663)) begin
            isDistance_reg_1037 <= isDistance_1_fu_2758_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            isDistance_reg_1037 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_1663)) begin
            isExtra_reg_1048 <= isExtra_3_fu_2796_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            isExtra_reg_1048 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_3_reg_2955 <= ap_sig_allocacmp_buffer_3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln331_fu_1112_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_bits_1_fu_362 <= current_bits_9_fu_2098_p3;
        current_bits_fu_358 <= current_bits_7_fu_1706_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_bits_7_reg_2975 <= current_bits_7_fu_1706_p3;
        current_bits_9_reg_2981 <= current_bits_9_fu_2098_p3;
        ignoreValue_cast_cast_reg_2950 <= ignoreValue_cast_cast_fu_1082_p1;
        or_ln331_reg_2971 <= or_ln331_fu_1112_p2;
        val0_1_reg_2966 <= ap_sig_allocacmp_val0_1;
        val1_1_reg_2961 <= ap_sig_allocacmp_val1_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln331_reg_2971 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmpVal_fu_354 <= tmpVal_9_fu_2672_p3;
        val0_fu_350 <= val0_4_fu_2687_p3;
        val1_fu_346 <= val1_2_fu_2706_p3;
    end
end

always @ (*) begin
    if (((or_ln331_fu_1112_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_1652)) begin
            ap_phi_mux_done_0_phi_fu_1029_p4 = ap_phi_mux_done_1_phi_fu_1073_p4;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_done_0_phi_fu_1029_p4 = p_read2;
        end else begin
            ap_phi_mux_done_0_phi_fu_1029_p4 = done_0_reg_1026;
        end
    end else begin
        ap_phi_mux_done_0_phi_fu_1029_p4 = done_0_reg_1026;
    end
end

always @ (*) begin
    if ((or_ln331_reg_2971 == 1'd0)) begin
        if ((icmp_ln427_fu_2812_p2 == 1'd0)) begin
            ap_phi_mux_done_1_phi_fu_1073_p4 = 1'd0;
        end else if ((icmp_ln427_fu_2812_p2 == 1'd1)) begin
            ap_phi_mux_done_1_phi_fu_1073_p4 = huffman_eos_stream_dout;
        end else begin
            ap_phi_mux_done_1_phi_fu_1073_p4 = ap_phi_reg_pp0_iter1_done_1_reg_1069;
        end
    end else begin
        ap_phi_mux_done_1_phi_fu_1073_p4 = ap_phi_reg_pp0_iter1_done_1_reg_1069;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_1652)) begin
            ap_phi_mux_huffDone_phi_fu_1062_p4 = huffDone_1_fu_2666_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_huffDone_phi_fu_1062_p4 = 1'd0;
        end else begin
            ap_phi_mux_huffDone_phi_fu_1062_p4 = huffDone_1_fu_2666_p2;
        end
    end else begin
        ap_phi_mux_huffDone_phi_fu_1062_p4 = huffDone_1_fu_2666_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_buffer_3 = p_bitbuffer_read;
        end else if ((1'b1 == ap_condition_1658)) begin
            ap_sig_allocacmp_buffer_3 = buffer_2_fu_2860_p3;
        end else if ((1'b1 == ap_condition_1655)) begin
            ap_sig_allocacmp_buffer_3 = buffer_1_fu_2731_p2;
        end else begin
            ap_sig_allocacmp_buffer_3 = buffer_fu_342;
        end
    end else begin
        ap_sig_allocacmp_buffer_3 = buffer_fu_342;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln331_reg_2971 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_val0_1 = val0_4_fu_2687_p3;
    end else begin
        ap_sig_allocacmp_val0_1 = val0_fu_350;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln331_reg_2971 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_val1_1 = val1_2_fu_2706_p3;
    end else begin
        ap_sig_allocacmp_val1_1 = val1_fu_346;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl10Codes_0_ce0 = 1'b1;
    end else begin
        bl10Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl10Codes_1_ce0 = 1'b1;
    end else begin
        bl10Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl11Codes_0_ce0 = 1'b1;
    end else begin
        bl11Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl11Codes_1_ce0 = 1'b1;
    end else begin
        bl11Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl12Codes_0_ce0 = 1'b1;
    end else begin
        bl12Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl12Codes_1_ce0 = 1'b1;
    end else begin
        bl12Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl13Codes_0_ce0 = 1'b1;
    end else begin
        bl13Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl13Codes_1_ce0 = 1'b1;
    end else begin
        bl13Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl14Codes_0_ce0 = 1'b1;
    end else begin
        bl14Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl14Codes_1_ce0 = 1'b1;
    end else begin
        bl14Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl15Codes_0_ce0 = 1'b1;
    end else begin
        bl15Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl15Codes_1_ce0 = 1'b1;
    end else begin
        bl15Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl1Codes_0_ce0 = 1'b1;
    end else begin
        bl1Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl1Codes_1_ce0 = 1'b1;
    end else begin
        bl1Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl2Codes_0_ce0 = 1'b1;
    end else begin
        bl2Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl2Codes_1_ce0 = 1'b1;
    end else begin
        bl2Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl3Codes_0_ce0 = 1'b1;
    end else begin
        bl3Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl3Codes_1_ce0 = 1'b1;
    end else begin
        bl3Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl4Codes_0_ce0 = 1'b1;
    end else begin
        bl4Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl4Codes_1_ce0 = 1'b1;
    end else begin
        bl4Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl5Codes_0_ce0 = 1'b1;
    end else begin
        bl5Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl5Codes_1_ce0 = 1'b1;
    end else begin
        bl5Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl6Codes_0_ce0 = 1'b1;
    end else begin
        bl6Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl6Codes_1_ce0 = 1'b1;
    end else begin
        bl6Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl7Codes_0_ce0 = 1'b1;
    end else begin
        bl7Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl7Codes_1_ce0 = 1'b1;
    end else begin
        bl7Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl8Codes_0_ce0 = 1'b1;
    end else begin
        bl8Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl8Codes_1_ce0 = 1'b1;
    end else begin
        bl8Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl9Codes_0_ce0 = 1'b1;
    end else begin
        bl9Codes_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bl9Codes_1_ce0 = 1'b1;
    end else begin
        bl9Codes_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln331_fu_1112_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_out_ap_vld = 1'b1;
    end else begin
        buffer_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln331_fu_1112_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        counter_out_ap_vld = 1'b1;
    end else begin
        counter_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dext_ce0 = 1'b1;
    end else begin
        dext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln331_fu_1112_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        done_0_out_ap_vld = 1'b1;
    end else begin
        done_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op448_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffman_eos_stream_blk_n = huffman_eos_stream_empty_n;
    end else begin
        huffman_eos_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op448_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffman_eos_stream_read = 1'b1;
    end else begin
        huffman_eos_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op447_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffman_input_stream_blk_n = huffman_input_stream_empty_n;
    end else begin
        huffman_input_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op447_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffman_input_stream_read = 1'b1;
    end else begin
        huffman_input_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lext_ce0 = 1'b1;
    end else begin
        lext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln331_reg_2971 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lz77_output_stream_blk_n = lz77_output_stream_full_n;
    end else begin
        lz77_output_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln331_reg_2971 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lz77_output_stream_write = 1'b1;
    end else begin
        lz77_output_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln382_fu_2507_p2 = ($signed(shl_ln382_fu_2501_p2) + $signed(16'd65535));

assign and_ln395_1_fu_2660_p2 = (tmp_14_fu_2539_p3 & sel_tmp6_fu_2634_p2);

assign and_ln395_fu_2640_p2 = (xor_ln395_1_fu_2547_p2 & sel_tmp6_fu_2634_p2);

assign and_ln401_1_fu_2778_p2 = (sel_tmp20_fu_2694_p2 & or_ln401_2_fu_2772_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op448_read_state2 == 1'b1) & (huffman_eos_stream_empty_n == 1'b0)) | ((ap_predicate_op447_read_state2 == 1'b1) & (huffman_input_stream_empty_n == 1'b0)) | ((or_ln331_reg_2971 == 1'd0) & (lz77_output_stream_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_1652 = ((1'b0 == ap_block_pp0_stage0) & (or_ln331_reg_2971 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_1655 = ((icmp_ln427_fu_2812_p2 == 1'd0) & (or_ln331_reg_2971 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_1658 = ((icmp_ln427_fu_2812_p2 == 1'd1) & (or_ln331_reg_2971 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_1663 = ((1'b0 == ap_block_pp0_stage0_11001) & (or_ln331_reg_2971 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter1_done_1_reg_1069 = 'bx;

always @ (*) begin
    ap_predicate_op447_read_state2 = ((icmp_ln427_fu_2812_p2 == 1'd1) & (or_ln331_reg_2971 == 1'd0));
end

always @ (*) begin
    ap_predicate_op448_read_state2 = ((icmp_ln427_fu_2812_p2 == 1'd1) & (or_ln331_reg_2971 == 1'd0));
end

assign bl10Codes_0_address0 = conv_i539_fu_2180_p1;

assign bl10Codes_1_address0 = conv_i539_fu_2180_p1;

assign bl11Codes_0_address0 = conv_i520_fu_2196_p1;

assign bl11Codes_1_address0 = conv_i520_fu_2196_p1;

assign bl12Codes_0_address0 = conv_i501_fu_2212_p1;

assign bl12Codes_1_address0 = conv_i501_fu_2212_p1;

assign bl13Codes_0_address0 = conv_i482_fu_2228_p1;

assign bl13Codes_1_address0 = conv_i482_fu_2228_p1;

assign bl14Codes_0_address0 = conv_i463_fu_2244_p1;

assign bl14Codes_1_address0 = conv_i463_fu_2244_p1;

assign bl15Codes_0_address0 = conv_i449_fu_2260_p1;

assign bl15Codes_1_address0 = conv_i449_fu_2260_p1;

assign bl1Codes_0_address0 = conv_i_i693_fu_2106_p1;

assign bl1Codes_1_address0 = conv_i_i693_fu_2106_p1;

assign bl2Codes_0_address0 = conv_i_i677_fu_2112_p1;

assign bl2Codes_1_address0 = conv_i_i677_fu_2112_p1;

assign bl3Codes_0_address0 = conv_i_i661_fu_2118_p1;

assign bl3Codes_1_address0 = conv_i_i661_fu_2118_p1;

assign bl4Codes_0_address0 = conv_i_i645_fu_2124_p1;

assign bl4Codes_1_address0 = conv_i_i645_fu_2124_p1;

assign bl5Codes_0_address0 = conv_i_i629_fu_2130_p1;

assign bl5Codes_1_address0 = conv_i_i629_fu_2130_p1;

assign bl6Codes_0_address0 = conv_i_i613_fu_2136_p1;

assign bl6Codes_1_address0 = conv_i_i613_fu_2136_p1;

assign bl7Codes_0_address0 = conv_i_i597_fu_2142_p1;

assign bl7Codes_1_address0 = conv_i_i597_fu_2142_p1;

assign bl8Codes_0_address0 = conv_i_i581_fu_2148_p1;

assign bl8Codes_1_address0 = conv_i_i581_fu_2148_p1;

assign bl9Codes_0_address0 = conv_i558_fu_2164_p1;

assign bl9Codes_1_address0 = conv_i558_fu_2164_p1;

assign buffer_1_fu_2731_p2 = buffer_3_reg_2955 >> buffer_4_v_cast_fu_2727_p1;

assign buffer_2_fu_2860_p3 = {{tmp_16_fu_2852_p3}, {or_ln430_fu_2846_p2}};

assign buffer_4_v_cast_fu_2727_p1 = buffer_4_v_fu_2720_p3;

assign buffer_4_v_fu_2720_p3 = ((sel_tmp2_fu_2614_p2[0:0] == 1'b1) ? current_bits_9_reg_2981 : sel_tmp23_v_fu_2713_p3);

assign buffer_out = buffer_fu_342;

assign conv_i449_fu_2260_p1 = conv_i_i6_fu_2250_p4;

assign conv_i463_fu_2244_p1 = conv_i_i5_fu_2234_p4;

assign conv_i482_fu_2228_p1 = conv_i_i4_fu_2218_p4;

assign conv_i501_fu_2212_p1 = conv_i_i3_fu_2202_p4;

assign conv_i520_fu_2196_p1 = conv_i_i2_fu_2186_p4;

assign conv_i539_fu_2180_p1 = conv_i_i1_fu_2170_p4;

assign conv_i558_fu_2164_p1 = conv_i_i_fu_2154_p4;

integer ap_tvar_int_0;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_0 = 8 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 9 - 2) begin
            conv_i_i1_fu_2170_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            conv_i_i1_fu_2170_p4[ap_tvar_int_0] = ap_sig_allocacmp_buffer_3[9 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_1 = 8 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 10 - 3) begin
            conv_i_i2_fu_2186_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            conv_i_i2_fu_2186_p4[ap_tvar_int_1] = ap_sig_allocacmp_buffer_3[10 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_2 = 8 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 11 - 4) begin
            conv_i_i3_fu_2202_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            conv_i_i3_fu_2202_p4[ap_tvar_int_2] = ap_sig_allocacmp_buffer_3[11 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_3 = 8 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 12 - 5) begin
            conv_i_i4_fu_2218_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            conv_i_i4_fu_2218_p4[ap_tvar_int_3] = ap_sig_allocacmp_buffer_3[12 - ap_tvar_int_3];
        end
    end
end

assign conv_i_i581_fu_2148_p1 = tmp_7_fu_1336_p4;

assign conv_i_i597_fu_2142_p1 = tmp_6_fu_1310_p4;

integer ap_tvar_int_4;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_4 = 8 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 13 - 6) begin
            conv_i_i5_fu_2234_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            conv_i_i5_fu_2234_p4[ap_tvar_int_4] = ap_sig_allocacmp_buffer_3[13 - ap_tvar_int_4];
        end
    end
end

assign conv_i_i613_fu_2136_p1 = tmp_5_fu_1276_p4;

assign conv_i_i629_fu_2130_p1 = tmp_4_fu_1250_p4;

assign conv_i_i645_fu_2124_p1 = tmp_3_fu_1198_p4;

assign conv_i_i661_fu_2118_p1 = tmp_2_fu_1172_p4;

assign conv_i_i677_fu_2112_p1 = tmp_1_fu_1138_p4;

assign conv_i_i693_fu_2106_p1 = trunc_ln339_fu_1118_p1;

integer ap_tvar_int_5;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_5 = 8 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 14 - 7) begin
            conv_i_i6_fu_2250_p4[ap_tvar_int_5] = 1'b0;
        end else begin
            conv_i_i6_fu_2250_p4[ap_tvar_int_5] = ap_sig_allocacmp_buffer_3[14 - ap_tvar_int_5];
        end
    end
end

integer ap_tvar_int_6;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_6 = 8 - 1; ap_tvar_int_6 >= 0; ap_tvar_int_6 = ap_tvar_int_6 - 1) begin
        if (ap_tvar_int_6 > 8 - 1) begin
            conv_i_i_fu_2154_p4[ap_tvar_int_6] = 1'b0;
        end else begin
            conv_i_i_fu_2154_p4[ap_tvar_int_6] = ap_sig_allocacmp_buffer_3[8 - ap_tvar_int_6];
        end
    end
end

assign counter_1_fu_2740_p2 = (counter_fu_338 - counter_4_v_fu_2736_p1);

assign counter_2_fu_2868_p2 = (counter_1_fu_2740_p2 + 6'd16);

assign counter_4_v_fu_2736_p1 = buffer_4_v_fu_2720_p3;

assign counter_out = counter_fu_338;

assign current_bits_7_fu_1706_p3 = ((or_ln339_12_fu_1700_p2[0:0] == 1'b1) ? select_ln339_5_fu_1674_p3 : current_bits_fu_358);

assign current_bits_8_fu_2066_p3 = ((or_ln347_3_fu_2060_p2[0:0] == 1'b1) ? select_ln347_fu_2040_p3 : select_ln339_9_fu_1886_p3);

assign current_bits_9_fu_2098_p3 = ((or_ln347_7_fu_2092_p2[0:0] == 1'b1) ? current_bits_8_fu_2066_p3 : current_bits_1_fu_362);

assign dext_address0 = zext_ln376_fu_2271_p1;

assign done_0_out = done_0_reg_1026;

assign huffDone_1_fu_2666_p2 = (icmp_ln401_fu_2569_p2 & and_ln395_1_fu_2660_p2);

assign icmp_ln339_10_fu_1478_p2 = ((zext_ln339_11_fu_1474_p1 < codeOffsets_0_load_10) ? 1'b1 : 1'b0);

assign icmp_ln339_11_fu_1504_p2 = ((zext_ln339_12_fu_1500_p1 < codeOffsets_0_load_11) ? 1'b1 : 1'b0);

assign icmp_ln339_12_fu_1552_p2 = ((zext_ln339_13_fu_1548_p1 < codeOffsets_0_load_12) ? 1'b1 : 1'b0);

assign icmp_ln339_13_fu_1578_p2 = ((zext_ln339_14_fu_1574_p1 < codeOffsets_0_load_13) ? 1'b1 : 1'b0);

assign icmp_ln339_14_fu_1604_p2 = ((zext_ln339_15_fu_1600_p1 < codeOffsets_0_load_14) ? 1'b1 : 1'b0);

assign icmp_ln339_15_fu_1714_p2 = ((zext_ln339_fu_1122_p1 < codeOffsets_1_load) ? 1'b1 : 1'b0);

assign icmp_ln339_16_fu_1726_p2 = ((zext_ln339_1_fu_1148_p1 < codeOffsets_1_load_1) ? 1'b1 : 1'b0);

assign icmp_ln339_17_fu_1746_p2 = ((zext_ln339_2_fu_1182_p1 < codeOffsets_1_load_2) ? 1'b1 : 1'b0);

assign icmp_ln339_18_fu_1758_p2 = ((zext_ln339_3_fu_1208_p1 < codeOffsets_1_load_3) ? 1'b1 : 1'b0);

assign icmp_ln339_19_fu_1796_p2 = ((zext_ln339_5_fu_1260_p1 < codeOffsets_1_load_4) ? 1'b1 : 1'b0);

assign icmp_ln339_1_fu_1152_p2 = ((zext_ln339_1_fu_1148_p1 < codeOffsets_0_load_1) ? 1'b1 : 1'b0);

assign icmp_ln339_20_fu_1808_p2 = ((zext_ln339_6_fu_1286_p1 < codeOffsets_1_load_5) ? 1'b1 : 1'b0);

assign icmp_ln339_21_fu_1828_p2 = ((zext_ln339_7_fu_1320_p1 < codeOffsets_1_load_6) ? 1'b1 : 1'b0);

assign icmp_ln339_22_fu_1840_p2 = ((zext_ln339_8_fu_1346_p1 < codeOffsets_1_load_7) ? 1'b1 : 1'b0);

assign icmp_ln339_23_fu_1894_p2 = ((zext_ln339_9_fu_1414_p1 < codeOffsets_1_load_8) ? 1'b1 : 1'b0);

assign icmp_ln339_24_fu_1906_p2 = ((zext_ln339_10_fu_1440_p1 < codeOffsets_1_load_9) ? 1'b1 : 1'b0);

assign icmp_ln339_25_fu_1926_p2 = ((zext_ln339_11_fu_1474_p1 < codeOffsets_1_load_10) ? 1'b1 : 1'b0);

assign icmp_ln339_26_fu_1938_p2 = ((zext_ln339_12_fu_1500_p1 < codeOffsets_1_load_11) ? 1'b1 : 1'b0);

assign icmp_ln339_27_fu_1972_p2 = ((zext_ln339_13_fu_1548_p1 < codeOffsets_1_load_12) ? 1'b1 : 1'b0);

assign icmp_ln339_28_fu_1984_p2 = ((zext_ln339_14_fu_1574_p1 < codeOffsets_1_load_13) ? 1'b1 : 1'b0);

assign icmp_ln339_29_fu_1996_p2 = ((zext_ln339_15_fu_1600_p1 < codeOffsets_1_load_14) ? 1'b1 : 1'b0);

assign icmp_ln339_2_fu_1186_p2 = ((zext_ln339_2_fu_1182_p1 < codeOffsets_0_load_2) ? 1'b1 : 1'b0);

assign icmp_ln339_3_fu_1212_p2 = ((zext_ln339_3_fu_1208_p1 < codeOffsets_0_load_3) ? 1'b1 : 1'b0);

assign icmp_ln339_4_fu_1264_p2 = ((zext_ln339_5_fu_1260_p1 < codeOffsets_0_load_4) ? 1'b1 : 1'b0);

assign icmp_ln339_5_fu_1290_p2 = ((zext_ln339_6_fu_1286_p1 < codeOffsets_0_load_5) ? 1'b1 : 1'b0);

assign icmp_ln339_6_fu_1324_p2 = ((zext_ln339_7_fu_1320_p1 < codeOffsets_0_load_6) ? 1'b1 : 1'b0);

assign icmp_ln339_7_fu_1350_p2 = ((zext_ln339_8_fu_1346_p1 < codeOffsets_0_load_7) ? 1'b1 : 1'b0);

assign icmp_ln339_8_fu_1418_p2 = ((zext_ln339_9_fu_1414_p1 < codeOffsets_0_load_8) ? 1'b1 : 1'b0);

assign icmp_ln339_9_fu_1444_p2 = ((zext_ln339_10_fu_1440_p1 < codeOffsets_0_load_9) ? 1'b1 : 1'b0);

assign icmp_ln339_fu_1126_p2 = ((zext_ln339_fu_1122_p1 < codeOffsets_0_load) ? 1'b1 : 1'b0);

assign icmp_ln401_fu_2569_p2 = ((lsymbol_fu_2352_p33 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln427_fu_2812_p2 = ((tmp_15_fu_2802_p4 == 2'd0) ? 1'b1 : 1'b0);

assign ignoreValue_cast_cast_fu_1082_p1 = $signed(ignoreValue_cast);

assign isDistance_1_fu_2758_p2 = (xor_ln401_fu_2752_p2 | sel_tmp31_fu_2746_p2);

assign isExtra_1_fu_2529_p2 = ((tmp_fu_2519_p4 != 3'd0) ? 1'b1 : 1'b0);

assign isExtra_2_fu_2590_p2 = ((val0_5_fu_2586_p1 > 5'd8) ? 1'b1 : 1'b0);

assign isExtra_3_fu_2796_p2 = (xor_ln401_1_fu_2790_p2 & sel_tmp42_fu_2764_p3);

assign lext_address0 = zext_ln371_fu_2266_p1;

assign lsymbol_2_fu_2419_p10 = bl5Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p12 = bl6Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p14 = bl7Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p16 = bl8Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p18 = bl9Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p2 = bl1Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p20 = bl10Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p22 = bl11Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p24 = bl12Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p26 = bl13Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p28 = bl14Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p30 = bl15Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p31 = 'bx;

assign lsymbol_2_fu_2419_p4 = bl2Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p6 = bl3Codes_1_q0[4:0];

assign lsymbol_2_fu_2419_p8 = bl4Codes_1_q0[4:0];

assign lsymbol_fu_2352_p31 = 'bx;

assign lz77_output_stream_din = ((huffDone_1_fu_2666_p2[0:0] == 1'b1) ? tmpVal_4_fu_2575_p5 : tmpVal_8_fu_2646_p3);

assign or_ln331_fu_1112_p2 = (ap_phi_mux_huffDone_phi_fu_1062_p4 | ap_phi_mux_done_0_phi_fu_1029_p4);

assign or_ln339_10_fu_1688_p2 = (val_fu_1132_p2 | or_ln339_fu_1232_p2);

assign or_ln339_11_fu_1694_p2 = (or_ln339_8_fu_1668_p2 | or_ln339_10_fu_1688_p2);

assign or_ln339_12_fu_1700_p2 = (or_ln339_9_fu_1682_p2 | or_ln339_11_fu_1694_p2);

assign or_ln339_13_fu_1778_p2 = (val_18_fu_1764_p2 | val_17_fu_1752_p2);

assign or_ln339_14_fu_1860_p2 = (val_22_fu_1846_p2 | val_21_fu_1834_p2);

assign or_ln339_15_fu_1874_p2 = (val_20_fu_1814_p2 | or_ln339_14_fu_1860_p2);

assign or_ln339_16_fu_1880_p2 = (val_19_fu_1802_p2 | or_ln339_15_fu_1874_p2);

assign or_ln339_17_fu_1958_p2 = (val_26_fu_1944_p2 | val_25_fu_1932_p2);

assign or_ln339_1_fu_1370_p2 = (val_7_fu_1356_p2 | val_6_fu_1330_p2);

assign or_ln339_2_fu_1384_p2 = (val_5_fu_1296_p2 | or_ln339_1_fu_1370_p2);

assign or_ln339_3_fu_1390_p2 = (val_4_fu_1270_p2 | or_ln339_2_fu_1384_p2);

assign or_ln339_4_fu_1524_p2 = (val_11_fu_1510_p2 | val_10_fu_1484_p2);

assign or_ln339_5_fu_1642_p2 = (val_12_fu_1558_p2 | or_ln340_fu_1624_p2);

assign or_ln339_6_fu_1656_p2 = (val_9_fu_1450_p2 | or_ln339_5_fu_1642_p2);

assign or_ln339_7_fu_1662_p2 = (val_8_fu_1424_p2 | or_ln339_4_fu_1524_p2);

assign or_ln339_8_fu_1668_p2 = (or_ln339_7_fu_1662_p2 | or_ln339_6_fu_1656_p2);

assign or_ln339_9_fu_1682_p2 = (val_1_fu_1158_p2 | or_ln339_3_fu_1390_p2);

assign or_ln339_fu_1232_p2 = (val_3_fu_1218_p2 | val_2_fu_1192_p2);

assign or_ln340_1_fu_2016_p2 = (val_29_fu_2002_p2 | val_28_fu_1990_p2);

assign or_ln340_fu_1624_p2 = (val_14_fu_1610_p2 | val_13_fu_1584_p2);

assign or_ln347_1_fu_2048_p2 = (val_24_fu_1912_p2 | or_ln347_fu_2034_p2);

assign or_ln347_2_fu_2054_p2 = (val_23_fu_1900_p2 | or_ln339_17_fu_1958_p2);

assign or_ln347_3_fu_2060_p2 = (or_ln347_2_fu_2054_p2 | or_ln347_1_fu_2048_p2);

assign or_ln347_4_fu_2074_p2 = (val_16_fu_1732_p2 | or_ln339_16_fu_1880_p2);

assign or_ln347_5_fu_2080_p2 = (val_15_fu_1720_p2 | or_ln339_13_fu_1778_p2);

assign or_ln347_6_fu_2086_p2 = (or_ln347_5_fu_2080_p2 | or_ln347_3_fu_2060_p2);

assign or_ln347_7_fu_2092_p2 = (or_ln347_6_fu_2086_p2 | or_ln347_4_fu_2074_p2);

assign or_ln347_fu_2034_p2 = (val_27_fu_1978_p2 | or_ln340_1_fu_2016_p2);

assign or_ln395_fu_2654_p2 = (xor_ln395_1_fu_2547_p2 | sel_tmp6_demorgan_fu_2628_p2);

assign or_ln401_2_fu_2772_p2 = (xor_ln395_1_fu_2547_p2 | icmp_ln401_fu_2569_p2);

assign or_ln401_3_fu_2784_p2 = (isExtra_reg_1048 | and_ln401_1_fu_2778_p2);

assign or_ln401_fu_2681_p2 = (or_ln395_fu_2654_p2 | icmp_ln401_fu_2569_p2);

assign or_ln430_fu_2846_p2 = (trunc_ln430_fu_2842_p1 | shl_ln430_fu_2836_p2);

assign sel_tmp1_fu_2608_p2 = (isExtra_reg_1048 ^ 1'd1);

assign sel_tmp20_fu_2694_p2 = (isDistance_reg_1037 ^ 1'd1);

assign sel_tmp21_fu_2700_p2 = (sel_tmp20_fu_2694_p2 | isExtra_reg_1048);

assign sel_tmp23_v_fu_2713_p3 = ((isExtra_reg_1048[0:0] == 1'b1) ? select_ln382_fu_2489_p3 : current_bits_7_reg_2975);

assign sel_tmp2_fu_2614_p2 = (sel_tmp1_fu_2608_p2 & isDistance_reg_1037);

assign sel_tmp31_fu_2746_p2 = (isExtra_reg_1048 & isDistance_reg_1037);

assign sel_tmp42_fu_2764_p3 = ((sel_tmp2_fu_2614_p2[0:0] == 1'b1) ? isExtra_1_fu_2529_p2 : isExtra_2_fu_2590_p2);

assign sel_tmp6_demorgan_fu_2628_p2 = (isExtra_reg_1048 | isDistance_reg_1037);

assign sel_tmp6_fu_2634_p2 = (sel_tmp6_demorgan_fu_2628_p2 ^ 1'd1);

assign select_ln339_10_fu_1964_p3 = ((or_ln339_17_fu_1958_p2[0:0] == 1'b1) ? select_ln340_9_fu_1950_p3 : select_ln340_8_fu_1918_p3);

assign select_ln339_11_fu_1302_p3 = ((val_5_fu_1296_p2[0:0] == 1'b1) ? 4'd6 : 4'd5);

assign select_ln339_13_fu_1738_p3 = ((val_16_fu_1732_p2[0:0] == 1'b1) ? 3'd2 : 3'd1);

assign select_ln339_14_fu_1820_p3 = ((val_20_fu_1814_p2[0:0] == 1'b1) ? 4'd6 : 4'd5);

assign select_ln339_1_fu_1376_p3 = ((or_ln339_1_fu_1370_p2[0:0] == 1'b1) ? select_ln340_1_fu_1362_p3 : select_ln339_11_fu_1302_p3);

assign select_ln339_2_fu_1396_p3 = ((or_ln339_3_fu_1390_p2[0:0] == 1'b1) ? select_ln339_1_fu_1376_p3 : zext_ln339_4_fu_1246_p1);

assign select_ln339_3_fu_1530_p3 = ((or_ln339_4_fu_1524_p2[0:0] == 1'b1) ? select_ln340_3_fu_1516_p3 : select_ln340_2_fu_1456_p3);

assign select_ln339_4_fu_1648_p3 = ((or_ln339_5_fu_1642_p2[0:0] == 1'b1) ? sext_ln339_fu_1638_p1 : select_ln339_3_fu_1530_p3);

assign select_ln339_5_fu_1674_p3 = ((or_ln339_8_fu_1668_p2[0:0] == 1'b1) ? select_ln339_4_fu_1648_p3 : select_ln339_2_fu_1396_p3);

assign select_ln339_6_fu_1164_p3 = ((val_1_fu_1158_p2[0:0] == 1'b1) ? 3'd2 : 3'd1);

assign select_ln339_7_fu_1784_p3 = ((or_ln339_13_fu_1778_p2[0:0] == 1'b1) ? select_ln340_6_fu_1770_p3 : select_ln339_13_fu_1738_p3);

assign select_ln339_8_fu_1866_p3 = ((or_ln339_14_fu_1860_p2[0:0] == 1'b1) ? select_ln340_7_fu_1852_p3 : select_ln339_14_fu_1820_p3);

assign select_ln339_9_fu_1886_p3 = ((or_ln339_16_fu_1880_p2[0:0] == 1'b1) ? select_ln339_8_fu_1866_p3 : zext_ln339_16_fu_1792_p1);

assign select_ln339_fu_1238_p3 = ((or_ln339_fu_1232_p2[0:0] == 1'b1) ? select_ln340_fu_1224_p3 : select_ln339_6_fu_1164_p3);

assign select_ln340_10_fu_2008_p3 = ((val_29_fu_2002_p2[0:0] == 1'b1) ? 3'd7 : 3'd6);

assign select_ln340_11_fu_2022_p3 = ((or_ln340_1_fu_2016_p2[0:0] == 1'b1) ? select_ln340_10_fu_2008_p3 : 3'd5);

assign select_ln340_1_fu_1362_p3 = ((val_7_fu_1356_p2[0:0] == 1'b1) ? 4'd8 : 4'd7);

assign select_ln340_2_fu_1456_p3 = ((val_9_fu_1450_p2[0:0] == 1'b1) ? 4'd10 : 4'd9);

assign select_ln340_3_fu_1516_p3 = ((val_11_fu_1510_p2[0:0] == 1'b1) ? 4'd12 : 4'd11);

assign select_ln340_4_fu_1616_p3 = ((val_14_fu_1610_p2[0:0] == 1'b1) ? 3'd7 : 3'd6);

assign select_ln340_5_fu_1630_p3 = ((or_ln340_fu_1624_p2[0:0] == 1'b1) ? select_ln340_4_fu_1616_p3 : 3'd5);

assign select_ln340_6_fu_1770_p3 = ((val_18_fu_1764_p2[0:0] == 1'b1) ? 3'd4 : 3'd3);

assign select_ln340_7_fu_1852_p3 = ((val_22_fu_1846_p2[0:0] == 1'b1) ? 4'd8 : 4'd7);

assign select_ln340_8_fu_1918_p3 = ((val_24_fu_1912_p2[0:0] == 1'b1) ? 4'd10 : 4'd9);

assign select_ln340_9_fu_1950_p3 = ((val_26_fu_1944_p2[0:0] == 1'b1) ? 4'd12 : 4'd11);

assign select_ln340_fu_1224_p3 = ((val_3_fu_1218_p2[0:0] == 1'b1) ? 3'd4 : 3'd3);

assign select_ln347_fu_2040_p3 = ((or_ln347_fu_2034_p2[0:0] == 1'b1) ? sext_ln347_fu_2030_p1 : select_ln339_10_fu_1964_p3);

assign select_ln382_fu_2489_p3 = ((isDistance_reg_1037[0:0] == 1'b1) ? lext_q0 : dext_q0);

assign sext_ln309_fu_2565_p1 = $signed(tmpVal_3_fu_2557_p3);

assign sext_ln339_fu_1638_p1 = $signed(select_ln340_5_fu_1630_p3);

assign sext_ln347_fu_2030_p1 = $signed(select_ln340_11_fu_2022_p3);

assign shl_ln382_fu_2501_p2 = 16'd1 << zext_ln382_fu_2497_p1;

assign shl_ln430_fu_2836_p2 = zext_ln430_fu_2828_p1 << zext_ln430_1_fu_2832_p1;

assign tmpVal_1_fu_2513_p2 = (trunc_ln372_fu_2486_p1 & add_ln382_fu_2507_p2);

assign tmpVal_3_fu_2557_p3 = {{5'd16}, {trunc_ln396_fu_2553_p1}};

assign tmpVal_4_fu_2575_p5 = {{ignoreValue_cast_cast_reg_2950}, {tmpVal_fu_354[7:0]}};

assign tmpVal_6_fu_2600_p3 = ((isExtra_reg_1048[0:0] == 1'b1) ? tmpVal_1_fu_2513_p2 : zext_ln411_fu_2596_p1);

assign tmpVal_7_fu_2620_p3 = ((sel_tmp2_fu_2614_p2[0:0] == 1'b1) ? zext_ln419_fu_2535_p1 : tmpVal_6_fu_2600_p3);

assign tmpVal_8_fu_2646_p3 = ((and_ln395_fu_2640_p2[0:0] == 1'b1) ? sext_ln309_fu_2565_p1 : tmpVal_7_fu_2620_p3);

assign tmpVal_9_fu_2672_p3 = ((huffDone_1_fu_2666_p2[0:0] == 1'b1) ? tmpVal_4_fu_2575_p5 : tmpVal_8_fu_2646_p3);

integer ap_tvar_int_7;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_7 = 12 - 1; ap_tvar_int_7 >= 0; ap_tvar_int_7 = ap_tvar_int_7 - 1) begin
        if (ap_tvar_int_7 > 11 - 0) begin
            tmp_10_fu_1490_p4[ap_tvar_int_7] = 1'b0;
        end else begin
            tmp_10_fu_1490_p4[ap_tvar_int_7] = ap_sig_allocacmp_buffer_3[11 - ap_tvar_int_7];
        end
    end
end

integer ap_tvar_int_8;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_8 = 13 - 1; ap_tvar_int_8 >= 0; ap_tvar_int_8 = ap_tvar_int_8 - 1) begin
        if (ap_tvar_int_8 > 12 - 0) begin
            tmp_11_fu_1538_p4[ap_tvar_int_8] = 1'b0;
        end else begin
            tmp_11_fu_1538_p4[ap_tvar_int_8] = ap_sig_allocacmp_buffer_3[12 - ap_tvar_int_8];
        end
    end
end

integer ap_tvar_int_9;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_9 = 14 - 1; ap_tvar_int_9 >= 0; ap_tvar_int_9 = ap_tvar_int_9 - 1) begin
        if (ap_tvar_int_9 > 13 - 0) begin
            tmp_12_fu_1564_p4[ap_tvar_int_9] = 1'b0;
        end else begin
            tmp_12_fu_1564_p4[ap_tvar_int_9] = ap_sig_allocacmp_buffer_3[13 - ap_tvar_int_9];
        end
    end
end

integer ap_tvar_int_10;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_10 = 15 - 1; ap_tvar_int_10 >= 0; ap_tvar_int_10 = ap_tvar_int_10 - 1) begin
        if (ap_tvar_int_10 > 14 - 0) begin
            tmp_13_fu_1590_p4[ap_tvar_int_10] = 1'b0;
        end else begin
            tmp_13_fu_1590_p4[ap_tvar_int_10] = ap_sig_allocacmp_buffer_3[14 - ap_tvar_int_10];
        end
    end
end

assign tmp_14_fu_2539_p3 = lsymbol_fu_2352_p33[32'd8];

assign tmp_15_fu_2802_p4 = {{counter_1_fu_2740_p2[5:4]}};

assign tmp_16_fu_2852_p3 = buffer_1_fu_2731_p2[32'd31];

integer ap_tvar_int_11;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_11 = 2 - 1; ap_tvar_int_11 >= 0; ap_tvar_int_11 = ap_tvar_int_11 - 1) begin
        if (ap_tvar_int_11 > 1 - 0) begin
            tmp_1_fu_1138_p4[ap_tvar_int_11] = 1'b0;
        end else begin
            tmp_1_fu_1138_p4[ap_tvar_int_11] = ap_sig_allocacmp_buffer_3[1 - ap_tvar_int_11];
        end
    end
end

integer ap_tvar_int_12;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_12 = 3 - 1; ap_tvar_int_12 >= 0; ap_tvar_int_12 = ap_tvar_int_12 - 1) begin
        if (ap_tvar_int_12 > 2 - 0) begin
            tmp_2_fu_1172_p4[ap_tvar_int_12] = 1'b0;
        end else begin
            tmp_2_fu_1172_p4[ap_tvar_int_12] = ap_sig_allocacmp_buffer_3[2 - ap_tvar_int_12];
        end
    end
end

integer ap_tvar_int_13;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_13 = 4 - 1; ap_tvar_int_13 >= 0; ap_tvar_int_13 = ap_tvar_int_13 - 1) begin
        if (ap_tvar_int_13 > 3 - 0) begin
            tmp_3_fu_1198_p4[ap_tvar_int_13] = 1'b0;
        end else begin
            tmp_3_fu_1198_p4[ap_tvar_int_13] = ap_sig_allocacmp_buffer_3[3 - ap_tvar_int_13];
        end
    end
end

integer ap_tvar_int_14;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_14 = 5 - 1; ap_tvar_int_14 >= 0; ap_tvar_int_14 = ap_tvar_int_14 - 1) begin
        if (ap_tvar_int_14 > 4 - 0) begin
            tmp_4_fu_1250_p4[ap_tvar_int_14] = 1'b0;
        end else begin
            tmp_4_fu_1250_p4[ap_tvar_int_14] = ap_sig_allocacmp_buffer_3[4 - ap_tvar_int_14];
        end
    end
end

integer ap_tvar_int_15;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_15 = 6 - 1; ap_tvar_int_15 >= 0; ap_tvar_int_15 = ap_tvar_int_15 - 1) begin
        if (ap_tvar_int_15 > 5 - 0) begin
            tmp_5_fu_1276_p4[ap_tvar_int_15] = 1'b0;
        end else begin
            tmp_5_fu_1276_p4[ap_tvar_int_15] = ap_sig_allocacmp_buffer_3[5 - ap_tvar_int_15];
        end
    end
end

integer ap_tvar_int_16;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_16 = 7 - 1; ap_tvar_int_16 >= 0; ap_tvar_int_16 = ap_tvar_int_16 - 1) begin
        if (ap_tvar_int_16 > 6 - 0) begin
            tmp_6_fu_1310_p4[ap_tvar_int_16] = 1'b0;
        end else begin
            tmp_6_fu_1310_p4[ap_tvar_int_16] = ap_sig_allocacmp_buffer_3[6 - ap_tvar_int_16];
        end
    end
end

integer ap_tvar_int_17;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_17 = 8 - 1; ap_tvar_int_17 >= 0; ap_tvar_int_17 = ap_tvar_int_17 - 1) begin
        if (ap_tvar_int_17 > 7 - 0) begin
            tmp_7_fu_1336_p4[ap_tvar_int_17] = 1'b0;
        end else begin
            tmp_7_fu_1336_p4[ap_tvar_int_17] = ap_sig_allocacmp_buffer_3[7 - ap_tvar_int_17];
        end
    end
end

integer ap_tvar_int_18;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_18 = 9 - 1; ap_tvar_int_18 >= 0; ap_tvar_int_18 = ap_tvar_int_18 - 1) begin
        if (ap_tvar_int_18 > 8 - 0) begin
            tmp_8_fu_1404_p4[ap_tvar_int_18] = 1'b0;
        end else begin
            tmp_8_fu_1404_p4[ap_tvar_int_18] = ap_sig_allocacmp_buffer_3[8 - ap_tvar_int_18];
        end
    end
end

integer ap_tvar_int_19;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_19 = 10 - 1; ap_tvar_int_19 >= 0; ap_tvar_int_19 = ap_tvar_int_19 - 1) begin
        if (ap_tvar_int_19 > 9 - 0) begin
            tmp_9_fu_1430_p4[ap_tvar_int_19] = 1'b0;
        end else begin
            tmp_9_fu_1430_p4[ap_tvar_int_19] = ap_sig_allocacmp_buffer_3[9 - ap_tvar_int_19];
        end
    end
end

assign tmp_fu_2519_p4 = {{lsymbol_2_fu_2419_p33[4:2]}};

integer ap_tvar_int_20;

always @ (ap_sig_allocacmp_buffer_3) begin
    for (ap_tvar_int_20 = 11 - 1; ap_tvar_int_20 >= 0; ap_tvar_int_20 = ap_tvar_int_20 - 1) begin
        if (ap_tvar_int_20 > 10 - 0) begin
            tmp_s_fu_1464_p4[ap_tvar_int_20] = 1'b0;
        end else begin
            tmp_s_fu_1464_p4[ap_tvar_int_20] = ap_sig_allocacmp_buffer_3[10 - ap_tvar_int_20];
        end
    end
end

assign trunc_ln339_fu_1118_p1 = ap_sig_allocacmp_buffer_3[0:0];

assign trunc_ln372_fu_2486_p1 = buffer_3_reg_2955[15:0];

assign trunc_ln396_fu_2553_p1 = lsymbol_fu_2352_p33[7:0];

assign trunc_ln430_fu_2842_p1 = buffer_1_fu_2731_p2[30:0];

assign val0_4_fu_2687_p3 = ((or_ln401_fu_2681_p2[0:0] == 1'b1) ? val0_1_reg_2966 : val0_5_fu_2586_p1);

assign val0_5_fu_2586_p1 = lsymbol_fu_2352_p33[4:0];

assign val1_2_fu_2706_p3 = ((sel_tmp21_fu_2700_p2[0:0] == 1'b1) ? val1_1_reg_2961 : lsymbol_2_fu_2419_p33);

assign val_10_fu_1484_p2 = (icmp_ln339_10_fu_1478_p2 ^ 1'd1);

assign val_11_fu_1510_p2 = (icmp_ln339_11_fu_1504_p2 ^ 1'd1);

assign val_12_fu_1558_p2 = (icmp_ln339_12_fu_1552_p2 ^ 1'd1);

assign val_13_fu_1584_p2 = (icmp_ln339_13_fu_1578_p2 ^ 1'd1);

assign val_14_fu_1610_p2 = (icmp_ln339_14_fu_1604_p2 ^ 1'd1);

assign val_15_fu_1720_p2 = (icmp_ln339_15_fu_1714_p2 ^ 1'd1);

assign val_16_fu_1732_p2 = (icmp_ln339_16_fu_1726_p2 ^ 1'd1);

assign val_17_fu_1752_p2 = (icmp_ln339_17_fu_1746_p2 ^ 1'd1);

assign val_18_fu_1764_p2 = (icmp_ln339_18_fu_1758_p2 ^ 1'd1);

assign val_19_fu_1802_p2 = (icmp_ln339_19_fu_1796_p2 ^ 1'd1);

assign val_1_fu_1158_p2 = (icmp_ln339_1_fu_1152_p2 ^ 1'd1);

assign val_20_fu_1814_p2 = (icmp_ln339_20_fu_1808_p2 ^ 1'd1);

assign val_21_fu_1834_p2 = (icmp_ln339_21_fu_1828_p2 ^ 1'd1);

assign val_22_fu_1846_p2 = (icmp_ln339_22_fu_1840_p2 ^ 1'd1);

assign val_23_fu_1900_p2 = (icmp_ln339_23_fu_1894_p2 ^ 1'd1);

assign val_24_fu_1912_p2 = (icmp_ln339_24_fu_1906_p2 ^ 1'd1);

assign val_25_fu_1932_p2 = (icmp_ln339_25_fu_1926_p2 ^ 1'd1);

assign val_26_fu_1944_p2 = (icmp_ln339_26_fu_1938_p2 ^ 1'd1);

assign val_27_fu_1978_p2 = (icmp_ln339_27_fu_1972_p2 ^ 1'd1);

assign val_28_fu_1990_p2 = (icmp_ln339_28_fu_1984_p2 ^ 1'd1);

assign val_29_fu_2002_p2 = (icmp_ln339_29_fu_1996_p2 ^ 1'd1);

assign val_2_fu_1192_p2 = (icmp_ln339_2_fu_1186_p2 ^ 1'd1);

assign val_3_fu_1218_p2 = (icmp_ln339_3_fu_1212_p2 ^ 1'd1);

assign val_4_fu_1270_p2 = (icmp_ln339_4_fu_1264_p2 ^ 1'd1);

assign val_5_fu_1296_p2 = (icmp_ln339_5_fu_1290_p2 ^ 1'd1);

assign val_6_fu_1330_p2 = (icmp_ln339_6_fu_1324_p2 ^ 1'd1);

assign val_7_fu_1356_p2 = (icmp_ln339_7_fu_1350_p2 ^ 1'd1);

assign val_8_fu_1424_p2 = (icmp_ln339_8_fu_1418_p2 ^ 1'd1);

assign val_9_fu_1450_p2 = (icmp_ln339_9_fu_1444_p2 ^ 1'd1);

assign val_fu_1132_p2 = (icmp_ln339_fu_1126_p2 ^ 1'd1);

assign xor_ln395_1_fu_2547_p2 = (tmp_14_fu_2539_p3 ^ 1'd1);

assign xor_ln401_1_fu_2790_p2 = (or_ln401_3_fu_2784_p2 ^ 1'd1);

assign xor_ln401_fu_2752_p2 = (or_ln401_fu_2681_p2 ^ 1'd1);

assign zext_ln339_10_fu_1440_p1 = tmp_9_fu_1430_p4;

assign zext_ln339_11_fu_1474_p1 = tmp_s_fu_1464_p4;

assign zext_ln339_12_fu_1500_p1 = tmp_10_fu_1490_p4;

assign zext_ln339_13_fu_1548_p1 = tmp_11_fu_1538_p4;

assign zext_ln339_14_fu_1574_p1 = tmp_12_fu_1564_p4;

assign zext_ln339_15_fu_1600_p1 = tmp_13_fu_1590_p4;

assign zext_ln339_16_fu_1792_p1 = select_ln339_7_fu_1784_p3;

assign zext_ln339_1_fu_1148_p1 = tmp_1_fu_1138_p4;

assign zext_ln339_2_fu_1182_p1 = tmp_2_fu_1172_p4;

assign zext_ln339_3_fu_1208_p1 = tmp_3_fu_1198_p4;

assign zext_ln339_4_fu_1246_p1 = select_ln339_fu_1238_p3;

assign zext_ln339_5_fu_1260_p1 = tmp_4_fu_1250_p4;

assign zext_ln339_6_fu_1286_p1 = tmp_5_fu_1276_p4;

assign zext_ln339_7_fu_1320_p1 = tmp_6_fu_1310_p4;

assign zext_ln339_8_fu_1346_p1 = tmp_7_fu_1336_p4;

assign zext_ln339_9_fu_1414_p1 = tmp_8_fu_1404_p4;

assign zext_ln339_fu_1122_p1 = trunc_ln339_fu_1118_p1;

assign zext_ln371_fu_2266_p1 = ap_sig_allocacmp_val0_1;

assign zext_ln376_fu_2271_p1 = ap_sig_allocacmp_val1_1;

assign zext_ln382_fu_2497_p1 = select_ln382_fu_2489_p3;

assign zext_ln411_fu_2596_p1 = val0_5_fu_2586_p1;

assign zext_ln419_fu_2535_p1 = lsymbol_2_fu_2419_p33;

assign zext_ln430_1_fu_2832_p1 = counter_1_fu_2740_p2;

assign zext_ln430_fu_2828_p1 = huffman_input_stream_dout;

endmodule //decompressor_kernel_huffmanBytegenLL_Pipeline_ByteGen
