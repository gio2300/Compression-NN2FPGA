// ==============================================================
// Generated by Vitis HLS v2022.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module decompressor_kernel_huffmanDecoderLL_2_0_Pipeline_dyn_len_bits (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        done_26,
        bits_cntr_39,
        bitbuffer_37,
        zext_ln1069_1,
        dynamic_lens_address0,
        dynamic_lens_ce0,
        dynamic_lens_we0,
        dynamic_lens_d0,
        huffman_input_stream_dout,
        huffman_input_stream_empty_n,
        huffman_input_stream_read,
        huffman_eos_stream_dout,
        huffman_eos_stream_empty_n,
        huffman_eos_stream_read,
        done_9_out,
        done_9_out_ap_vld,
        bits_cntr_7_out,
        bits_cntr_7_out_ap_vld,
        bitbuffer_9_out,
        bitbuffer_9_out_ap_vld,
        order_address0,
        order_ce0,
        order_q0,
        call_ret29_discardBitStreamLL_fu_610_p_din1,
        call_ret29_discardBitStreamLL_fu_610_p_din2,
        call_ret29_discardBitStreamLL_fu_610_p_din3,
        call_ret29_discardBitStreamLL_fu_610_p_dout0_0,
        call_ret29_discardBitStreamLL_fu_610_p_dout0_1,
        call_ret29_discardBitStreamLL_fu_610_p_ready
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] done_26;
input  [5:0] bits_cntr_39;
input  [31:0] bitbuffer_37;
input  [3:0] zext_ln1069_1;
output  [8:0] dynamic_lens_address0;
output   dynamic_lens_ce0;
output   dynamic_lens_we0;
output  [4:0] dynamic_lens_d0;
input  [15:0] huffman_input_stream_dout;
input   huffman_input_stream_empty_n;
output   huffman_input_stream_read;
input  [0:0] huffman_eos_stream_dout;
input   huffman_eos_stream_empty_n;
output   huffman_eos_stream_read;
output  [0:0] done_9_out;
output   done_9_out_ap_vld;
output  [5:0] bits_cntr_7_out;
output   bits_cntr_7_out_ap_vld;
output  [31:0] bitbuffer_9_out;
output   bitbuffer_9_out_ap_vld;
output  [4:0] order_address0;
output   order_ce0;
input  [4:0] order_q0;
output  [31:0] call_ret29_discardBitStreamLL_fu_610_p_din1;
output  [5:0] call_ret29_discardBitStreamLL_fu_610_p_din2;
output  [4:0] call_ret29_discardBitStreamLL_fu_610_p_din3;
input  [31:0] call_ret29_discardBitStreamLL_fu_610_p_dout0_0;
input  [5:0] call_ret29_discardBitStreamLL_fu_610_p_dout0_1;
input   call_ret29_discardBitStreamLL_fu_610_p_ready;

reg ap_idle;
reg dynamic_lens_ce0;
reg dynamic_lens_we0;
reg huffman_input_stream_read;
reg huffman_eos_stream_read;
reg done_9_out_ap_vld;
reg bits_cntr_7_out_ap_vld;
reg bitbuffer_9_out_ap_vld;
reg order_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln1069_fu_266_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    huffman_input_stream_blk_n;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1069_reg_443;
reg   [0:0] or_ln1071_reg_447;
reg    huffman_eos_stream_blk_n;
reg   [31:0] bitbuffer_9_load_reg_430;
wire    ap_block_pp0_stage1_11001;
reg   [5:0] bits_cntr_7_load_reg_436;
wire   [0:0] or_ln1071_fu_297_p2;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_predicate_op44_read_state3;
reg    ap_predicate_op50_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg   [5:0] ap_phi_mux_bits_cntr_8_phi_fu_198_p4;
wire   [5:0] bits_cntr_fu_347_p2;
reg   [5:0] ap_phi_reg_pp0_iter1_bits_cntr_8_reg_195;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] ap_phi_reg_pp0_iter0_bits_cntr_8_reg_195;
reg   [31:0] ap_phi_mux_bitbuffer_10_phi_fu_207_p4;
wire   [31:0] bitbuffer_fu_341_p2;
reg   [31:0] ap_phi_reg_pp0_iter1_bitbuffer_10_reg_204;
wire   [31:0] ap_phi_reg_pp0_iter0_bitbuffer_10_reg_204;
wire   [63:0] zext_ln1077_fu_303_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln1077_1_fu_367_p1;
reg   [4:0] dynamic_curInSize_fu_92;
wire   [4:0] dynamic_curInSize_2_fu_272_p2;
wire    ap_loop_init;
reg   [5:0] indvars_iv3_fu_96;
wire   [5:0] add_ln1069_fu_308_p2;
wire   [5:0] zext_ln1069_1_cast_fu_223_p1;
reg   [31:0] bitbuffer_9_fu_100;
reg   [5:0] bits_cntr_7_fu_104;
reg   [0:0] done_9_fu_108;
wire    ap_block_pp0_stage1_01001;
wire   [1:0] tmp_fu_281_p4;
wire   [0:0] icmp_ln1071_fu_291_p2;
wire   [30:0] zext_ln1073_fu_324_p1;
wire   [30:0] zext_ln1073_1_fu_328_p1;
wire   [30:0] shl_ln1073_fu_331_p2;
wire   [31:0] zext_ln1073_2_fu_337_p1;
wire   [2:0] trunc_ln1077_fu_358_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_103;
reg    ap_condition_332;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 dynamic_curInSize_fu_92 = 5'd0;
#0 indvars_iv3_fu_96 = 6'd0;
#0 bitbuffer_9_fu_100 = 32'd0;
#0 bits_cntr_7_fu_104 = 6'd0;
#0 done_9_fu_108 = 1'd0;
#0 ap_done_reg = 1'b0;
end

decompressor_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_103)) begin
        if (((icmp_ln1069_fu_266_p2 == 1'd0) & (or_ln1071_fu_297_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_bitbuffer_10_reg_204 <= bitbuffer_9_fu_100;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_bitbuffer_10_reg_204 <= ap_phi_reg_pp0_iter0_bitbuffer_10_reg_204;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_103)) begin
        if (((icmp_ln1069_fu_266_p2 == 1'd0) & (or_ln1071_fu_297_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_bits_cntr_8_reg_195 <= bits_cntr_7_fu_104;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_bits_cntr_8_reg_195 <= ap_phi_reg_pp0_iter0_bits_cntr_8_reg_195;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bitbuffer_9_fu_100 <= bitbuffer_37;
        end else if (((icmp_ln1069_reg_443 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            bitbuffer_9_fu_100 <= call_ret29_discardBitStreamLL_fu_610_p_dout0_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bits_cntr_7_fu_104 <= bits_cntr_39;
        end else if (((icmp_ln1069_reg_443 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            bits_cntr_7_fu_104 <= call_ret29_discardBitStreamLL_fu_610_p_dout0_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            done_9_fu_108 <= done_26;
        end else if ((1'b1 == ap_condition_332)) begin
            done_9_fu_108 <= huffman_eos_stream_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        dynamic_curInSize_fu_92 <= 5'd0;
    end else if (((icmp_ln1069_fu_266_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dynamic_curInSize_fu_92 <= dynamic_curInSize_2_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        indvars_iv3_fu_96 <= zext_ln1069_1_cast_fu_223_p1;
    end else if (((icmp_ln1069_fu_266_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvars_iv3_fu_96 <= add_ln1069_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bitbuffer_9_load_reg_430 <= bitbuffer_9_fu_100;
        bits_cntr_7_load_reg_436 <= bits_cntr_7_fu_104;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln1069_reg_443 <= icmp_ln1069_fu_266_p2;
        or_ln1071_reg_447 <= or_ln1071_fu_297_p2;
    end
end

always @ (*) begin
    if (((icmp_ln1069_fu_266_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln1071_reg_447 == 1'd0) & (icmp_ln1069_reg_443 == 1'd0))) begin
        ap_phi_mux_bitbuffer_10_phi_fu_207_p4 = bitbuffer_fu_341_p2;
    end else begin
        ap_phi_mux_bitbuffer_10_phi_fu_207_p4 = ap_phi_reg_pp0_iter1_bitbuffer_10_reg_204;
    end
end

always @ (*) begin
    if (((or_ln1071_reg_447 == 1'd0) & (icmp_ln1069_reg_443 == 1'd0))) begin
        ap_phi_mux_bits_cntr_8_phi_fu_198_p4 = bits_cntr_fu_347_p2;
    end else begin
        ap_phi_mux_bits_cntr_8_phi_fu_198_p4 = ap_phi_reg_pp0_iter1_bits_cntr_8_reg_195;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1069_fu_266_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bitbuffer_9_out_ap_vld = 1'b1;
    end else begin
        bitbuffer_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1069_fu_266_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bits_cntr_7_out_ap_vld = 1'b1;
    end else begin
        bits_cntr_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1069_fu_266_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        done_9_out_ap_vld = 1'b1;
    end else begin
        done_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_lens_ce0 = 1'b1;
    end else begin
        dynamic_lens_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1069_reg_443 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_lens_we0 = 1'b1;
    end else begin
        dynamic_lens_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln1071_reg_447 == 1'd0) & (icmp_ln1069_reg_443 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffman_eos_stream_blk_n = huffman_eos_stream_empty_n;
    end else begin
        huffman_eos_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op50_read_state3 == 1'b1))) begin
        huffman_eos_stream_read = 1'b1;
    end else begin
        huffman_eos_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln1071_reg_447 == 1'd0) & (icmp_ln1069_reg_443 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffman_input_stream_blk_n = huffman_input_stream_empty_n;
    end else begin
        huffman_input_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op44_read_state3 == 1'b1))) begin
        huffman_input_stream_read = 1'b1;
    end else begin
        huffman_input_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        order_ce0 = 1'b1;
    end else begin
        order_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1069_fu_308_p2 = (indvars_iv3_fu_96 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((huffman_eos_stream_empty_n == 1'b0) & (ap_predicate_op50_read_state3 == 1'b1)) | ((huffman_input_stream_empty_n == 1'b0) & (ap_predicate_op44_read_state3 == 1'b1)));
end

always @ (*) begin
    ap_condition_103 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_332 = ((or_ln1071_reg_447 == 1'd0) & (icmp_ln1069_reg_443 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_phi_reg_pp0_iter0_bitbuffer_10_reg_204 = 'bx;

assign ap_phi_reg_pp0_iter0_bits_cntr_8_reg_195 = 'bx;

always @ (*) begin
    ap_predicate_op44_read_state3 = ((or_ln1071_reg_447 == 1'd0) & (icmp_ln1069_reg_443 == 1'd0));
end

always @ (*) begin
    ap_predicate_op50_read_state3 = ((or_ln1071_reg_447 == 1'd0) & (icmp_ln1069_reg_443 == 1'd0));
end

assign bitbuffer_9_out = bitbuffer_9_fu_100;

assign bitbuffer_fu_341_p2 = (zext_ln1073_2_fu_337_p1 + bitbuffer_9_load_reg_430);

assign bits_cntr_7_out = bits_cntr_7_fu_104;

assign bits_cntr_fu_347_p2 = (bits_cntr_7_load_reg_436 + 6'd16);

assign call_ret29_discardBitStreamLL_fu_610_p_din1 = ap_phi_mux_bitbuffer_10_phi_fu_207_p4;

assign call_ret29_discardBitStreamLL_fu_610_p_din2 = ap_phi_mux_bits_cntr_8_phi_fu_198_p4;

assign call_ret29_discardBitStreamLL_fu_610_p_din3 = 5'd3;

assign done_9_out = done_9_fu_108;

assign dynamic_curInSize_2_fu_272_p2 = (dynamic_curInSize_fu_92 + 5'd1);

assign dynamic_lens_address0 = zext_ln1077_1_fu_367_p1;

assign dynamic_lens_d0 = trunc_ln1077_fu_358_p1;

assign icmp_ln1069_fu_266_p2 = ((indvars_iv3_fu_96 == 6'd19) ? 1'b1 : 1'b0);

assign icmp_ln1071_fu_291_p2 = ((tmp_fu_281_p4 != 2'd0) ? 1'b1 : 1'b0);

assign or_ln1071_fu_297_p2 = (icmp_ln1071_fu_291_p2 | done_9_fu_108);

assign order_address0 = zext_ln1077_fu_303_p1;

assign shl_ln1073_fu_331_p2 = zext_ln1073_fu_324_p1 << zext_ln1073_1_fu_328_p1;

assign tmp_fu_281_p4 = {{bits_cntr_7_fu_104[5:4]}};

assign trunc_ln1077_fu_358_p1 = ap_phi_mux_bitbuffer_10_phi_fu_207_p4[2:0];

assign zext_ln1069_1_cast_fu_223_p1 = zext_ln1069_1;

assign zext_ln1073_1_fu_328_p1 = bits_cntr_7_load_reg_436;

assign zext_ln1073_2_fu_337_p1 = shl_ln1073_fu_331_p2;

assign zext_ln1073_fu_324_p1 = huffman_input_stream_dout;

assign zext_ln1077_1_fu_367_p1 = order_q0;

assign zext_ln1077_fu_303_p1 = dynamic_curInSize_fu_92;

endmodule //decompressor_kernel_huffmanDecoderLL_2_0_Pipeline_dyn_len_bits
