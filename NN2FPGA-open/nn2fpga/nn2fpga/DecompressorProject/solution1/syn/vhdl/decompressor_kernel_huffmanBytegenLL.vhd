-- ==============================================================
-- Generated by Vitis HLS v2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decompressor_kernel_huffmanBytegenLL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_bitbuffer_read : IN STD_LOGIC_VECTOR (31 downto 0);
    bits_cntr_read : IN STD_LOGIC_VECTOR (5 downto 0);
    lz77_output_stream_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    lz77_output_stream_full_n : IN STD_LOGIC;
    lz77_output_stream_write : OUT STD_LOGIC;
    huffman_eos_stream_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    huffman_eos_stream_empty_n : IN STD_LOGIC;
    huffman_eos_stream_read : OUT STD_LOGIC;
    huffman_input_stream_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    huffman_input_stream_empty_n : IN STD_LOGIC;
    huffman_input_stream_read : OUT STD_LOGIC;
    codeOffsets_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    codeOffsets_0_ce0 : OUT STD_LOGIC;
    codeOffsets_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    codeOffsets_0_ce1 : OUT STD_LOGIC;
    codeOffsets_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    codeOffsets_1_ce0 : OUT STD_LOGIC;
    codeOffsets_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    codeOffsets_1_ce1 : OUT STD_LOGIC;
    codeOffsets_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bl1Codes_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    bl1Codes_0_ce0 : OUT STD_LOGIC;
    bl1Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl1Codes_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    bl1Codes_1_ce0 : OUT STD_LOGIC;
    bl1Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl2Codes_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    bl2Codes_0_ce0 : OUT STD_LOGIC;
    bl2Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl2Codes_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    bl2Codes_1_ce0 : OUT STD_LOGIC;
    bl2Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl3Codes_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bl3Codes_0_ce0 : OUT STD_LOGIC;
    bl3Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl3Codes_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bl3Codes_1_ce0 : OUT STD_LOGIC;
    bl3Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl4Codes_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bl4Codes_0_ce0 : OUT STD_LOGIC;
    bl4Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl4Codes_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bl4Codes_1_ce0 : OUT STD_LOGIC;
    bl4Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl5Codes_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bl5Codes_0_ce0 : OUT STD_LOGIC;
    bl5Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl5Codes_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bl5Codes_1_ce0 : OUT STD_LOGIC;
    bl5Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl6Codes_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bl6Codes_0_ce0 : OUT STD_LOGIC;
    bl6Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl6Codes_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bl6Codes_1_ce0 : OUT STD_LOGIC;
    bl6Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl7Codes_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bl7Codes_0_ce0 : OUT STD_LOGIC;
    bl7Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl7Codes_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bl7Codes_1_ce0 : OUT STD_LOGIC;
    bl7Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl8Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl8Codes_0_ce0 : OUT STD_LOGIC;
    bl8Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl8Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl8Codes_1_ce0 : OUT STD_LOGIC;
    bl8Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl9Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl9Codes_0_ce0 : OUT STD_LOGIC;
    bl9Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl9Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl9Codes_1_ce0 : OUT STD_LOGIC;
    bl9Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl10Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl10Codes_0_ce0 : OUT STD_LOGIC;
    bl10Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl10Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl10Codes_1_ce0 : OUT STD_LOGIC;
    bl10Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl11Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl11Codes_0_ce0 : OUT STD_LOGIC;
    bl11Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl11Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl11Codes_1_ce0 : OUT STD_LOGIC;
    bl11Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl12Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl12Codes_0_ce0 : OUT STD_LOGIC;
    bl12Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl12Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl12Codes_1_ce0 : OUT STD_LOGIC;
    bl12Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl13Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl13Codes_0_ce0 : OUT STD_LOGIC;
    bl13Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl13Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl13Codes_1_ce0 : OUT STD_LOGIC;
    bl13Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl14Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl14Codes_0_ce0 : OUT STD_LOGIC;
    bl14Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl14Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl14Codes_1_ce0 : OUT STD_LOGIC;
    bl14Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl15Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl15Codes_0_ce0 : OUT STD_LOGIC;
    bl15Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl15Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bl15Codes_1_ce0 : OUT STD_LOGIC;
    bl15Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (0 downto 0);
    ignoreValue : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of decompressor_kernel_huffmanBytegenLL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal codeOffsets_0_load_reg_638 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal codeOffsets_1_load_reg_663 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_0_load_1_reg_668 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal codeOffsets_0_load_2_reg_673 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_1_reg_698 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_2_reg_703 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_0_load_3_reg_708 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal codeOffsets_0_load_4_reg_713 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_3_reg_738 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_4_reg_743 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_0_load_5_reg_748 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal codeOffsets_0_load_6_reg_753 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_5_reg_778 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_6_reg_783 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_0_load_7_reg_788 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal codeOffsets_0_load_8_reg_793 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_7_reg_818 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_8_reg_823 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_0_load_9_reg_828 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal codeOffsets_0_load_10_reg_833 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_9_reg_858 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_10_reg_863 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal codeOffsets_0_load_11_reg_888 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_0_load_12_reg_893 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_11_reg_918 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_12_reg_923 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_0_load_13_reg_928 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal codeOffsets_0_load_14_reg_933 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_13_reg_938 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_1_load_14_reg_943 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_start : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_done : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_idle : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_ready : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_lz77_output_stream_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_lz77_output_stream_write : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_huffman_input_stream_read : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_huffman_eos_stream_read : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl1Codes_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl1Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl1Codes_1_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl1Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl2Codes_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl2Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl2Codes_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl2Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl3Codes_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl3Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl3Codes_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl3Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl4Codes_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl4Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl4Codes_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl4Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl5Codes_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl5Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl5Codes_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl5Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl6Codes_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl6Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl6Codes_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl6Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl7Codes_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl7Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl7Codes_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl7Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl8Codes_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl8Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl8Codes_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl8Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl9Codes_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl9Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl9Codes_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl9Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl10Codes_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl10Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl10Codes_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl10Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl11Codes_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl11Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl11Codes_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl11Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl12Codes_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl12Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl12Codes_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl12Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl13Codes_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl13Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl13Codes_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl13Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl14Codes_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl14Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl14Codes_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl14Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl15Codes_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl15Codes_0_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl15Codes_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl15Codes_1_ce0 : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_done_0_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_done_0_out_ap_vld : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_buffer_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_buffer_out_ap_vld : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_counter_out : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_counter_out_ap_vld : STD_LOGIC;
    signal grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component decompressor_kernel_huffmanBytegenLL_Pipeline_ByteGen IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lz77_output_stream_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        lz77_output_stream_full_n : IN STD_LOGIC;
        lz77_output_stream_write : OUT STD_LOGIC;
        huffman_input_stream_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        huffman_input_stream_empty_n : IN STD_LOGIC;
        huffman_input_stream_read : OUT STD_LOGIC;
        huffman_eos_stream_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        huffman_eos_stream_empty_n : IN STD_LOGIC;
        huffman_eos_stream_read : OUT STD_LOGIC;
        p_read2 : IN STD_LOGIC_VECTOR (0 downto 0);
        p_bitbuffer_read : IN STD_LOGIC_VECTOR (31 downto 0);
        bits_cntr_read : IN STD_LOGIC_VECTOR (5 downto 0);
        codeOffsets_0_load : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_0_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_1_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
        bl1Codes_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        bl1Codes_0_ce0 : OUT STD_LOGIC;
        bl1Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl1Codes_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        bl1Codes_1_ce0 : OUT STD_LOGIC;
        bl1Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl2Codes_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        bl2Codes_0_ce0 : OUT STD_LOGIC;
        bl2Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl2Codes_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        bl2Codes_1_ce0 : OUT STD_LOGIC;
        bl2Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl3Codes_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bl3Codes_0_ce0 : OUT STD_LOGIC;
        bl3Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl3Codes_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bl3Codes_1_ce0 : OUT STD_LOGIC;
        bl3Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl4Codes_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bl4Codes_0_ce0 : OUT STD_LOGIC;
        bl4Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl4Codes_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bl4Codes_1_ce0 : OUT STD_LOGIC;
        bl4Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl5Codes_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bl5Codes_0_ce0 : OUT STD_LOGIC;
        bl5Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl5Codes_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bl5Codes_1_ce0 : OUT STD_LOGIC;
        bl5Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl6Codes_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bl6Codes_0_ce0 : OUT STD_LOGIC;
        bl6Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl6Codes_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bl6Codes_1_ce0 : OUT STD_LOGIC;
        bl6Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl7Codes_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bl7Codes_0_ce0 : OUT STD_LOGIC;
        bl7Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl7Codes_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bl7Codes_1_ce0 : OUT STD_LOGIC;
        bl7Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl8Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl8Codes_0_ce0 : OUT STD_LOGIC;
        bl8Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl8Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl8Codes_1_ce0 : OUT STD_LOGIC;
        bl8Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl9Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl9Codes_0_ce0 : OUT STD_LOGIC;
        bl9Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl9Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl9Codes_1_ce0 : OUT STD_LOGIC;
        bl9Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl10Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl10Codes_0_ce0 : OUT STD_LOGIC;
        bl10Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl10Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl10Codes_1_ce0 : OUT STD_LOGIC;
        bl10Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl11Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl11Codes_0_ce0 : OUT STD_LOGIC;
        bl11Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl11Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl11Codes_1_ce0 : OUT STD_LOGIC;
        bl11Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl12Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl12Codes_0_ce0 : OUT STD_LOGIC;
        bl12Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl12Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl12Codes_1_ce0 : OUT STD_LOGIC;
        bl12Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl13Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl13Codes_0_ce0 : OUT STD_LOGIC;
        bl13Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl13Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl13Codes_1_ce0 : OUT STD_LOGIC;
        bl13Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl14Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl14Codes_0_ce0 : OUT STD_LOGIC;
        bl14Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl14Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl14Codes_1_ce0 : OUT STD_LOGIC;
        bl14Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl15Codes_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl15Codes_0_ce0 : OUT STD_LOGIC;
        bl15Codes_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl15Codes_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl15Codes_1_ce0 : OUT STD_LOGIC;
        bl15Codes_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ignoreValue_cast : IN STD_LOGIC_VECTOR (2 downto 0);
        done_0_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        done_0_out_ap_vld : OUT STD_LOGIC;
        buffer_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_out_ap_vld : OUT STD_LOGIC;
        counter_out : OUT STD_LOGIC_VECTOR (5 downto 0);
        counter_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468 : component decompressor_kernel_huffmanBytegenLL_Pipeline_ByteGen
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_start,
        ap_done => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_done,
        ap_idle => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_idle,
        ap_ready => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_ready,
        lz77_output_stream_din => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_lz77_output_stream_din,
        lz77_output_stream_full_n => lz77_output_stream_full_n,
        lz77_output_stream_write => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_lz77_output_stream_write,
        huffman_input_stream_dout => huffman_input_stream_dout,
        huffman_input_stream_empty_n => huffman_input_stream_empty_n,
        huffman_input_stream_read => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_huffman_input_stream_read,
        huffman_eos_stream_dout => huffman_eos_stream_dout,
        huffman_eos_stream_empty_n => huffman_eos_stream_empty_n,
        huffman_eos_stream_read => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_huffman_eos_stream_read,
        p_read2 => p_read2,
        p_bitbuffer_read => p_bitbuffer_read,
        bits_cntr_read => bits_cntr_read,
        codeOffsets_0_load => codeOffsets_0_load_reg_638,
        codeOffsets_0_load_1 => codeOffsets_0_load_1_reg_668,
        codeOffsets_0_load_2 => codeOffsets_0_load_2_reg_673,
        codeOffsets_0_load_3 => codeOffsets_0_load_3_reg_708,
        codeOffsets_0_load_4 => codeOffsets_0_load_4_reg_713,
        codeOffsets_0_load_5 => codeOffsets_0_load_5_reg_748,
        codeOffsets_0_load_6 => codeOffsets_0_load_6_reg_753,
        codeOffsets_0_load_7 => codeOffsets_0_load_7_reg_788,
        codeOffsets_0_load_8 => codeOffsets_0_load_8_reg_793,
        codeOffsets_0_load_9 => codeOffsets_0_load_9_reg_828,
        codeOffsets_0_load_10 => codeOffsets_0_load_10_reg_833,
        codeOffsets_0_load_11 => codeOffsets_0_load_11_reg_888,
        codeOffsets_0_load_12 => codeOffsets_0_load_12_reg_893,
        codeOffsets_0_load_13 => codeOffsets_0_load_13_reg_928,
        codeOffsets_0_load_14 => codeOffsets_0_load_14_reg_933,
        codeOffsets_1_load => codeOffsets_1_load_reg_663,
        codeOffsets_1_load_1 => codeOffsets_1_load_1_reg_698,
        codeOffsets_1_load_2 => codeOffsets_1_load_2_reg_703,
        codeOffsets_1_load_3 => codeOffsets_1_load_3_reg_738,
        codeOffsets_1_load_4 => codeOffsets_1_load_4_reg_743,
        codeOffsets_1_load_5 => codeOffsets_1_load_5_reg_778,
        codeOffsets_1_load_6 => codeOffsets_1_load_6_reg_783,
        codeOffsets_1_load_7 => codeOffsets_1_load_7_reg_818,
        codeOffsets_1_load_8 => codeOffsets_1_load_8_reg_823,
        codeOffsets_1_load_9 => codeOffsets_1_load_9_reg_858,
        codeOffsets_1_load_10 => codeOffsets_1_load_10_reg_863,
        codeOffsets_1_load_11 => codeOffsets_1_load_11_reg_918,
        codeOffsets_1_load_12 => codeOffsets_1_load_12_reg_923,
        codeOffsets_1_load_13 => codeOffsets_1_load_13_reg_938,
        codeOffsets_1_load_14 => codeOffsets_1_load_14_reg_943,
        bl1Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl1Codes_0_address0,
        bl1Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl1Codes_0_ce0,
        bl1Codes_0_q0 => bl1Codes_0_q0,
        bl1Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl1Codes_1_address0,
        bl1Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl1Codes_1_ce0,
        bl1Codes_1_q0 => bl1Codes_1_q0,
        bl2Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl2Codes_0_address0,
        bl2Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl2Codes_0_ce0,
        bl2Codes_0_q0 => bl2Codes_0_q0,
        bl2Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl2Codes_1_address0,
        bl2Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl2Codes_1_ce0,
        bl2Codes_1_q0 => bl2Codes_1_q0,
        bl3Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl3Codes_0_address0,
        bl3Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl3Codes_0_ce0,
        bl3Codes_0_q0 => bl3Codes_0_q0,
        bl3Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl3Codes_1_address0,
        bl3Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl3Codes_1_ce0,
        bl3Codes_1_q0 => bl3Codes_1_q0,
        bl4Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl4Codes_0_address0,
        bl4Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl4Codes_0_ce0,
        bl4Codes_0_q0 => bl4Codes_0_q0,
        bl4Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl4Codes_1_address0,
        bl4Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl4Codes_1_ce0,
        bl4Codes_1_q0 => bl4Codes_1_q0,
        bl5Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl5Codes_0_address0,
        bl5Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl5Codes_0_ce0,
        bl5Codes_0_q0 => bl5Codes_0_q0,
        bl5Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl5Codes_1_address0,
        bl5Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl5Codes_1_ce0,
        bl5Codes_1_q0 => bl5Codes_1_q0,
        bl6Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl6Codes_0_address0,
        bl6Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl6Codes_0_ce0,
        bl6Codes_0_q0 => bl6Codes_0_q0,
        bl6Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl6Codes_1_address0,
        bl6Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl6Codes_1_ce0,
        bl6Codes_1_q0 => bl6Codes_1_q0,
        bl7Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl7Codes_0_address0,
        bl7Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl7Codes_0_ce0,
        bl7Codes_0_q0 => bl7Codes_0_q0,
        bl7Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl7Codes_1_address0,
        bl7Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl7Codes_1_ce0,
        bl7Codes_1_q0 => bl7Codes_1_q0,
        bl8Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl8Codes_0_address0,
        bl8Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl8Codes_0_ce0,
        bl8Codes_0_q0 => bl8Codes_0_q0,
        bl8Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl8Codes_1_address0,
        bl8Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl8Codes_1_ce0,
        bl8Codes_1_q0 => bl8Codes_1_q0,
        bl9Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl9Codes_0_address0,
        bl9Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl9Codes_0_ce0,
        bl9Codes_0_q0 => bl9Codes_0_q0,
        bl9Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl9Codes_1_address0,
        bl9Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl9Codes_1_ce0,
        bl9Codes_1_q0 => bl9Codes_1_q0,
        bl10Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl10Codes_0_address0,
        bl10Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl10Codes_0_ce0,
        bl10Codes_0_q0 => bl10Codes_0_q0,
        bl10Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl10Codes_1_address0,
        bl10Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl10Codes_1_ce0,
        bl10Codes_1_q0 => bl10Codes_1_q0,
        bl11Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl11Codes_0_address0,
        bl11Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl11Codes_0_ce0,
        bl11Codes_0_q0 => bl11Codes_0_q0,
        bl11Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl11Codes_1_address0,
        bl11Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl11Codes_1_ce0,
        bl11Codes_1_q0 => bl11Codes_1_q0,
        bl12Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl12Codes_0_address0,
        bl12Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl12Codes_0_ce0,
        bl12Codes_0_q0 => bl12Codes_0_q0,
        bl12Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl12Codes_1_address0,
        bl12Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl12Codes_1_ce0,
        bl12Codes_1_q0 => bl12Codes_1_q0,
        bl13Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl13Codes_0_address0,
        bl13Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl13Codes_0_ce0,
        bl13Codes_0_q0 => bl13Codes_0_q0,
        bl13Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl13Codes_1_address0,
        bl13Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl13Codes_1_ce0,
        bl13Codes_1_q0 => bl13Codes_1_q0,
        bl14Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl14Codes_0_address0,
        bl14Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl14Codes_0_ce0,
        bl14Codes_0_q0 => bl14Codes_0_q0,
        bl14Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl14Codes_1_address0,
        bl14Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl14Codes_1_ce0,
        bl14Codes_1_q0 => bl14Codes_1_q0,
        bl15Codes_0_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl15Codes_0_address0,
        bl15Codes_0_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl15Codes_0_ce0,
        bl15Codes_0_q0 => bl15Codes_0_q0,
        bl15Codes_1_address0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl15Codes_1_address0,
        bl15Codes_1_ce0 => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl15Codes_1_ce0,
        bl15Codes_1_q0 => bl15Codes_1_q0,
        ignoreValue_cast => ignoreValue,
        done_0_out => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_done_0_out,
        done_0_out_ap_vld => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_done_0_out_ap_vld,
        buffer_out => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_buffer_out,
        buffer_out_ap_vld => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_buffer_out_ap_vld,
        counter_out => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_counter_out,
        counter_out_ap_vld => grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_counter_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_ready = ap_const_logic_1)) then 
                    grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                codeOffsets_0_load_10_reg_833 <= codeOffsets_0_q1;
                codeOffsets_0_load_9_reg_828 <= codeOffsets_0_q0;
                codeOffsets_1_load_10_reg_863 <= codeOffsets_1_q1;
                codeOffsets_1_load_9_reg_858 <= codeOffsets_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                codeOffsets_0_load_11_reg_888 <= codeOffsets_0_q0;
                codeOffsets_0_load_12_reg_893 <= codeOffsets_0_q1;
                codeOffsets_1_load_11_reg_918 <= codeOffsets_1_q0;
                codeOffsets_1_load_12_reg_923 <= codeOffsets_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                codeOffsets_0_load_13_reg_928 <= codeOffsets_0_q0;
                codeOffsets_0_load_14_reg_933 <= codeOffsets_0_q1;
                codeOffsets_1_load_13_reg_938 <= codeOffsets_1_q0;
                codeOffsets_1_load_14_reg_943 <= codeOffsets_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                codeOffsets_0_load_1_reg_668 <= codeOffsets_0_q1;
                codeOffsets_0_load_2_reg_673 <= codeOffsets_0_q0;
                codeOffsets_1_load_1_reg_698 <= codeOffsets_1_q1;
                codeOffsets_1_load_2_reg_703 <= codeOffsets_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                codeOffsets_0_load_3_reg_708 <= codeOffsets_0_q0;
                codeOffsets_0_load_4_reg_713 <= codeOffsets_0_q1;
                codeOffsets_1_load_3_reg_738 <= codeOffsets_1_q0;
                codeOffsets_1_load_4_reg_743 <= codeOffsets_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                codeOffsets_0_load_5_reg_748 <= codeOffsets_0_q0;
                codeOffsets_0_load_6_reg_753 <= codeOffsets_0_q1;
                codeOffsets_1_load_5_reg_778 <= codeOffsets_1_q0;
                codeOffsets_1_load_6_reg_783 <= codeOffsets_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                codeOffsets_0_load_7_reg_788 <= codeOffsets_0_q0;
                codeOffsets_0_load_8_reg_793 <= codeOffsets_0_q1;
                codeOffsets_1_load_7_reg_818 <= codeOffsets_1_q0;
                codeOffsets_1_load_8_reg_823 <= codeOffsets_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                codeOffsets_0_load_reg_638 <= codeOffsets_0_q0;
                codeOffsets_1_load_reg_663 <= codeOffsets_1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_done, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_done)
    begin
        if ((grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_done_0_out;
    ap_return_1 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_buffer_out;
    ap_return_2 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_counter_out;
    bl10Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl10Codes_0_address0;
    bl10Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl10Codes_0_ce0;
    bl10Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl10Codes_1_address0;
    bl10Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl10Codes_1_ce0;
    bl11Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl11Codes_0_address0;
    bl11Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl11Codes_0_ce0;
    bl11Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl11Codes_1_address0;
    bl11Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl11Codes_1_ce0;
    bl12Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl12Codes_0_address0;
    bl12Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl12Codes_0_ce0;
    bl12Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl12Codes_1_address0;
    bl12Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl12Codes_1_ce0;
    bl13Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl13Codes_0_address0;
    bl13Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl13Codes_0_ce0;
    bl13Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl13Codes_1_address0;
    bl13Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl13Codes_1_ce0;
    bl14Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl14Codes_0_address0;
    bl14Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl14Codes_0_ce0;
    bl14Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl14Codes_1_address0;
    bl14Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl14Codes_1_ce0;
    bl15Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl15Codes_0_address0;
    bl15Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl15Codes_0_ce0;
    bl15Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl15Codes_1_address0;
    bl15Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl15Codes_1_ce0;
    bl1Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl1Codes_0_address0;
    bl1Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl1Codes_0_ce0;
    bl1Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl1Codes_1_address0;
    bl1Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl1Codes_1_ce0;
    bl2Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl2Codes_0_address0;
    bl2Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl2Codes_0_ce0;
    bl2Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl2Codes_1_address0;
    bl2Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl2Codes_1_ce0;
    bl3Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl3Codes_0_address0;
    bl3Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl3Codes_0_ce0;
    bl3Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl3Codes_1_address0;
    bl3Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl3Codes_1_ce0;
    bl4Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl4Codes_0_address0;
    bl4Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl4Codes_0_ce0;
    bl4Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl4Codes_1_address0;
    bl4Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl4Codes_1_ce0;
    bl5Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl5Codes_0_address0;
    bl5Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl5Codes_0_ce0;
    bl5Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl5Codes_1_address0;
    bl5Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl5Codes_1_ce0;
    bl6Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl6Codes_0_address0;
    bl6Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl6Codes_0_ce0;
    bl6Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl6Codes_1_address0;
    bl6Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl6Codes_1_ce0;
    bl7Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl7Codes_0_address0;
    bl7Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl7Codes_0_ce0;
    bl7Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl7Codes_1_address0;
    bl7Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl7Codes_1_ce0;
    bl8Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl8Codes_0_address0;
    bl8Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl8Codes_0_ce0;
    bl8Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl8Codes_1_address0;
    bl8Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl8Codes_1_ce0;
    bl9Codes_0_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl9Codes_0_address0;
    bl9Codes_0_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl9Codes_0_ce0;
    bl9Codes_1_address0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl9Codes_1_address0;
    bl9Codes_1_ce0 <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_bl9Codes_1_ce0;

    codeOffsets_0_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            codeOffsets_0_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            codeOffsets_0_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            codeOffsets_0_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            codeOffsets_0_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            codeOffsets_0_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            codeOffsets_0_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            codeOffsets_0_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            codeOffsets_0_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            codeOffsets_0_address0 <= "XXXX";
        end if; 
    end process;


    codeOffsets_0_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            codeOffsets_0_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            codeOffsets_0_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            codeOffsets_0_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            codeOffsets_0_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            codeOffsets_0_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            codeOffsets_0_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            codeOffsets_0_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            codeOffsets_0_address1 <= "XXXX";
        end if; 
    end process;


    codeOffsets_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            codeOffsets_0_ce0 <= ap_const_logic_1;
        else 
            codeOffsets_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    codeOffsets_0_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            codeOffsets_0_ce1 <= ap_const_logic_1;
        else 
            codeOffsets_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    codeOffsets_1_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            codeOffsets_1_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            codeOffsets_1_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            codeOffsets_1_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            codeOffsets_1_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            codeOffsets_1_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            codeOffsets_1_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            codeOffsets_1_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            codeOffsets_1_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            codeOffsets_1_address0 <= "XXXX";
        end if; 
    end process;


    codeOffsets_1_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            codeOffsets_1_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            codeOffsets_1_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            codeOffsets_1_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            codeOffsets_1_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            codeOffsets_1_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            codeOffsets_1_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            codeOffsets_1_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            codeOffsets_1_address1 <= "XXXX";
        end if; 
    end process;


    codeOffsets_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            codeOffsets_1_ce0 <= ap_const_logic_1;
        else 
            codeOffsets_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    codeOffsets_1_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            codeOffsets_1_ce1 <= ap_const_logic_1;
        else 
            codeOffsets_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_start <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_ap_start_reg;

    huffman_eos_stream_read_assign_proc : process(grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_huffman_eos_stream_read, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            huffman_eos_stream_read <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_huffman_eos_stream_read;
        else 
            huffman_eos_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    huffman_input_stream_read_assign_proc : process(grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_huffman_input_stream_read, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            huffman_input_stream_read <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_huffman_input_stream_read;
        else 
            huffman_input_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    lz77_output_stream_din <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_lz77_output_stream_din;

    lz77_output_stream_write_assign_proc : process(grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_lz77_output_stream_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lz77_output_stream_write <= grp_huffmanBytegenLL_Pipeline_ByteGen_fu_468_lz77_output_stream_write;
        else 
            lz77_output_stream_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
