-- ==============================================================
-- Generated by Vitis HLS v2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decompressor_kernel_code_generator_array_dyn_new_Pipeline_cnt_lens is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    codes_val : IN STD_LOGIC_VECTOR (8 downto 0);
    idx : IN STD_LOGIC_VECTOR (8 downto 0);
    lens_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    lens_ce0 : OUT STD_LOGIC;
    lens_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    count_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_out_ap_vld : OUT STD_LOGIC;
    count_1_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_1_out_ap_vld : OUT STD_LOGIC;
    count_2_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_2_out_ap_vld : OUT STD_LOGIC;
    count_3_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_3_out_ap_vld : OUT STD_LOGIC;
    count_4_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_4_out_ap_vld : OUT STD_LOGIC;
    count_5_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_5_out_ap_vld : OUT STD_LOGIC;
    count_6_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_6_out_ap_vld : OUT STD_LOGIC;
    count_7_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_7_out_ap_vld : OUT STD_LOGIC;
    count_8_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_8_out_ap_vld : OUT STD_LOGIC;
    count_9_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_9_out_ap_vld : OUT STD_LOGIC;
    count_10_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_10_out_ap_vld : OUT STD_LOGIC;
    count_11_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_11_out_ap_vld : OUT STD_LOGIC;
    count_12_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_12_out_ap_vld : OUT STD_LOGIC;
    count_13_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    count_13_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of decompressor_kernel_code_generator_array_dyn_new_Pipeline_cnt_lens is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln774_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln776_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_106 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln774_fu_391_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_4 : STD_LOGIC_VECTOR (8 downto 0);
    signal count_14_fu_110 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_16_fu_537_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln776_fu_461_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal count_13_fu_114 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_12_fu_118 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_11_fu_122 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_10_fu_126 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_9_fu_130 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_8_fu_134 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_7_fu_138 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_6_fu_142 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_5_fu_146 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_4_fu_150 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_3_fu_154 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_2_fu_158 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_1_fu_162 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_fu_166 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal count_15_fu_170 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln776_fu_397_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_465_p33 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_465_p34 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p35 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_fu_465_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component decompressor_kernel_sparsemux_33_4_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        din4 : IN STD_LOGIC_VECTOR (8 downto 0);
        din5 : IN STD_LOGIC_VECTOR (8 downto 0);
        din6 : IN STD_LOGIC_VECTOR (8 downto 0);
        din7 : IN STD_LOGIC_VECTOR (8 downto 0);
        din8 : IN STD_LOGIC_VECTOR (8 downto 0);
        din9 : IN STD_LOGIC_VECTOR (8 downto 0);
        din10 : IN STD_LOGIC_VECTOR (8 downto 0);
        din11 : IN STD_LOGIC_VECTOR (8 downto 0);
        din12 : IN STD_LOGIC_VECTOR (8 downto 0);
        din13 : IN STD_LOGIC_VECTOR (8 downto 0);
        din14 : IN STD_LOGIC_VECTOR (8 downto 0);
        din15 : IN STD_LOGIC_VECTOR (8 downto 0);
        def : IN STD_LOGIC_VECTOR (8 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component decompressor_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_33_4_9_1_1_U156 : component decompressor_kernel_sparsemux_33_4_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 9,
        CASE1 => "0001",
        din1_WIDTH => 9,
        CASE2 => "0010",
        din2_WIDTH => 9,
        CASE3 => "0011",
        din3_WIDTH => 9,
        CASE4 => "0100",
        din4_WIDTH => 9,
        CASE5 => "0101",
        din5_WIDTH => 9,
        CASE6 => "0110",
        din6_WIDTH => 9,
        CASE7 => "0111",
        din7_WIDTH => 9,
        CASE8 => "1000",
        din8_WIDTH => 9,
        CASE9 => "1001",
        din9_WIDTH => 9,
        CASE10 => "1010",
        din10_WIDTH => 9,
        CASE11 => "1011",
        din11_WIDTH => 9,
        CASE12 => "1100",
        din12_WIDTH => 9,
        CASE13 => "1101",
        din13_WIDTH => 9,
        CASE14 => "1110",
        din14_WIDTH => 9,
        CASE15 => "1111",
        din15_WIDTH => 9,
        def_WIDTH => 9,
        sel_WIDTH => 4,
        dout_WIDTH => 9)
    port map (
        din0 => count_14_fu_110,
        din1 => count_13_fu_114,
        din2 => count_12_fu_118,
        din3 => count_11_fu_122,
        din4 => count_10_fu_126,
        din5 => count_9_fu_130,
        din6 => count_8_fu_134,
        din7 => count_7_fu_138,
        din8 => count_6_fu_142,
        din9 => count_5_fu_146,
        din10 => count_4_fu_150,
        din11 => count_3_fu_154,
        din12 => count_2_fu_158,
        din13 => count_1_fu_162,
        din14 => count_fu_166,
        din15 => count_15_fu_170,
        def => tmp_fu_465_p33,
        sel => tmp_fu_465_p34,
        dout => tmp_fu_465_p35);

    flow_control_loop_pipe_sequential_init_U : component decompressor_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    count_10_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_10_fu_126 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_4))) then 
                    count_10_fu_126 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_11_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_11_fu_122 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_3))) then 
                    count_11_fu_122 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_12_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_12_fu_118 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_2))) then 
                    count_12_fu_118 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_13_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_13_fu_114 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_1))) then 
                    count_13_fu_114 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_14_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_14_fu_110 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_0))) then 
                    count_14_fu_110 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_15_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_15_fu_170 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_F))) then 
                    count_15_fu_170 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_1_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_1_fu_162 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_D))) then 
                    count_1_fu_162 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_2_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_2_fu_158 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_C))) then 
                    count_2_fu_158 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_3_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_3_fu_154 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_B))) then 
                    count_3_fu_154 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_4_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_4_fu_150 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_A))) then 
                    count_4_fu_150 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_5_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_5_fu_146 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_9))) then 
                    count_5_fu_146 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_6_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_6_fu_142 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_8))) then 
                    count_6_fu_142 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_7_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_7_fu_138 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_7))) then 
                    count_7_fu_138 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_8_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_8_fu_134 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_6))) then 
                    count_8_fu_134 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_9_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_9_fu_130 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_5))) then 
                    count_9_fu_130 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    count_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    count_fu_166 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln776_fu_461_p1 = ap_const_lv4_E))) then 
                    count_fu_166 <= count_16_fu_537_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln774_fu_385_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_106 <= add_ln774_fu_391_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_106 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln774_fu_391_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_4) + unsigned(ap_const_lv9_1));
    add_ln776_fu_397_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_4) + unsigned(idx));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln774_fu_385_p2)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_106, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_4 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i_4 <= i_fu_106;
        end if; 
    end process;

    count_10_out <= count_10_fu_126;

    count_10_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_10_out_ap_vld <= ap_const_logic_1;
        else 
            count_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_11_out <= count_11_fu_122;

    count_11_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_11_out_ap_vld <= ap_const_logic_1;
        else 
            count_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_12_out <= count_12_fu_118;

    count_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_12_out_ap_vld <= ap_const_logic_1;
        else 
            count_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_13_out <= count_13_fu_114;

    count_13_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_13_out_ap_vld <= ap_const_logic_1;
        else 
            count_13_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_16_fu_537_p2 <= std_logic_vector(unsigned(tmp_fu_465_p35) + unsigned(ap_const_lv9_1));
    count_1_out <= count_1_fu_162;

    count_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_1_out_ap_vld <= ap_const_logic_1;
        else 
            count_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_2_out <= count_2_fu_158;

    count_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_2_out_ap_vld <= ap_const_logic_1;
        else 
            count_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_3_out <= count_3_fu_154;

    count_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_3_out_ap_vld <= ap_const_logic_1;
        else 
            count_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_4_out <= count_4_fu_150;

    count_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_4_out_ap_vld <= ap_const_logic_1;
        else 
            count_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_5_out <= count_5_fu_146;

    count_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_5_out_ap_vld <= ap_const_logic_1;
        else 
            count_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_6_out <= count_6_fu_142;

    count_6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_6_out_ap_vld <= ap_const_logic_1;
        else 
            count_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_7_out <= count_7_fu_138;

    count_7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_7_out_ap_vld <= ap_const_logic_1;
        else 
            count_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_8_out <= count_8_fu_134;

    count_8_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_8_out_ap_vld <= ap_const_logic_1;
        else 
            count_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_9_out <= count_9_fu_130;

    count_9_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_9_out_ap_vld <= ap_const_logic_1;
        else 
            count_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    count_out <= count_fu_166;

    count_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln774_fu_385_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln774_fu_385_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            count_out_ap_vld <= ap_const_logic_1;
        else 
            count_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln774_fu_385_p2 <= "1" when (ap_sig_allocacmp_i_4 = codes_val) else "0";
    lens_address0 <= zext_ln776_fu_403_p1(9 - 1 downto 0);

    lens_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lens_ce0 <= ap_const_logic_1;
        else 
            lens_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_465_p33 <= "XXXXXXXXX";
    tmp_fu_465_p34 <= lens_q0(4 - 1 downto 0);
    trunc_ln776_fu_461_p1 <= lens_q0(4 - 1 downto 0);
    zext_ln776_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln776_fu_397_p2),64));
end behav;
