-- ==============================================================
-- Generated by Vitis HLS v2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decompressor_kernel_code_generator_array_dyn_new_Pipeline_firstCode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    codeOffsets_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    codeOffsets_ce0 : OUT STD_LOGIC;
    codeOffsets_we0 : OUT STD_LOGIC;
    codeOffsets_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    count_13_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_12_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_11_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_10_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_9_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_8_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_7_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_6_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_5_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_4_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_3_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_2_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_1_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    count_reload : IN STD_LOGIC_VECTOR (8 downto 0);
    firstCode_14_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_14_out_ap_vld : OUT STD_LOGIC;
    firstCode_13_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_13_out_ap_vld : OUT STD_LOGIC;
    firstCode_12_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_12_out_ap_vld : OUT STD_LOGIC;
    firstCode_11_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_11_out_ap_vld : OUT STD_LOGIC;
    firstCode_10_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_10_out_ap_vld : OUT STD_LOGIC;
    firstCode_9_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_9_out_ap_vld : OUT STD_LOGIC;
    firstCode_8_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_8_out_ap_vld : OUT STD_LOGIC;
    firstCode_7_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_7_out_ap_vld : OUT STD_LOGIC;
    firstCode_6_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_6_out_ap_vld : OUT STD_LOGIC;
    firstCode_5_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_5_out_ap_vld : OUT STD_LOGIC;
    firstCode_4_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_4_out_ap_vld : OUT STD_LOGIC;
    firstCode_3_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_3_out_ap_vld : OUT STD_LOGIC;
    firstCode_2_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_2_out_ap_vld : OUT STD_LOGIC;
    firstCode_1_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_1_out_ap_vld : OUT STD_LOGIC;
    firstCode_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    firstCode_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of decompressor_kernel_code_generator_array_dyn_new_Pipeline_firstCode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln785_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln787_1_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln787_fu_130 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_15_fu_524_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_phi_ln787_load : STD_LOGIC_VECTOR (14 downto 0);
    signal i_3_fu_134 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln785_fu_605_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (4 downto 0);
    signal firstCode_fu_138 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal trunc_ln785_fu_422_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal firstCode_1_fu_142 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_2_fu_146 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_3_fu_150 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_4_fu_154 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_5_fu_158 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_6_fu_162 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_7_fu_166 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_8_fu_170 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_9_fu_174 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_10_fu_178 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_11_fu_182 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_12_fu_186 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_13_fu_190 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal firstCode_14_fu_194 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal add_ln787_fu_426_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p31 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_437_p33 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln787_fu_505_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln787_1_fu_509_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_s_fu_437_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_437_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component decompressor_kernel_sparsemux_31_4_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        din4 : IN STD_LOGIC_VECTOR (8 downto 0);
        din5 : IN STD_LOGIC_VECTOR (8 downto 0);
        din6 : IN STD_LOGIC_VECTOR (8 downto 0);
        din7 : IN STD_LOGIC_VECTOR (8 downto 0);
        din8 : IN STD_LOGIC_VECTOR (8 downto 0);
        din9 : IN STD_LOGIC_VECTOR (8 downto 0);
        din10 : IN STD_LOGIC_VECTOR (8 downto 0);
        din11 : IN STD_LOGIC_VECTOR (8 downto 0);
        din12 : IN STD_LOGIC_VECTOR (8 downto 0);
        din13 : IN STD_LOGIC_VECTOR (8 downto 0);
        din14 : IN STD_LOGIC_VECTOR (8 downto 0);
        def : IN STD_LOGIC_VECTOR (8 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component decompressor_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_31_4_9_1_1_U175 : component decompressor_kernel_sparsemux_31_4_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0001",
        din0_WIDTH => 9,
        CASE1 => "0010",
        din1_WIDTH => 9,
        CASE2 => "0011",
        din2_WIDTH => 9,
        CASE3 => "0100",
        din3_WIDTH => 9,
        CASE4 => "0101",
        din4_WIDTH => 9,
        CASE5 => "0110",
        din5_WIDTH => 9,
        CASE6 => "0111",
        din6_WIDTH => 9,
        CASE7 => "1000",
        din7_WIDTH => 9,
        CASE8 => "1001",
        din8_WIDTH => 9,
        CASE9 => "1010",
        din9_WIDTH => 9,
        CASE10 => "1011",
        din10_WIDTH => 9,
        CASE11 => "1100",
        din11_WIDTH => 9,
        CASE12 => "1101",
        din12_WIDTH => 9,
        CASE13 => "1110",
        din13_WIDTH => 9,
        CASE14 => "1111",
        din14_WIDTH => 9,
        def_WIDTH => 9,
        sel_WIDTH => 4,
        dout_WIDTH => 9)
    port map (
        din0 => ap_const_lv9_0,
        din1 => count_13_reload,
        din2 => count_12_reload,
        din3 => count_11_reload,
        din4 => count_10_reload,
        din5 => count_9_reload,
        din6 => count_8_reload,
        din7 => count_7_reload,
        din8 => count_6_reload,
        din9 => count_5_reload,
        din10 => count_4_reload,
        din11 => count_3_reload,
        din12 => count_2_reload,
        din13 => count_1_reload,
        din14 => count_reload,
        def => tmp_s_fu_437_p31,
        sel => trunc_ln785_fu_422_p1,
        dout => tmp_s_fu_437_p33);

    flow_control_loop_pipe_sequential_init_U : component decompressor_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_3_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln785_fu_413_p2 = ap_const_lv1_0)) then 
                    i_3_fu_134 <= add_ln785_fu_605_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_3_fu_134 <= ap_const_lv5_1;
                end if;
            end if; 
        end if;
    end process;

    phi_ln787_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln785_fu_413_p2 = ap_const_lv1_0)) then 
                                        phi_ln787_fu_130(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_ln787_fu_130(1) <= '0';
                    phi_ln787_fu_130(2) <= '0';
                    phi_ln787_fu_130(3) <= '0';
                    phi_ln787_fu_130(4) <= '0';
                    phi_ln787_fu_130(5) <= '0';
                    phi_ln787_fu_130(6) <= '0';
                    phi_ln787_fu_130(7) <= '0';
                    phi_ln787_fu_130(8) <= '0';
                    phi_ln787_fu_130(9) <= '0';
                    phi_ln787_fu_130(10) <= '0';
                    phi_ln787_fu_130(11) <= '0';
                    phi_ln787_fu_130(12) <= '0';
                    phi_ln787_fu_130(13) <= '0';
                    phi_ln787_fu_130(14) <= '0';
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_B))) then
                    firstCode_10_fu_178(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_C))) then
                    firstCode_11_fu_182(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_D))) then
                    firstCode_12_fu_186(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_E))) then
                    firstCode_13_fu_190(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (trunc_ln785_fu_422_p1 = ap_const_lv4_0)) or ((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (trunc_ln785_fu_422_p1 = ap_const_lv4_F))))) then
                    firstCode_14_fu_194(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_2))) then
                    firstCode_1_fu_142(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_3))) then
                    firstCode_2_fu_146(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_4))) then
                    firstCode_3_fu_150(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_5))) then
                    firstCode_4_fu_154(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_6))) then
                    firstCode_5_fu_158(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_7))) then
                    firstCode_6_fu_162(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_8))) then
                    firstCode_7_fu_166(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_9))) then
                    firstCode_8_fu_170(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_A))) then
                    firstCode_9_fu_174(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln785_fu_422_p1 = ap_const_lv4_1))) then
                    firstCode_fu_138(14 downto 1) <= firstCode_15_fu_524_p2(14 downto 1);
            end if;
        end if;
    end process;
    phi_ln787_fu_130(0) <= '0';
    firstCode_fu_138(0) <= '0';
    firstCode_1_fu_142(0) <= '0';
    firstCode_2_fu_146(0) <= '0';
    firstCode_3_fu_150(0) <= '0';
    firstCode_4_fu_154(0) <= '0';
    firstCode_5_fu_158(0) <= '0';
    firstCode_6_fu_162(0) <= '0';
    firstCode_7_fu_166(0) <= '0';
    firstCode_8_fu_170(0) <= '0';
    firstCode_9_fu_174(0) <= '0';
    firstCode_10_fu_178(0) <= '0';
    firstCode_11_fu_182(0) <= '0';
    firstCode_12_fu_186(0) <= '0';
    firstCode_13_fu_190(0) <= '0';
    firstCode_14_fu_194(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln785_fu_605_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv5_1));
    add_ln787_1_fu_509_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_ln787_load) + unsigned(zext_ln787_fu_505_p1));
    add_ln787_fu_426_p2 <= std_logic_vector(unsigned(trunc_ln785_fu_422_p1) + unsigned(ap_const_lv4_F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_3_fu_134)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i <= ap_const_lv5_1;
        else 
            ap_sig_allocacmp_i <= i_3_fu_134;
        end if; 
    end process;


    ap_sig_allocacmp_phi_ln787_load_assign_proc : process(ap_CS_fsm_state1, phi_ln787_fu_130, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_phi_ln787_load <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_phi_ln787_load <= phi_ln787_fu_130;
        end if; 
    end process;

    codeOffsets_address0 <= zext_ln787_1_fu_432_p1(4 - 1 downto 0);

    codeOffsets_ce0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            codeOffsets_ce0 <= ap_const_logic_1;
        else 
            codeOffsets_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codeOffsets_d0 <= (add_ln787_1_fu_509_p2 & ap_const_lv1_0);

    codeOffsets_we0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            codeOffsets_we0 <= ap_const_logic_1;
        else 
            codeOffsets_we0 <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_10_out <= firstCode_10_fu_178;

    firstCode_10_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_10_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_11_out <= firstCode_11_fu_182;

    firstCode_11_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_11_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_12_out <= firstCode_12_fu_186;

    firstCode_12_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_12_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_13_out <= firstCode_13_fu_190;

    firstCode_13_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_13_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_13_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_14_out <= firstCode_14_fu_194;

    firstCode_14_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_14_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_14_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_15_fu_524_p2 <= std_logic_vector(shift_left(unsigned(add_ln787_1_fu_509_p2),to_integer(unsigned('0' & ap_const_lv15_1(15-1 downto 0)))));
    firstCode_1_out <= firstCode_1_fu_142;

    firstCode_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_1_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_2_out <= firstCode_2_fu_146;

    firstCode_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_2_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_3_out <= firstCode_3_fu_150;

    firstCode_3_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_3_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_4_out <= firstCode_4_fu_154;

    firstCode_4_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_4_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_5_out <= firstCode_5_fu_158;

    firstCode_5_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_5_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_6_out <= firstCode_6_fu_162;

    firstCode_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_6_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_7_out <= firstCode_7_fu_166;

    firstCode_7_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_7_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_8_out <= firstCode_8_fu_170;

    firstCode_8_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_8_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_9_out <= firstCode_9_fu_174;

    firstCode_9_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_9_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    firstCode_out <= firstCode_fu_138;

    firstCode_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln785_fu_413_p2)
    begin
        if (((icmp_ln785_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            firstCode_out_ap_vld <= ap_const_logic_1;
        else 
            firstCode_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln785_fu_413_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv5_10) else "0";
    tmp_s_fu_437_p31 <= "XXXXXXXXX";
    trunc_ln785_fu_422_p1 <= ap_sig_allocacmp_i(4 - 1 downto 0);
    zext_ln787_1_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln787_fu_426_p2),64));
    zext_ln787_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_437_p33),15));
end behav;
