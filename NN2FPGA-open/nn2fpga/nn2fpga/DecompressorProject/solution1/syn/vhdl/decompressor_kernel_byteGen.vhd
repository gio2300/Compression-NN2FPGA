-- ==============================================================
-- Generated by Vitis HLS v2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decompressor_kernel_byteGen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (5 downto 0);
    codeOffsets_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    codeOffsets_ce0 : OUT STD_LOGIC;
    codeOffsets_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    codeOffsets_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    codeOffsets_ce1 : OUT STD_LOGIC;
    codeOffsets_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bl1Codes_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    bl1Codes_ce0 : OUT STD_LOGIC;
    bl1Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl2Codes_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    bl2Codes_ce0 : OUT STD_LOGIC;
    bl2Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl3Codes_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bl3Codes_ce0 : OUT STD_LOGIC;
    bl3Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl4Codes_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bl4Codes_ce0 : OUT STD_LOGIC;
    bl4Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl5Codes_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bl5Codes_ce0 : OUT STD_LOGIC;
    bl5Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl6Codes_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bl6Codes_ce0 : OUT STD_LOGIC;
    bl6Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    bl7Codes_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bl7Codes_ce0 : OUT STD_LOGIC;
    bl7Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    lens_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    lens_ce0 : OUT STD_LOGIC;
    lens_we0 : OUT STD_LOGIC;
    lens_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    huffman_eos_stream_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    huffman_eos_stream_empty_n : IN STD_LOGIC;
    huffman_eos_stream_read : OUT STD_LOGIC;
    huffman_input_stream_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    huffman_input_stream_empty_n : IN STD_LOGIC;
    huffman_input_stream_read : OUT STD_LOGIC;
    nlen_val : IN STD_LOGIC_VECTOR (8 downto 0);
    ndist_val : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of decompressor_kernel_byteGen is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal huffman_eos_stream_blk_n : STD_LOGIC;
    signal or_ln57_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal huffman_input_stream_blk_n : STD_LOGIC;
    signal add_ln60_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln62_fu_367_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_i307_fu_377_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_i307_reg_500 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal codeOffsets_load_reg_515 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal codeOffsets_load_1_reg_530 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_load_2_reg_535 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal codeOffsets_load_3_reg_550 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_load_4_reg_555 : STD_LOGIC_VECTOR (15 downto 0);
    signal codeOffsets_load_5_reg_560 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal codeOffsets_load_6_reg_565 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_ap_start : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_ap_done : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_ap_idle : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_ap_ready : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_huffman_input_stream_read : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_huffman_eos_stream_read : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl1Codes_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl1Codes_ce0 : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl2Codes_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl2Codes_ce0 : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl3Codes_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl3Codes_ce0 : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl4Codes_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl4Codes_ce0 : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl5Codes_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl5Codes_ce0 : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl6Codes_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl6Codes_ce0 : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl7Codes_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_bl7Codes_ce0 : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_lens_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_lens_ce0 : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_lens_we0 : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_lens_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_write_flag_1_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_write_flag_1_out_ap_vld : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_bits_cntr_1_out : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_bits_cntr_1_out_ap_vld : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_write_flag3_1_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_write_flag3_1_out_ap_vld : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_p_bitbuffer_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_p_bitbuffer_1_out_ap_vld : STD_LOGIC;
    signal grp_byteGen_Pipeline_bytegen_fu_274_done_1_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_done_1_out_ap_vld : STD_LOGIC;
    signal p_bitbuffer_0_reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal write_flag_0_reg_240 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_254 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_58_reg_264 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_byteGen_Pipeline_bytegen_fu_274_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_fu_321_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln57_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln60_fu_343_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln60_3_fu_347_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln60_fu_351_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln60_4_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ndist_val_cast_fu_373_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln536_fu_398_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln536_1_fu_405_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component decompressor_kernel_byteGen_Pipeline_bytegen IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        huffman_input_stream_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        huffman_input_stream_empty_n : IN STD_LOGIC;
        huffman_input_stream_read : OUT STD_LOGIC;
        huffman_eos_stream_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        huffman_eos_stream_empty_n : IN STD_LOGIC;
        huffman_eos_stream_read : OUT STD_LOGIC;
        write_flag_0 : IN STD_LOGIC_VECTOR (0 downto 0);
        empty_39 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_bitbuffer_0 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty : IN STD_LOGIC_VECTOR (0 downto 0);
        add_i307_cast : IN STD_LOGIC_VECTOR (8 downto 0);
        codeOffsets_load : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
        codeOffsets_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
        bl1Codes_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        bl1Codes_ce0 : OUT STD_LOGIC;
        bl1Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl2Codes_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        bl2Codes_ce0 : OUT STD_LOGIC;
        bl2Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl3Codes_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bl3Codes_ce0 : OUT STD_LOGIC;
        bl3Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl4Codes_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bl4Codes_ce0 : OUT STD_LOGIC;
        bl4Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl5Codes_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bl5Codes_ce0 : OUT STD_LOGIC;
        bl5Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl6Codes_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bl6Codes_ce0 : OUT STD_LOGIC;
        bl6Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        bl7Codes_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bl7Codes_ce0 : OUT STD_LOGIC;
        bl7Codes_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        lens_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        lens_ce0 : OUT STD_LOGIC;
        lens_we0 : OUT STD_LOGIC;
        lens_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        write_flag_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        write_flag_1_out_ap_vld : OUT STD_LOGIC;
        bits_cntr_1_out : OUT STD_LOGIC_VECTOR (5 downto 0);
        bits_cntr_1_out_ap_vld : OUT STD_LOGIC;
        write_flag3_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        write_flag3_1_out_ap_vld : OUT STD_LOGIC;
        p_bitbuffer_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_bitbuffer_1_out_ap_vld : OUT STD_LOGIC;
        done_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        done_1_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_byteGen_Pipeline_bytegen_fu_274 : component decompressor_kernel_byteGen_Pipeline_bytegen
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_byteGen_Pipeline_bytegen_fu_274_ap_start,
        ap_done => grp_byteGen_Pipeline_bytegen_fu_274_ap_done,
        ap_idle => grp_byteGen_Pipeline_bytegen_fu_274_ap_idle,
        ap_ready => grp_byteGen_Pipeline_bytegen_fu_274_ap_ready,
        huffman_input_stream_dout => huffman_input_stream_dout,
        huffman_input_stream_empty_n => huffman_input_stream_empty_n,
        huffman_input_stream_read => grp_byteGen_Pipeline_bytegen_fu_274_huffman_input_stream_read,
        huffman_eos_stream_dout => huffman_eos_stream_dout,
        huffman_eos_stream_empty_n => huffman_eos_stream_empty_n,
        huffman_eos_stream_read => grp_byteGen_Pipeline_bytegen_fu_274_huffman_eos_stream_read,
        write_flag_0 => write_flag_0_reg_240,
        empty_39 => empty_58_reg_264,
        p_bitbuffer_0 => p_bitbuffer_0_reg_230,
        empty => empty_reg_254,
        add_i307_cast => add_i307_reg_500,
        codeOffsets_load => codeOffsets_load_reg_515,
        codeOffsets_load_1 => codeOffsets_load_1_reg_530,
        codeOffsets_load_2 => codeOffsets_load_2_reg_535,
        codeOffsets_load_3 => codeOffsets_load_3_reg_550,
        codeOffsets_load_4 => codeOffsets_load_4_reg_555,
        codeOffsets_load_5 => codeOffsets_load_5_reg_560,
        codeOffsets_load_6 => codeOffsets_load_6_reg_565,
        bl1Codes_address0 => grp_byteGen_Pipeline_bytegen_fu_274_bl1Codes_address0,
        bl1Codes_ce0 => grp_byteGen_Pipeline_bytegen_fu_274_bl1Codes_ce0,
        bl1Codes_q0 => bl1Codes_q0,
        bl2Codes_address0 => grp_byteGen_Pipeline_bytegen_fu_274_bl2Codes_address0,
        bl2Codes_ce0 => grp_byteGen_Pipeline_bytegen_fu_274_bl2Codes_ce0,
        bl2Codes_q0 => bl2Codes_q0,
        bl3Codes_address0 => grp_byteGen_Pipeline_bytegen_fu_274_bl3Codes_address0,
        bl3Codes_ce0 => grp_byteGen_Pipeline_bytegen_fu_274_bl3Codes_ce0,
        bl3Codes_q0 => bl3Codes_q0,
        bl4Codes_address0 => grp_byteGen_Pipeline_bytegen_fu_274_bl4Codes_address0,
        bl4Codes_ce0 => grp_byteGen_Pipeline_bytegen_fu_274_bl4Codes_ce0,
        bl4Codes_q0 => bl4Codes_q0,
        bl5Codes_address0 => grp_byteGen_Pipeline_bytegen_fu_274_bl5Codes_address0,
        bl5Codes_ce0 => grp_byteGen_Pipeline_bytegen_fu_274_bl5Codes_ce0,
        bl5Codes_q0 => bl5Codes_q0,
        bl6Codes_address0 => grp_byteGen_Pipeline_bytegen_fu_274_bl6Codes_address0,
        bl6Codes_ce0 => grp_byteGen_Pipeline_bytegen_fu_274_bl6Codes_ce0,
        bl6Codes_q0 => bl6Codes_q0,
        bl7Codes_address0 => grp_byteGen_Pipeline_bytegen_fu_274_bl7Codes_address0,
        bl7Codes_ce0 => grp_byteGen_Pipeline_bytegen_fu_274_bl7Codes_ce0,
        bl7Codes_q0 => bl7Codes_q0,
        lens_address0 => grp_byteGen_Pipeline_bytegen_fu_274_lens_address0,
        lens_ce0 => grp_byteGen_Pipeline_bytegen_fu_274_lens_ce0,
        lens_we0 => grp_byteGen_Pipeline_bytegen_fu_274_lens_we0,
        lens_d0 => grp_byteGen_Pipeline_bytegen_fu_274_lens_d0,
        write_flag_1_out => grp_byteGen_Pipeline_bytegen_fu_274_write_flag_1_out,
        write_flag_1_out_ap_vld => grp_byteGen_Pipeline_bytegen_fu_274_write_flag_1_out_ap_vld,
        bits_cntr_1_out => grp_byteGen_Pipeline_bytegen_fu_274_bits_cntr_1_out,
        bits_cntr_1_out_ap_vld => grp_byteGen_Pipeline_bytegen_fu_274_bits_cntr_1_out_ap_vld,
        write_flag3_1_out => grp_byteGen_Pipeline_bytegen_fu_274_write_flag3_1_out,
        write_flag3_1_out_ap_vld => grp_byteGen_Pipeline_bytegen_fu_274_write_flag3_1_out_ap_vld,
        p_bitbuffer_1_out => grp_byteGen_Pipeline_bytegen_fu_274_p_bitbuffer_1_out,
        p_bitbuffer_1_out_ap_vld => grp_byteGen_Pipeline_bytegen_fu_274_p_bitbuffer_1_out_ap_vld,
        done_1_out => grp_byteGen_Pipeline_bytegen_fu_274_done_1_out,
        done_1_out_ap_vld => grp_byteGen_Pipeline_bytegen_fu_274_done_1_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_byteGen_Pipeline_bytegen_fu_274_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_byteGen_Pipeline_bytegen_fu_274_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_byteGen_Pipeline_bytegen_fu_274_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_byteGen_Pipeline_bytegen_fu_274_ap_ready = ap_const_logic_1)) then 
                    grp_byteGen_Pipeline_bytegen_fu_274_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_58_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((or_ln57_fu_337_p2 = ap_const_lv1_1)) then 
                    empty_58_reg_264 <= p_read1;
                elsif ((or_ln57_fu_337_p2 = ap_const_lv1_0)) then 
                    empty_58_reg_264 <= add_ln62_fu_367_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((or_ln57_fu_337_p2 = ap_const_lv1_1)) then 
                    empty_reg_254 <= p_read2;
                elsif ((or_ln57_fu_337_p2 = ap_const_lv1_0)) then 
                    empty_reg_254 <= huffman_eos_stream_dout;
                end if;
            end if; 
        end if;
    end process;

    p_bitbuffer_0_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((or_ln57_fu_337_p2 = ap_const_lv1_1)) then 
                    p_bitbuffer_0_reg_230 <= p_read;
                elsif ((or_ln57_fu_337_p2 = ap_const_lv1_0)) then 
                    p_bitbuffer_0_reg_230 <= add_ln60_fu_361_p2;
                end if;
            end if; 
        end if;
    end process;

    write_flag_0_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((or_ln57_fu_337_p2 = ap_const_lv1_1)) then 
                    write_flag_0_reg_240 <= ap_const_lv1_0;
                elsif ((or_ln57_fu_337_p2 = ap_const_lv1_0)) then 
                    write_flag_0_reg_240 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_i307_reg_500 <= add_i307_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                codeOffsets_load_1_reg_530 <= codeOffsets_q1;
                codeOffsets_load_2_reg_535 <= codeOffsets_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                codeOffsets_load_3_reg_550 <= codeOffsets_q0;
                codeOffsets_load_4_reg_555 <= codeOffsets_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                codeOffsets_load_5_reg_560 <= codeOffsets_q0;
                codeOffsets_load_6_reg_565 <= codeOffsets_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                codeOffsets_load_reg_515 <= codeOffsets_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, grp_byteGen_Pipeline_bytegen_fu_274_ap_done, ap_block_state1, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_byteGen_Pipeline_bytegen_fu_274_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_i307_fu_377_p2 <= std_logic_vector(unsigned(ndist_val_cast_fu_373_p1) + unsigned(nlen_val));
    add_ln60_fu_361_p2 <= std_logic_vector(unsigned(zext_ln60_4_fu_357_p1) + unsigned(p_read));
    add_ln62_fu_367_p2 <= std_logic_vector(unsigned(p_read1) + unsigned(ap_const_lv6_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_byteGen_Pipeline_bytegen_fu_274_ap_done)
    begin
        if ((grp_byteGen_Pipeline_bytegen_fu_274_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, huffman_eos_stream_empty_n, huffman_input_stream_empty_n, or_ln57_fu_337_p2)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or ((or_ln57_fu_337_p2 = ap_const_lv1_0) and (huffman_eos_stream_empty_n = ap_const_logic_0)) or ((or_ln57_fu_337_p2 = ap_const_lv1_0) and (huffman_input_stream_empty_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= grp_byteGen_Pipeline_bytegen_fu_274_p_bitbuffer_1_out;
    ap_return_1 <= select_ln536_fu_398_p3;
    ap_return_2 <= select_ln536_1_fu_405_p3;
    bl1Codes_address0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl1Codes_address0;
    bl1Codes_ce0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl1Codes_ce0;
    bl2Codes_address0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl2Codes_address0;
    bl2Codes_ce0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl2Codes_ce0;
    bl3Codes_address0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl3Codes_address0;
    bl3Codes_ce0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl3Codes_ce0;
    bl4Codes_address0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl4Codes_address0;
    bl4Codes_ce0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl4Codes_ce0;
    bl5Codes_address0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl5Codes_address0;
    bl5Codes_ce0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl5Codes_ce0;
    bl6Codes_address0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl6Codes_address0;
    bl6Codes_ce0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl6Codes_ce0;
    bl7Codes_address0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl7Codes_address0;
    bl7Codes_ce0 <= grp_byteGen_Pipeline_bytegen_fu_274_bl7Codes_ce0;

    codeOffsets_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            codeOffsets_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            codeOffsets_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            codeOffsets_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            codeOffsets_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            codeOffsets_address0 <= "XXXX";
        end if; 
    end process;


    codeOffsets_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            codeOffsets_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            codeOffsets_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            codeOffsets_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            codeOffsets_address1 <= "XXXX";
        end if; 
    end process;


    codeOffsets_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            codeOffsets_ce0 <= ap_const_logic_1;
        else 
            codeOffsets_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    codeOffsets_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            codeOffsets_ce1 <= ap_const_logic_1;
        else 
            codeOffsets_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_byteGen_Pipeline_bytegen_fu_274_ap_start <= grp_byteGen_Pipeline_bytegen_fu_274_ap_start_reg;

    huffman_eos_stream_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, huffman_eos_stream_empty_n, or_ln57_fu_337_p2)
    begin
        if (((or_ln57_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            huffman_eos_stream_blk_n <= huffman_eos_stream_empty_n;
        else 
            huffman_eos_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    huffman_eos_stream_read_assign_proc : process(ap_CS_fsm_state1, or_ln57_fu_337_p2, grp_byteGen_Pipeline_bytegen_fu_274_huffman_eos_stream_read, ap_block_state1, ap_CS_fsm_state6)
    begin
        if (((or_ln57_fu_337_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            huffman_eos_stream_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            huffman_eos_stream_read <= grp_byteGen_Pipeline_bytegen_fu_274_huffman_eos_stream_read;
        else 
            huffman_eos_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    huffman_input_stream_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, huffman_input_stream_empty_n, or_ln57_fu_337_p2)
    begin
        if (((or_ln57_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            huffman_input_stream_blk_n <= huffman_input_stream_empty_n;
        else 
            huffman_input_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    huffman_input_stream_read_assign_proc : process(ap_CS_fsm_state1, or_ln57_fu_337_p2, grp_byteGen_Pipeline_bytegen_fu_274_huffman_input_stream_read, ap_block_state1, ap_CS_fsm_state6)
    begin
        if (((or_ln57_fu_337_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            huffman_input_stream_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            huffman_input_stream_read <= grp_byteGen_Pipeline_bytegen_fu_274_huffman_input_stream_read;
        else 
            huffman_input_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln57_fu_331_p2 <= "0" when (tmp_fu_321_p4 = ap_const_lv2_0) else "1";
    lens_address0 <= grp_byteGen_Pipeline_bytegen_fu_274_lens_address0;
    lens_ce0 <= grp_byteGen_Pipeline_bytegen_fu_274_lens_ce0;
    lens_d0 <= grp_byteGen_Pipeline_bytegen_fu_274_lens_d0;
    lens_we0 <= grp_byteGen_Pipeline_bytegen_fu_274_lens_we0;
    ndist_val_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ndist_val),9));
    or_ln57_fu_337_p2 <= (p_read2 or icmp_ln57_fu_331_p2);
    select_ln536_1_fu_405_p3 <= 
        grp_byteGen_Pipeline_bytegen_fu_274_done_1_out when (grp_byteGen_Pipeline_bytegen_fu_274_write_flag3_1_out(0) = '1') else 
        p_read2;
    select_ln536_fu_398_p3 <= 
        grp_byteGen_Pipeline_bytegen_fu_274_bits_cntr_1_out when (grp_byteGen_Pipeline_bytegen_fu_274_write_flag_1_out(0) = '1') else 
        p_read1;
    shl_ln60_fu_351_p2 <= std_logic_vector(shift_left(unsigned(zext_ln60_fu_343_p1),to_integer(unsigned('0' & zext_ln60_3_fu_347_p1(31-1 downto 0)))));
    tmp_fu_321_p4 <= p_read1(5 downto 4);
    zext_ln60_3_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),31));
    zext_ln60_4_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln60_fu_351_p2),32));
    zext_ln60_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(huffman_input_stream_dout),31));
end behav;
